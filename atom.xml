<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Scala.js</title>
 <link href="https://www.scala-js.org/" rel="self"/>
 <link href="https://www.scala-js.org"/>
 <updated>2019-03-21T20:02:27-04:00</updated>
 <id>https://www.scala-js.org</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Announcing Scala.js 0.6.26</title>
   <link href="https://www.scala-js.org/news/2018/11/29/announcing-scalajs-0.6.26/"/>
   <updated>2018-11-29T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2018/11/29/announcing-scalajs-0.6.26</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.26!&lt;/p&gt;

&lt;p&gt;The highlight of this release is the support for ECMAScript modules.
It also fixes a few issues.&lt;/p&gt;

&lt;p&gt;Starting from 0.6.26 in the 0.6.x branch, Scala.js has been relicensed under the Apache License 2.0, following the corresponding relicensing of Scala upstream.
Scala.js 1.x milestones have also been relicensed since version 1.0.0-M6.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;.scala&lt;/code&gt; build files in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/&lt;/code&gt; and are upgrading from Scala.js 0.6.22 or earlier, do read &lt;a href=&quot;/news/2018/05/22/announcing-scalajs-0.6.23/&quot;&gt;the release notes of 0.6.23&lt;/a&gt;, which contain a source breaking change in that situation.&lt;/p&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.14 or earlier, make sure to read &lt;a href=&quot;/news/2017/03/21/announcing-scalajs-0.6.15/&quot;&gt;the release notes of 0.6.15&lt;/a&gt;, which contain important migration information.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.26 is backward binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.26 without change.
0.6.26 is also forward binary compatible with 0.6.{17-25}, but not with earlier releases: libraries compiled with 0.6.26 cannot be used by projects using 0.6.{0-16}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;top-level-exports-with-namespaces-are-deprecated&quot;&gt;Top-level exports with namespaces are deprecated&lt;/h2&gt;

&lt;p&gt;Top-level exports with namespaces, such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo.Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;are deprecated, as they do not have a good equivalent in ECMAScript modules.&lt;/p&gt;

&lt;p&gt;If necessary, you can use the following idiom instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mypack&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// not directly exported
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TopLevelExports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mypack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The deprecation warning can be silenced in the 0.6.x series with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:suppressExportDeprecations&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;support-for-ecmascript-modules&quot;&gt;Support for ECMAScript modules&lt;/h2&gt;

&lt;p&gt;Scala.js can now emit a project as an ECMAScript module, in addition to a script or a CommonJS module.
This can be enabled with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSLinkerConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withModuleKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ModuleKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ESModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that case, &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel&lt;/code&gt; will straightforwardly map to ECMAScript &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; statements:&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-6&quot;&gt;&lt;h6 class=&quot;code-block-header&quot;&gt;Scala.js&lt;/h6&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;col-md-6&quot;&gt;&lt;h6 class=&quot;code-block-header&quot;&gt;ECMAScript&lt;/h6&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-6&quot;&gt;&lt;h6 class=&quot;code-block-header&quot;&gt;Scala.js&lt;/h6&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mod.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;col-md-6&quot;&gt;&lt;h6 class=&quot;code-block-header&quot;&gt;ECMAScript&lt;/h6&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mod.js&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-6&quot;&gt;&lt;h6 class=&quot;code-block-header&quot;&gt;Scala.js&lt;/h6&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mod.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;col-md-6&quot;&gt;&lt;h6 class=&quot;code-block-header&quot;&gt;ECMAScript&lt;/h6&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mod.js&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-6&quot;&gt;&lt;h6 class=&quot;code-block-header&quot;&gt;Scala.js&lt;/h6&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mod.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;col-md-6&quot;&gt;&lt;h6 class=&quot;code-block-header&quot;&gt;ECMAScript&lt;/h6&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mod.js&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To run and test such a project, Node.js v10.2.0 or later is required.
We recommend v10.12.0 or later, as it is the version that we continuously test.
In addition, you will need a few additional settings:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;jsEnv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NodeJSEnv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NODEJSEnv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--experimental-modules&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;artifactPath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastOptJS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crossTarget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;myproject.mjs&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;artifactPath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastOptJS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crossTarget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;myproject-test.mjs&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first setting is required to enable the support of ES modules in Node.js.
The other two make sure that the JavaScript produced have the extension &lt;code class=&quot;highlighter-rouge&quot;&gt;.mjs&lt;/code&gt;, which is required for Node.js to interpret them as ES modules.&lt;/p&gt;

&lt;p&gt;The support for running and testing ES modules with Node.js is &lt;em&gt;experimental&lt;/em&gt;, as the support of ES modules by Node.js is itself experimental.
Things could change in future versions of Node.js and/or Scala.js.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.26:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3445&quot;&gt;#3445&lt;/a&gt; Linking error on &lt;code class=&quot;highlighter-rouge&quot;&gt;Array()&lt;/code&gt; pattern with Scala.js 0.6.25 and Scala 2.13.0-M4&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3280&quot;&gt;#3280&lt;/a&gt; Matcher.groupCount behaviour inconsistent between JS and JVM&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3492&quot;&gt;#3492&lt;/a&gt; Double underscore &lt;code class=&quot;highlighter-rouge&quot;&gt;__&lt;/code&gt; should not be forbidden in top-level exports&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.26+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 1.0.0-M6</title>
   <link href="https://www.scala-js.org/news/2018/10/24/announcing-scalajs-1.0.0-M6/"/>
   <updated>2018-10-24T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2018/10/24/announcing-scalajs-1.0.0-M6</id>
   <content type="html">&lt;p&gt;We are very excited to announce the release of Scala.js 1.0.0-M6!&lt;/p&gt;

&lt;p&gt;This development release is mostly intended for testing purposes, and as a synchronization point with library authors so that they can start upgrading in preparation for the final release.&lt;/p&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.6.x, nor with the previous milestones of the 1.x series.
Libraries need to be recompiled and republished using this milestone to be compatible.&lt;/p&gt;

&lt;p&gt;Moreover, this release is not entirely source compatible with 0.6.x either.
We expect, however, that further milestones for 1.0.0 will stay backward source compatible with this milestone.&lt;/p&gt;

&lt;p&gt;These release notes contain cumulative changes with respect to 0.6.25.
Compared to 1.0.0-M5, the following changes are noteworthy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scala.js has been relicensed under the Apache License 2.0, following the corresponding relicensing of Scala upstream&lt;/li&gt;
  &lt;li&gt;Add support for Scala 2.12.7 and 2.13.0-M5&lt;/li&gt;
  &lt;li&gt;Overall bring up-to-date with improvements and bug fixes available in 0.6.25&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-stubs&lt;/code&gt; artifact has been moved to &lt;a href=&quot;https://github.com/scala-js/scala-js-stubs&quot;&gt;its own repository&lt;/a&gt;, with its own versioning scheme; its latest release is 1.0.0-RC1&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.testinterface.TestUtils&lt;/code&gt; was removed (it was deprecated in 0.6.25); use &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.reflect.Reflect&lt;/code&gt; or &lt;a href=&quot;https://github.com/portable-scala/portable-scala-reflect&quot;&gt;portable-scala-reflect&lt;/a&gt; instead&lt;/li&gt;
  &lt;li&gt;The package name for the &lt;code class=&quot;highlighter-rouge&quot;&gt;TestAdapter&lt;/code&gt; has been renamed from &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.testadapter&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.testing.adapter&lt;/code&gt;, which affects test integrators such as build tools&lt;/li&gt;
  &lt;li&gt;For authors of &lt;code class=&quot;highlighter-rouge&quot;&gt;JSEnv&lt;/code&gt;s: the test kit configuration option &lt;code class=&quot;highlighter-rouge&quot;&gt;withTerminateVMJSCode&lt;/code&gt; was replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;withSupportsExit&lt;/code&gt; &lt;a href=&quot;https://github.com/scala-js/scala-js/pull/3413/commits/6746cf3a20d2497bbc6c520666a47f7ec1cd28dd&quot;&gt;#3413&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We would also like to remind readers of the following important change that happened in 1.0.0-M5:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop compatibility with sbt-crossproject v0.4.x and earlier (v0.5.0 or later is required)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-06x&quot;&gt;Preparations before upgrading from 0.6.x&lt;/h2&gt;

&lt;p&gt;Before upgrading to 1.0.0-M6, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.6.25 or later&lt;/strong&gt;, and address all deprecation warnings.
Since Scala.js 1.0.0-M6 removes support for all the deprecated features in 0.6.x, it is easier to see the deprecation messages guiding you to the proper replacements.&lt;/p&gt;

&lt;p&gt;Additionally to the explicitly deprecated things, make sure to use &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSLinkerConfig&lt;/code&gt; instead of the following sbt settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSSemantics&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSModuleKind&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOutputMode&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;emitSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;relativeSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOptimizerOptions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upgrade-to-100-m6-from-0625-or-later&quot;&gt;Upgrade to 1.0.0-M6 from 0.6.25 or later&lt;/h2&gt;

&lt;p&gt;As a first approximation, all you need to do is to update the version number in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In addition, if you use some of the components that have been moved to separate repositories, you will need to add some more dependencies in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.portable-scala&quot; % &quot;sbt-scalajs-crossproject&quot; % &quot;0.5.0&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-stubs&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Change its version number to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1.0.0-RC1&quot;&lt;/code&gt; (irrespective of the version of Scala.js itself, and hence of the &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSVersion&lt;/code&gt; constant)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; (or rely on the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; of your transitive dependencies):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-jsdependencies&quot; % &quot;1.0.0-M6&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;.enablePlugins(JSDependenciesPlugin)&lt;/code&gt; to Scala.js &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsConfigure(_.enablePlugins(JSDependenciesPlugin))&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the Node.js with jsdom environment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;libraryDependencies += &quot;org.scala-js&quot; %% &quot;scalajs-env-nodejs&quot; % &quot;1.0.0-M6&quot;&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the PhantomJS environment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-scalajs-env-phantomjs&quot; % &quot;1.0.0-M6&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, if your build has&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you will need to remove it (Scala.js 1.x always behaves as if &lt;code class=&quot;highlighter-rouge&quot;&gt;sjsDefinedByDefault&lt;/code&gt; were present).&lt;/p&gt;

&lt;p&gt;This should get your build up to speed to Scala.js 1.0.0-M6.
From there, you should be able to test whether things go smoothly, or whether you are affected by the breaking changes detailed below.&lt;/p&gt;

&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;

&lt;p&gt;This section discusses the backward incompatible changes, which might affect your project.&lt;/p&gt;

&lt;h3 id=&quot;scala-210x-is-not-supported-anymore-nor-building-on-jdk-6-and-7&quot;&gt;Scala 2.10.x is not supported anymore, nor building on JDK 6 and 7&lt;/h3&gt;

&lt;p&gt;The title says it all: you cannot use Scala.js with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.10.x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;anymore.
Note that you can still use the sbt plugin with sbt 0.13.17+, even though it runs itself on 2.10.x.
Only the Scala.js code itself (not the build) cannot use Scala 2.10.x.&lt;/p&gt;

&lt;p&gt;In addition, building Scala.js code on top of JDK 6 or 7 is not supported anymore either.&lt;/p&gt;

&lt;p&gt;Finally, a severe regression in Scala 2.12.0 upstream, affecting &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt;, forced us to drop support for Scala 2.12.0 (see &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3024&quot;&gt;#3024&lt;/a&gt;).
Scala 2.12.1+ is supported.&lt;/p&gt;

&lt;h3 id=&quot;access-to-the-global-scope-instead-of-the-global-object&quot;&gt;Access to the global scope instead of the global object&lt;/h3&gt;

&lt;p&gt;This is the only major breaking change at the language level.
In Scala.js 1.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dynamic.global&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobalScope&lt;/code&gt; objects refer to the global &lt;em&gt;scope&lt;/em&gt; of JavaScript, rather than the global &lt;em&gt;object&lt;/em&gt;.
Concretely, this has three consequences, which we outline below.
Further information can be found in &lt;a href=&quot;/doc/interoperability/global-scope.html&quot;&gt;the documentation about the global scope in Scala.js&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;members-can-only-be-accessed-with-a-statically-known-name-which-is-a-valid-javascript-identifier&quot;&gt;Members can only be accessed with a statically known name which is a valid JavaScript identifier&lt;/h4&gt;

&lt;p&gt;For example, the following is valid:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;but the following variant, where the name &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; is only known at run-time, is not valid anymore:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Math&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectDynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mathName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The latter will cause a compile error.
This is because it is not possible to perform dynamic lookups in the global scope.
Similarly, accessing a member whose name is statically known but not a valid JavaScript identifier is also prohibited:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;`not-a-valid-JS-identifier`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;global-scope-objects-cannot-be-stored-in-a-separate-val&quot;&gt;Global scope objects cannot be stored in a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;For example, the following is invalid and will cause a compile error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as well as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This follows from the previous rule.
If the above two snippets were allowed, we could not check that we only access members with statically known names.&lt;/p&gt;

&lt;p&gt;The first snippet can be advantageously replaced by a renaming import:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.Dynamic.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;accessing-a-member-that-is-not-declared-causes-a-referenceerror-to-be-thrown&quot;&gt;Accessing a member that is not declared causes a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt; to be thrown&lt;/h4&gt;

&lt;p&gt;This is a &lt;em&gt;run-time&lt;/em&gt; behavior change, and in our experience the larger source of breakages in actual code.&lt;/p&gt;

&lt;p&gt;Previously, reading a non-existent member of the global object, such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalVarThatDoesNotExist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would evaluate to &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.
In Scala.js 1.x, this throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt;.
Similarly, writing to a non-existent member, such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalVarThatDoesNotExist&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would previously &lt;em&gt;create&lt;/em&gt; said global variable.
In Scala.js 1.x, it also throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A typical use case of the previous behavior was to &lt;em&gt;test&lt;/em&gt; whether a global variable was defined or not, e.g.,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUndefined&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Promises are not supported
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Promises are supported
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This idiom is broken in Scala.js 1.x, and needs to be replaced by an explicit use of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.typeOf&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;js.typeOf&lt;/code&gt; “method” is magical when its argument is a member of a global scope object.&lt;/p&gt;

&lt;h3 id=&quot;jsundefora-is-now-an-alias-for-a--unit&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[A]&lt;/code&gt; is now an alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;A | Unit&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Instead of defining &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[+A]&lt;/code&gt; as its own type, it is now a simple type alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;A | Unit&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UndefOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;+A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt;-like API is of course preserved.&lt;/p&gt;

&lt;p&gt;We do not expect this to cause any significant issue, but it may impact type inference in subtle ways that can cause compile errors for previously valid code.
You may have to adjust some uses of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt; due to these changes.&lt;/p&gt;

&lt;h3 id=&quot;testhtml-replaces-both-testhtmlfastopt-and-testhtmlfullopt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testHtml&lt;/code&gt; replaces both &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The separation of &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt;, which were independent of the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt;, caused significant unfixable issues in 0.6.x.
In Scala.js 1.x, both are replaced by a single task, &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtml&lt;/code&gt;.
It is equivalent to the old &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; if the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;FastOptStage&lt;/code&gt; (the default), and to &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt; if it is &lt;code class=&quot;highlighter-rouge&quot;&gt;FullOptStage&lt;/code&gt;.
This makes it more consistent with other tasks such as &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-sbt-plugin-does-not-set-up-java-system-properties-anymore&quot;&gt;The sbt plugin does not set up Java system properties anymore&lt;/h3&gt;

&lt;p&gt;In 0.6.x, the sbt plugin automatically extracted &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; options in &lt;code class=&quot;highlighter-rouge&quot;&gt;javaOptions&lt;/code&gt;, and transferred them to the Java system properties API inside Scala.js, using a generated .js file.
Scala.js 1.x does not do this automatically anymore, because going forward, there is not bulletproof way to do this automatically for all possible JS environments and module kinds.&lt;/p&gt;

&lt;p&gt;If you rely on this feature, you can reproduce it in your build using &lt;a href=&quot;https://github.com/scala-js/scala-js/blob/641c63d9d98c9a6cf332af95c9ae80de0da34573/project/Build.scala#L68-L93&quot;&gt;these sbt settings&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;scalajs-javalib-ex-was-removed&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-javalib-ex&lt;/code&gt; was removed&lt;/h3&gt;

&lt;p&gt;The artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-javalib-ex&lt;/code&gt; is removed in 1.x.
It only contained a partial implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.ZipInputStream&lt;/code&gt;.
If you were using it, we recommend that you integrate a copy of &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/0.6.x/javalib-ex/src/main/scala/java/util/zip&quot;&gt;its source code from Scala.js 0.6.x&lt;/a&gt; into your project.&lt;/p&gt;

&lt;h3 id=&quot;jsusexast-was-removed&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt; was removed&lt;/h3&gt;

&lt;p&gt;The use cases for &lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt; have been dramatically reduced by non-native JS classes (previously known as Scala.js-defined JS classes).
This API seems virtually unused on the visible Web.
Moreover, it was the only macro in the Scala.js standard library.&lt;/p&gt;

&lt;p&gt;We have therefore removed it from the standard library, and it is not provided anymore.
On demand, we can republish it as a separate library, if you need it.&lt;/p&gt;

&lt;h3 id=&quot;the-tools-api-has-been-split-into-3-artifacts-and-its-packages-reorganized&quot;&gt;The Tools API has been split into 3 artifacts and its packages reorganized&lt;/h3&gt;

&lt;p&gt;This only concerns consumers of the Tools API, i.e., tools that build on top of the Scala.js linker, such as ScalaFiddle.
In Scala.js 0.6.x, all the tools were in one artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-tools&lt;/code&gt;.
This artifact has been split in three in Scala.js 1.x:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-io&lt;/code&gt;: IR-independent virtual IO&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-logging&lt;/code&gt;: tiny logging API&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-linker&lt;/code&gt;: the linker API (and IR-specific virtual IO)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, the packages have been reorganized as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.ir&lt;/code&gt;            -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.ir&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.tools.io&lt;/code&gt;      -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.io&lt;/code&gt; (and some in &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.linker.irio&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.tools.logging&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.logging&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.tools.linker&lt;/code&gt;  -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.linker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need to &lt;em&gt;cross-compile&lt;/em&gt; against the 0.6.x Tools API and the 1.x Linker API, consult &lt;a href=&quot;https://github.com/scala-js/scala-js/pull/3263&quot;&gt;the comments in PR #3263&lt;/a&gt; for a recommended trick.&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;p&gt;There are very few enhancements in Scala.js 1.0.0-M6.
Scala.js 1.0.0 is focused on simplifying Scala.js, not on adding new features.
Nevertheless, here are a few enhancements.&lt;/p&gt;

&lt;h3 id=&quot;scalajs-can-access-require-and-other-magical-global-variables-of-special-js-environments&quot;&gt;Scala.js can access &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; and other magical “global” variables of special JS environments&lt;/h3&gt;

&lt;p&gt;The changes from global &lt;em&gt;object&lt;/em&gt; to global &lt;em&gt;scope&lt;/em&gt; mean that magical “global” variables provided by some JavaScript environments, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; in Node.js, are now visible to Scala.js.
For example, it is possible to dynamically call &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; as follows in Scala.js 1.x:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathToSomeAsset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;assets/logo.png&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someAsset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathToSomeAsset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We still recommend to use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CommonJSModule&lt;/code&gt; for statically known imports.&lt;/p&gt;

&lt;h3 id=&quot;declaring-inner-classes-in-native-js-classes&quot;&gt;Declaring inner classes in native JS classes&lt;/h3&gt;

&lt;p&gt;Some JavaScript APIs define classes inside objects, as in the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OuterClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;allowing use sites to instantiate them as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;innerObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints 42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Scala.js 0.6.x, it is very awkward to define a facade type for &lt;code class=&quot;highlighter-rouge&quot;&gt;OuterClass&lt;/code&gt;, as illustrated &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2398&quot;&gt;in issue #2398&lt;/a&gt;.
Scala.js 1.x now allows to declare them very easily as inner JS classes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSGlobal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;which in turns allows for the following call site:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outerObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outerObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prints&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;nested-non-native-js-classes-expose-sane-constructors-to-javascript&quot;&gt;Nested non-native JS classes expose sane constructors to JavaScript&lt;/h3&gt;

&lt;p&gt;It is now possible to declare non-native JS classes inside outer &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;es or inside &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;s, and use their &lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf&lt;/code&gt; in a meaningful way.
For example, one can define a method that creates a new JavaScript class every time it is invoked:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingFormat&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Dynamic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructorOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Greeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assuming there is some native JavaScript function like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jane&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;one could call it from Scala.js as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;englishGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, %s!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;englishGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frenchGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bonjour, %s!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frenchGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;japaneseGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sさん、こんにちは。&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;japaneseGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;resulting in the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello, Jane!
Hello, John!
Bonjour, Jane!
Bonjour, John!
Janeさん、こんにちは。
Johnさん、こんにちは。&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Scala.js 0.6.x, the above code would compile but produce incoherent results at run-time, because &lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf&lt;/code&gt; was meaningless for nested classes.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.6.25:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2800&quot;&gt;#2800&lt;/a&gt; Global &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;es cannot be accessed by Scala.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2382&quot;&gt;#2382&lt;/a&gt; Name clash for &lt;code class=&quot;highlighter-rouge&quot;&gt;$outer&lt;/code&gt; pointers of two different nesting levels (fixed for Scala 2.10 and 2.11; 2.12 did not suffer from the bug in 0.6.x)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3085&quot;&gt;#3085&lt;/a&gt; Linking error after the optimizer for &lt;code class=&quot;highlighter-rouge&quot;&gt;someInt.toDouble.compareTo(double)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the full list of issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M1+is%3Aclosed&quot;&gt;fixed in 1.0.0-M1&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M2+is%3Aclosed&quot;&gt;in 1.0.0-M2&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M3+is%3Aclosed&quot;&gt;in 1.0.0-M3&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M4+is%3Aclosed&quot;&gt;in 1.0.0-M4&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M5+is%3Aclosed&quot;&gt;in 1.0.0-M5&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M6+is%3Aclosed&quot;&gt;in 1.0.0-M6&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;cross-building-for-scalajs-06x-and-1x&quot;&gt;Cross-building for Scala.js 0.6.x and 1.x&lt;/h2&gt;

&lt;p&gt;If you want to cross-compile your libraries for Scala.js 0.6.x and 1.x (which you definitely should), here are a couple tips.&lt;/p&gt;

&lt;h3 id=&quot;dynamically-load-a-custom-version-of-scalajs&quot;&gt;Dynamically load a custom version of Scala.js&lt;/h3&gt;

&lt;p&gt;Since the version of Scala.js is not decided by an sbt setting in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;, but by the version of the sbt plugin in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;, standard cross-building setups based on &lt;code class=&quot;highlighter-rouge&quot;&gt;++&lt;/code&gt; cannot be applied.
We recommend that you load the version of Scala.js from an environment variable.
For example, you can do this in your &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SCALAJS_VERSION&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.24&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can then launch&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ SCALAJS_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.0.0-M6 sbt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;from your command line to start up your build with Scala.js 1.0.0-M6.&lt;/p&gt;

&lt;h3 id=&quot;extra-dependencies-for-js-environments&quot;&gt;Extra dependencies for JS environments&lt;/h3&gt;

&lt;p&gt;You can further build on the above &lt;code class=&quot;highlighter-rouge&quot;&gt;val scalaJSVersion&lt;/code&gt; to dynamically add dependencies on &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-phantomjs&lt;/code&gt; and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-jsdom-nodejs&lt;/code&gt; if you use them:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For Node.js with jsdom
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scalajs-env-jsdom-nodejs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// For PhantomJS
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs-env-phantomjs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In both cases, you can then use the source-compatible API in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; to select your JS environment of choice.&lt;/p&gt;

&lt;h3 id=&quot;extra-dependencies-for-jsdependencies&quot;&gt;Extra dependencies for &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Similarly, you can conditionally depend on &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For jsDependencies
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-jsdependencies&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that case, you should unconditionally keep the&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;enablePlugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSDependenciesPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;on the relevant projects.
Scala.js 0.6.20 and later define a no-op &lt;code class=&quot;highlighter-rouge&quot;&gt;JSDependenciesPlugin&lt;/code&gt; to allow for this scenario.&lt;/p&gt;

&lt;h3 id=&quot;conditional-application-of--pscalajssjsdefinedbydefault&quot;&gt;Conditional application of &lt;code class=&quot;highlighter-rouge&quot;&gt;-P:scalajs:sjsDefinedByDefault&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In Scala.js 1.x, the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-P:scalajs:sjsDefinedByDefault&lt;/code&gt; has been removed.
However, if you have non-native JS types in your codebase, you need this flag in Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Add the following setting to your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; to conditionally enable that flag:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;sbt-scalajs-crossproject-and-scalajs-06x&quot;&gt;sbt-scalajs-crossproject and Scala.js 0.6.x&lt;/h3&gt;

&lt;p&gt;If you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt; in your build, you need the &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-scalajs-crossproject&lt;/code&gt; sbt plugin in Scala.js 1.x.
You can also use that sbt plugin in Scala.js 0.6.x, but out-of-the-box there is a small conflict.
You can resolve this conflict using the shadowing import described in &lt;a href=&quot;https://github.com/scala-native/sbt-crossproject#cross-compiling-scalajs-jvm-and-native&quot;&gt;sbt-crossproject’s readme&lt;/a&gt;, adding the following line in your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// shadow sbt-scalajs' crossProject and CrossType from Scala.js 0.6.x (no-op with Scala.js 1.x)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sbtcrossproject.CrossPlugin.autoImport.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crossProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CrossType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.25</title>
   <link href="https://www.scala-js.org/news/2018/09/03/announcing-scalajs-0.6.25/"/>
   <updated>2018-09-03T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2018/09/03/announcing-scalajs-0.6.25</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.25!&lt;/p&gt;

&lt;p&gt;This release brings support for Scala 2.13.0-M5, as well as jsdom v12.x.
It also fixes a number of issues.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;.scala&lt;/code&gt; build files in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/&lt;/code&gt; and are upgrading from Scala.js 0.6.22 or earlier, do read &lt;a href=&quot;/news/2018/05/22/announcing-scalajs-0.6.23/&quot;&gt;the release notes of 0.6.23&lt;/a&gt;, which contain a source breaking change in that situation.&lt;/p&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.14 or earlier, make sure to read &lt;a href=&quot;/news/2017/03/21/announcing-scalajs-0.6.15/&quot;&gt;the release notes of 0.6.15&lt;/a&gt;, which contain important migration information.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.25 is backward binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.25 without change.
0.6.25 is also forward binary compatible with 0.6.{17-24}, but not with earlier releases: libraries compiled with 0.6.25 cannot be used by projects using 0.6.{0-16}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.25:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3426&quot;&gt;#3426&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3422&quot;&gt;#3422&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;lazy val&lt;/code&gt;s within non-native JS classes are now supported
    &lt;ul&gt;
      &lt;li&gt;Caveat: &lt;code class=&quot;highlighter-rouge&quot;&gt;override lazy val&lt;/code&gt;s do not behave correctly when they override another &lt;code class=&quot;highlighter-rouge&quot;&gt;lazy val&lt;/code&gt;.
This issue is not fixable in 0.6.x for binary compatibility reasons, but will be fixed in Scala.js 1.x.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3433&quot;&gt;#3433&lt;/a&gt; UTF-8 &lt;code class=&quot;highlighter-rouge&quot;&gt;CharsetDecoder&lt;/code&gt; doesn’t handle incomplete character ranges correctly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3417&quot;&gt;#3417&lt;/a&gt; Crash in &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; resolution on Windows due to some path issue&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3415&quot;&gt;#3415&lt;/a&gt; Optimizer stack-overflows, inlining a method within a closure inside that method&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3408&quot;&gt;#3408&lt;/a&gt; Sporadic test failures in &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.testcommon.RPCCore&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3401&quot;&gt;#3401&lt;/a&gt; Groups are broken for regexes with in-line flags since 0.6.21&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.25+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 1.0.0-M5</title>
   <link href="https://www.scala-js.org/news/2018/08/13/announcing-scalajs-1.0.0-M5/"/>
   <updated>2018-08-13T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2018/08/13/announcing-scalajs-1.0.0-M5</id>
   <content type="html">&lt;p&gt;We are very excited to announce the release of Scala.js 1.0.0-M5! (there is no 1.0.0-M4)&lt;/p&gt;

&lt;p&gt;This development release is mostly intended for testing purposes, and as a synchronization point with library authors so that they can start upgrading in preparation for the final release.&lt;/p&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.6.x, nor with the previous milestones of the 1.x series.
Libraries need to be recompiled and republished using this milestone to be compatible.&lt;/p&gt;

&lt;p&gt;Moreover, this release is not entirely source compatible with 0.6.x either.
We expect, however, that further milestones for 1.0.0 will stay backward source compatible with this milestone.&lt;/p&gt;

&lt;p&gt;These release notes contain cumulative changes with respect to 0.6.24.
Compared to 1.0.0-M3, the following changes are noteworthy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add support for Scala 2.13.0-M4 and its new collections&lt;/li&gt;
  &lt;li&gt;Overall bring up-to-date with improvements and bug fixes available in 0.6.24&lt;/li&gt;
  &lt;li&gt;Drop compatibility with sbt-crossproject v0.4.x and earlier (v0.5.0 or later is required)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Throwable&lt;/code&gt; now properly extends JavaScript’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt; class (providing better stack traces in ECMAScript 2015 mode)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3295&quot;&gt;#3295&lt;/a&gt; The sbt plugin does not automatically set up Java system properties from &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; flags in &lt;code class=&quot;highlighter-rouge&quot;&gt;javaOptions&lt;/code&gt; anymore&lt;/li&gt;
  &lt;li&gt;Overhaul of the linker API and the JS env API&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-06x&quot;&gt;Preparations before upgrading from 0.6.x&lt;/h2&gt;

&lt;p&gt;Before upgrading to 1.0.0-M5, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.6.23 or later&lt;/strong&gt;, and address all deprecation warnings.
Since Scala.js 1.0.0-M5 removes support for all the deprecated features in 0.6.x, it is easier to see the deprecation messages guiding you to the proper replacements.&lt;/p&gt;

&lt;p&gt;Additionally to the explicitly deprecated things, make sure to use &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSLinkerConfig&lt;/code&gt; instead of the following sbt settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSSemantics&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSModuleKind&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOutputMode&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;emitSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;relativeSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOptimizerOptions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upgrade-to-100-m5-from-0623-or-later&quot;&gt;Upgrade to 1.0.0-M5 from 0.6.23 or later&lt;/h2&gt;

&lt;p&gt;As a first approximation, all you need to do is to update the version number in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In addition, if you use some of the components that have been moved to separate repositories, you will need to add some more dependencies in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.portable-scala&quot; % &quot;sbt-scalajs-crossproject&quot; % &quot;0.5.0&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; (or rely on the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; of your transitive dependencies):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-jsdependencies&quot; % &quot;1.0.0-M5&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;.enablePlugins(JSDependenciesPlugin)&lt;/code&gt; to Scala.js &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsConfigure(_.enablePlugins(JSDependenciesPlugin))&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the Node.js with jsdom environment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;libraryDependencies += &quot;org.scala-js&quot; %% &quot;scalajs-env-nodejs&quot; % &quot;1.0.0-M5&quot;&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the PhantomJS environment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-scalajs-env-phantomjs&quot; % &quot;1.0.0-M5&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, if your build has&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you will need to remove it (Scala.js 1.x always behaves as if &lt;code class=&quot;highlighter-rouge&quot;&gt;sjsDefinedByDefault&lt;/code&gt; were present).&lt;/p&gt;

&lt;p&gt;This should get your build up to speed to Scala.js 1.0.0-M5.
From there, you should be able to test whether things go smoothly, or whether you are affected by the breaking changes detailed below.&lt;/p&gt;

&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;

&lt;p&gt;This section discusses the backward incompatible changes, which might affect your project.&lt;/p&gt;

&lt;h3 id=&quot;scala-210x-is-not-supported-anymore-nor-building-on-jdk-6-and-7&quot;&gt;Scala 2.10.x is not supported anymore, nor building on JDK 6 and 7&lt;/h3&gt;

&lt;p&gt;The title says it all: you cannot use Scala.js with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.10.x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;anymore.
Note that you can still use the sbt plugin with sbt 0.13.17+, even though it runs itself on 2.10.x.
Only the Scala.js code itself (not the build) cannot use Scala 2.10.x.&lt;/p&gt;

&lt;p&gt;In addition, building Scala.js code on top of JDK 6 or 7 is not supported anymore either.&lt;/p&gt;

&lt;p&gt;Finally, a severe regression in Scala 2.12.0 upstream, affecting &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt;, forced us to drop support for Scala 2.12.0 (see &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3024&quot;&gt;#3024&lt;/a&gt;).
Scala 2.12.1+ is supported.&lt;/p&gt;

&lt;h3 id=&quot;access-to-the-global-scope-instead-of-the-global-object&quot;&gt;Access to the global scope instead of the global object&lt;/h3&gt;

&lt;p&gt;This is the only major breaking change at the language level.
In Scala.js 1.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dynamic.global&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobalScope&lt;/code&gt; objects refer to the global &lt;em&gt;scope&lt;/em&gt; of JavaScript, rather than the global &lt;em&gt;object&lt;/em&gt;.
Concretely, this has three consequences, which we outline below.
Further information can be found in &lt;a href=&quot;/doc/interoperability/global-scope.html&quot;&gt;the documentation about the global scope in Scala.js&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;members-can-only-be-accessed-with-a-statically-known-name-which-is-a-valid-javascript-identifier&quot;&gt;Members can only be accessed with a statically known name which is a valid JavaScript identifier&lt;/h4&gt;

&lt;p&gt;For example, the following is valid:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;but the following variant, where the name &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; is only known at run-time, is not valid anymore:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Math&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectDynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mathName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The latter will cause a compile error.
This is because it is not possible to perform dynamic lookups in the global scope.
Similarly, accessing a member whose name is statically known but not a valid JavaScript identifier is also prohibited:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;`not-a-valid-JS-identifier`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;global-scope-objects-cannot-be-stored-in-a-separate-val&quot;&gt;Global scope objects cannot be stored in a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;For example, the following is invalid and will cause a compile error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as well as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This follows from the previous rule.
If the above two snippets were allowed, we could not check that we only access members with statically known names.&lt;/p&gt;

&lt;p&gt;The first snippet can be advantageously replaced by a renaming import:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.Dynamic.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;accessing-a-member-that-is-not-declared-causes-a-referenceerror-to-be-thrown&quot;&gt;Accessing a member that is not declared causes a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt; to be thrown&lt;/h4&gt;

&lt;p&gt;This is a &lt;em&gt;run-time&lt;/em&gt; behavior change, and in our experience the larger source of breakages in actual code.&lt;/p&gt;

&lt;p&gt;Previously, reading a non-existent member of the global object, such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalVarThatDoesNotExist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would evaluate to &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.
In Scala.js 1.x, this throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt;.
Similarly, writing to a non-existent member, such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalVarThatDoesNotExist&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would previously &lt;em&gt;create&lt;/em&gt; said global variable.
In Scala.js 1.x, it also throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A typical use case of the previous behavior was to &lt;em&gt;test&lt;/em&gt; whether a global variable was defined or not, e.g.,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUndefined&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Promises are not supported
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Promises are supported
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This idiom is broken in Scala.js 1.x, and needs to be replaced by an explicit use of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.typeOf&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;js.typeOf&lt;/code&gt; “method” is magical when its argument is a member of a global scope object.&lt;/p&gt;

&lt;h3 id=&quot;jsundefora-is-now-an-alias-for-a--unit&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[A]&lt;/code&gt; is now an alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;A | Unit&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Instead of defining &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[+A]&lt;/code&gt; as its own type, it is now a simple type alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;A | Unit&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UndefOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;+A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt;-like API is of course preserved.&lt;/p&gt;

&lt;p&gt;We do not expect this to cause any significant issue, but it may impact type inference in subtle ways that can cause compile errors for previously valid code.
You may have to adjust some uses of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt; due to these changes.&lt;/p&gt;

&lt;h3 id=&quot;testhtml-replaces-both-testhtmlfastopt-and-testhtmlfullopt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testHtml&lt;/code&gt; replaces both &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The separation of &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt;, which were independent of the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt;, caused significant unfixable issues in 0.6.x.
In Scala.js 1.x, both are replaced by a single task, &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtml&lt;/code&gt;.
It is equivalent to the old &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; if the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;FastOptStage&lt;/code&gt; (the default), and to &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt; if it is &lt;code class=&quot;highlighter-rouge&quot;&gt;FullOptStage&lt;/code&gt;.
This makes it more consistent with other tasks such as &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-sbt-plugin-does-not-set-up-java-system-properties-anymore&quot;&gt;The sbt plugin does not set up Java system properties anymore&lt;/h3&gt;

&lt;p&gt;In 0.6.x, the sbt plugin automatically extracted &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; options in &lt;code class=&quot;highlighter-rouge&quot;&gt;javaOptions&lt;/code&gt;, and transferred them to the Java system properties API inside Scala.js, using a generated .js file.
Scala.js 1.x does not do this automatically anymore, because going forward, there is not bulletproof way to do this automatically for all possible JS environments and module kinds.&lt;/p&gt;

&lt;p&gt;If you rely on this feature, you can reproduce it in your build using &lt;a href=&quot;https://github.com/scala-js/scala-js/blob/641c63d9d98c9a6cf332af95c9ae80de0da34573/project/Build.scala#L68-L93&quot;&gt;these sbt settings&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;scalajs-javalib-ex-was-removed&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-javalib-ex&lt;/code&gt; was removed&lt;/h3&gt;

&lt;p&gt;The artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-javalib-ex&lt;/code&gt; is removed in 1.x.
It only contained a partial implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.ZipInputStream&lt;/code&gt;.
If you were using it, we recommend that you integrate a copy of &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/0.6.x/javalib-ex/src/main/scala/java/util/zip&quot;&gt;its source code from Scala.js 0.6.x&lt;/a&gt; into your project.&lt;/p&gt;

&lt;h3 id=&quot;jsusexast-was-removed&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt; was removed&lt;/h3&gt;

&lt;p&gt;The use cases for &lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt; have been dramatically reduced by non-native JS classes (previously known as Scala.js-defined JS classes).
This API seems virtually unused on the visible Web.
Moreover, it was the only macro in the Scala.js standard library.&lt;/p&gt;

&lt;p&gt;We have therefore removed it from the standard library, and it is not provided anymore.
On demand, we can republish it as a separate library, if you need it.&lt;/p&gt;

&lt;h3 id=&quot;the-tools-api-has-been-split-into-3-artifacts-and-its-packages-reorganized&quot;&gt;The Tools API has been split into 3 artifacts and its packages reorganized&lt;/h3&gt;

&lt;p&gt;This only concerns consumers of the Tools API, i.e., tools that build on top of the Scala.js linker, such as ScalaFiddle.
In Scala.js 0.6.x, all the tools were in one artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-tools&lt;/code&gt;.
This artifact has been split in three in Scala.js 1.x:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-io&lt;/code&gt;: IR-independent virtual IO&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-logging&lt;/code&gt;: tiny logging API&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-linker&lt;/code&gt;: the linker API (and IR-specific virtual IO)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, the packages have been reorganized as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.ir&lt;/code&gt;            -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.ir&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.tools.io&lt;/code&gt;      -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.io&lt;/code&gt; (and some in &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.linker.irio&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.tools.logging&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.logging&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.tools.linker&lt;/code&gt;  -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.linker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need to &lt;em&gt;cross-compile&lt;/em&gt; against the 0.6.x Tools API and the 1.x Linker API, consult &lt;a href=&quot;https://github.com/scala-js/scala-js/pull/3263&quot;&gt;the comments in PR #3263&lt;/a&gt; for a recommended trick.&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;p&gt;There are very few enhancements in Scala.js 1.0.0-M5.
Scala.js 1.0.0 is focused on simplifying Scala.js, not on adding new features.
Nevertheless, here are a few enhancements.&lt;/p&gt;

&lt;h3 id=&quot;scalajs-can-access-require-and-other-magical-global-variables-of-special-js-environments&quot;&gt;Scala.js can access &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; and other magical “global” variables of special JS environments&lt;/h3&gt;

&lt;p&gt;The changes from global &lt;em&gt;object&lt;/em&gt; to global &lt;em&gt;scope&lt;/em&gt; mean that magical “global” variables provided by some JavaScript environments, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; in Node.js, are now visible to Scala.js.
For example, it is possible to dynamically call &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; as follows in Scala.js 1.x:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathToSomeAsset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;assets/logo.png&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someAsset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathToSomeAsset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We still recommend to use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CommonJSModule&lt;/code&gt; for statically known imports.&lt;/p&gt;

&lt;h3 id=&quot;declaring-inner-classes-in-native-js-classes&quot;&gt;Declaring inner classes in native JS classes&lt;/h3&gt;

&lt;p&gt;Some JavaScript APIs define classes inside objects, as in the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OuterClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;allowing use sites to instantiate them as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;innerObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints 42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Scala.js 0.6.x, it is very awkward to define a facade type for &lt;code class=&quot;highlighter-rouge&quot;&gt;OuterClass&lt;/code&gt;, as illustrated &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2398&quot;&gt;in issue #2398&lt;/a&gt;.
Scala.js 1.x now allows to declare them very easily as inner JS classes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSGlobal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;which in turns allows for the following call site:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outerObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outerObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prints&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;nested-non-native-js-classes-expose-sane-constructors-to-javascript&quot;&gt;Nested non-native JS classes expose sane constructors to JavaScript&lt;/h3&gt;

&lt;p&gt;It is now possible to declare non-native JS classes inside outer &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;es or inside &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;s, and use their &lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf&lt;/code&gt; in a meaningful way.
For example, one can define a method that creates a new JavaScript class every time it is invoked:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingFormat&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Dynamic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructorOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Greeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assuming there is some native JavaScript function like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jane&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;one could call it from Scala.js as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;englishGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, %s!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;englishGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frenchGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bonjour, %s!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frenchGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;japaneseGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sさん、こんにちは。&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;japaneseGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;resulting in the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello, Jane!
Hello, John!
Bonjour, Jane!
Bonjour, John!
Janeさん、こんにちは。
Johnさん、こんにちは。&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Scala.js 0.6.x, the above code would compile but produce incoherent results at run-time, because &lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf&lt;/code&gt; was meaningless for nested classes.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.6.24:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2800&quot;&gt;#2800&lt;/a&gt; Global &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;es cannot be accessed by Scala.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2382&quot;&gt;#2382&lt;/a&gt; Name clash for &lt;code class=&quot;highlighter-rouge&quot;&gt;$outer&lt;/code&gt; pointers of two different nesting levels (fixed for Scala 2.10 and 2.11; 2.12 did not suffer from the bug in 0.6.x)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3085&quot;&gt;#3085&lt;/a&gt; Linking error after the optimizer for &lt;code class=&quot;highlighter-rouge&quot;&gt;someInt.toDouble.compareTo(double)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the full list of issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M1+is%3Aclosed&quot;&gt;fixed in 1.0.0-M1&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M2+is%3Aclosed&quot;&gt;in 1.0.0-M2&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M3+is%3Aclosed&quot;&gt;in 1.0.0-M3&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M4+is%3Aclosed&quot;&gt;in 1.0.0-M4&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M5+is%3Aclosed&quot;&gt;in 1.0.0-M5&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;cross-building-for-scalajs-06x-and-1x&quot;&gt;Cross-building for Scala.js 0.6.x and 1.x&lt;/h2&gt;

&lt;p&gt;If you want to cross-compile your libraries for Scala.js 0.6.x and 1.x (which you definitely should), here are a couple tips.&lt;/p&gt;

&lt;h3 id=&quot;dynamically-load-a-custom-version-of-scalajs&quot;&gt;Dynamically load a custom version of Scala.js&lt;/h3&gt;

&lt;p&gt;Since the version of Scala.js is not decided by an sbt setting in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;, but by the version of the sbt plugin in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;, standard cross-building setups based on &lt;code class=&quot;highlighter-rouge&quot;&gt;++&lt;/code&gt; cannot be applied.
We recommend that you load the version of Scala.js from an environment variable.
For example, you can do this in your &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SCALAJS_VERSION&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.24&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can then launch&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ SCALAJS_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.0.0-M5 sbt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;from your command line to start up your build with Scala.js 1.0.0-M5.&lt;/p&gt;

&lt;h3 id=&quot;extra-dependencies-for-js-environments&quot;&gt;Extra dependencies for JS environments&lt;/h3&gt;

&lt;p&gt;You can further build on the above &lt;code class=&quot;highlighter-rouge&quot;&gt;val scalaJSVersion&lt;/code&gt; to dynamically add dependencies on &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-phantomjs&lt;/code&gt; and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-jsdom-nodejs&lt;/code&gt; if you use them:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For Node.js with jsdom
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scalajs-env-jsdom-nodejs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// For PhantomJS
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs-env-phantomjs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In both cases, you can then use the source-compatible API in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; to select your JS environment of choice.&lt;/p&gt;

&lt;h3 id=&quot;extra-dependencies-for-jsdependencies&quot;&gt;Extra dependencies for &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Similarly, you can conditionally depend on &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For jsDependencies
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-jsdependencies&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that case, you should unconditionally keep the&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;enablePlugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSDependenciesPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;on the relevant projects.
Scala.js 0.6.20 and later define a no-op &lt;code class=&quot;highlighter-rouge&quot;&gt;JSDependenciesPlugin&lt;/code&gt; to allow for this scenario.&lt;/p&gt;

&lt;h3 id=&quot;conditional-application-of--pscalajssjsdefinedbydefault&quot;&gt;Conditional application of &lt;code class=&quot;highlighter-rouge&quot;&gt;-P:scalajs:sjsDefinedByDefault&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In Scala.js 1.x, the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-P:scalajs:sjsDefinedByDefault&lt;/code&gt; has been removed.
However, if you have non-native JS types in your codebase, you need this flag in Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Add the following setting to your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; to conditionally enable that flag:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;sbt-scalajs-crossproject-and-scalajs-06x&quot;&gt;sbt-scalajs-crossproject and Scala.js 0.6.x&lt;/h3&gt;

&lt;p&gt;If you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt; in your build, you need the &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-scalajs-crossproject&lt;/code&gt; sbt plugin in Scala.js 1.x.
You can also use that sbt plugin in Scala.js 0.6.x, but out-of-the-box there is a small conflict.
You can resolve this conflict using the shadowing import described in &lt;a href=&quot;https://github.com/scala-native/sbt-crossproject#cross-compiling-scalajs-jvm-and-native&quot;&gt;sbt-crossproject’s readme&lt;/a&gt;, adding the following line in your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// shadow sbt-scalajs' crossProject and CrossType from Scala.js 0.6.x (no-op with Scala.js 1.x)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sbtcrossproject.CrossPlugin.autoImport.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crossProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CrossType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.24</title>
   <link href="https://www.scala-js.org/news/2018/06/29/announcing-scalajs-0.6.24/"/>
   <updated>2018-06-29T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2018/06/29/announcing-scalajs-0.6.24</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.24!&lt;/p&gt;

&lt;p&gt;This release contains a number of fixes for small bugs that have been lingering in our issue tracker for ages.
The version of the Scala standard library for 2.12 has also been upgraded to 2.12.6.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;.scala&lt;/code&gt; build files in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/&lt;/code&gt; and are upgrading from Scala.js 0.6.22 or earlier, do read &lt;a href=&quot;/news/2018/05/22/announcing-scalajs-0.6.23/&quot;&gt;the release notes of 0.6.23&lt;/a&gt;, which contain a source breaking change in that situation.&lt;/p&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.14 or earlier, make sure to read &lt;a href=&quot;/news/2017/03/21/announcing-scalajs-0.6.15/&quot;&gt;the release notes of 0.6.15&lt;/a&gt;, which contain important migration information.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.24 is backward binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.24 without change.
0.6.24 is also forward binary compatible with 0.6.{17-23}, but not with earlier releases: libraries compiled with 0.6.24 cannot be used by projects using 0.6.{0-16}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;changes-with-compatibility-concerns&quot;&gt;Changes with compatibility concerns&lt;/h2&gt;

&lt;p&gt;Following a breaking dependency change on Rhino in recent versions of sbt-web and sbt-js-engine which &lt;a href=&quot;https://github.com/sbt/sbt-less/issues/95&quot;&gt;caused some issues when combined with Scala.js&lt;/a&gt;, we have upgraded our own dependency on Rhino to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.mozilla&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rhino&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.7.6&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Although we do not foresee any issue in practice, there exists a possibility that this will break your build if another sbt plugin relies on apigee’s fork of Rhino.
If this causes an issue for you, you can fall back on the old dependency by adding the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;excludeDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.mozilla&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rhino&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;io.apigee&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rhino&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.7R5pre4&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.24:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3393&quot;&gt;#3393&lt;/a&gt; When a JSEnv fails on startup (e.g., due to a lack of &lt;code class=&quot;highlighter-rouge&quot;&gt;jsdom&lt;/code&gt;), sbt reports success&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1619&quot;&gt;#1619&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;String.format&lt;/code&gt; does not support thousands grouping&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2935&quot;&gt;#2935&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer.parseInt&lt;/code&gt; and similar don’t support non-ASCII scripts&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3348&quot;&gt;#3348&lt;/a&gt; Doubles in hex notation fail to parse&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3368&quot;&gt;#3368&lt;/a&gt; Scala.js’ JUnit emits weird comparison for strings that fail &lt;code class=&quot;highlighter-rouge&quot;&gt;assertEquals&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.24+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.23</title>
   <link href="https://www.scala-js.org/news/2018/05/22/announcing-scalajs-0.6.23/"/>
   <updated>2018-05-22T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2018/05/22/announcing-scalajs-0.6.23</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.23!&lt;/p&gt;

&lt;p&gt;This release is almost exclusively a bug-fix release.
It also adds support for Scala 2.13.0-M4 and its new collections, thanks to the hard work of &lt;a href=&quot;https://github.com/julienrf&quot;&gt;&lt;strong&gt;@julienrf&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.14 or earlier, make sure to read &lt;a href=&quot;/news/2017/03/21/announcing-scalajs-0.6.15/&quot;&gt;the release notes of 0.6.15&lt;/a&gt;, which contain important migration information.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.23 is backward binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.23 without change.
0.6.23 is also forward binary compatible with 0.6.{17-22}, but not with earlier releases: libraries compiled with 0.6.23 cannot be used by projects using 0.6.{0-16}.&lt;/p&gt;

&lt;p&gt;There is one source breaking change if you use &lt;code class=&quot;highlighter-rouge&quot;&gt;.scala&lt;/code&gt; files for your sbt build.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;

&lt;p&gt;Usages of &lt;code class=&quot;highlighter-rouge&quot;&gt;%%%&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;.scala&lt;/code&gt; files of an sbt build (under &lt;code class=&quot;highlighter-rouge&quot;&gt;project/&lt;/code&gt;) need a new import:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.portablescala.sbtplatformdeps.PlatformDepsPlugin.autoImport._&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;.sbt&lt;/code&gt; files, this import is automatically added, so nothing changes.&lt;/p&gt;

&lt;h2 id=&quot;deprecations&quot;&gt;Deprecations&lt;/h2&gt;

&lt;h3 id=&quot;built-in-crossproject&quot;&gt;Built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt; feature has been deprecated.
You should use &lt;a href=&quot;https://github.com/portable-scala/sbt-crossproject&quot;&gt;sbt-crossproject&lt;/a&gt; instead.
Please follow &lt;a href=&quot;https://github.com/portable-scala/sbt-crossproject#migration-from-scalajs-default-crossproject&quot;&gt;the migration instructions&lt;/a&gt; in its readme.&lt;/p&gt;

&lt;h3 id=&quot;withoutputmode&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;withOutputMode&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The notion of &lt;code class=&quot;highlighter-rouge&quot;&gt;OutputMode&lt;/code&gt; has been replaced by that of &lt;code class=&quot;highlighter-rouge&quot;&gt;ESFeatures&lt;/code&gt;.
Instead of&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.scalajs.core.tools.linker.backend.OutputMode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scalaJSOutputMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OutputMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ECMAScript2015&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.scalajs.core.tools.linker.standard._&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scalaJSLinkerConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withOutputMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OutputMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ECMAScript2015&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you should now use&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// no import needed
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSLinkerConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withESFeatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withUseECMAScript2015&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;jdk-apis&quot;&gt;JDK APIs&lt;/h3&gt;

&lt;p&gt;The following JDK API methods have been added:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Character.isSurrogate()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.23:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3227&quot;&gt;#3227&lt;/a&gt; Linking error for an &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableReflectiveInstantiation&lt;/code&gt; class inside a lambda in Scala 2.11 and 2.10&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3267&quot;&gt;#3267&lt;/a&gt; Linking error with &lt;code class=&quot;highlighter-rouge&quot;&gt;@tailrec&lt;/code&gt; method inside a trait with a self-type, on Scala 2.12+&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3285&quot;&gt;#3285&lt;/a&gt; Run-time error in Scala.js-defined classes with multiple parameter lists and default args&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.23+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 1.0.0-M3</title>
   <link href="https://www.scala-js.org/news/2018/02/01/announcing-scalajs-1.0.0-M3/"/>
   <updated>2018-02-01T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2018/02/01/announcing-scalajs-1.0.0-M3</id>
   <content type="html">&lt;p&gt;We are very excited to announce the release of Scala.js 1.0.0-M3!&lt;/p&gt;

&lt;p&gt;This development release is mostly intended for testing purposes, and as a synchronization point with library authors so that they can start upgrading in preparation for the final release.&lt;/p&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.6.x, nor with the previous milestones of the 1.x series.
Libraries need to be recompiled and republished using this milestone to be compatible.&lt;/p&gt;

&lt;p&gt;Moreover, this release is not entirely source compatible with 0.6.x either.
We expect, however, that further milestones for 1.0.0 will stay backward source compatible with this milestone.&lt;/p&gt;

&lt;p&gt;These release notes contain cumulative changes with respect to 0.6.22.
Compared to 1.0.0-M2, the following changes are noteworthy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scala 2.10.x is not supported anymore, nor building on JDK 6 and 7.&lt;/li&gt;
  &lt;li&gt;The Tools API has been split in 3 separate artifacts.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-06x&quot;&gt;Preparations before upgrading from 0.6.x&lt;/h2&gt;

&lt;p&gt;Before upgrading to 1.0.0-M3, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.6.20 or later&lt;/strong&gt;, and address all deprecation warnings.
Since Scala.js 1.0.0-M3 removes support for all the deprecated features in 0.6.x, it is easier to see the deprecation messages guiding you to the proper replacements.&lt;/p&gt;

&lt;p&gt;Additionally to the explicitly deprecated things, make sure to use &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSLinkerConfig&lt;/code&gt; instead of the following sbt settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSSemantics&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSModuleKind&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOutputMode&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;emitSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;relativeSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOptimizerOptions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upgrade-to-100-m3-from-0620-or-later&quot;&gt;Upgrade to 1.0.0-M3 from 0.6.20 or later&lt;/h2&gt;

&lt;p&gt;As a first approximation, all you need to do is to update the version number in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In addition, if you use some of the components that have been moved to separate repositories, you will need to add some more dependencies in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.portable-scala&quot; % &quot;sbt-scalajs-crossproject&quot; % &quot;0.3.1&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; (or rely on the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; of your transitive dependencies):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-jsdependencies&quot; % &quot;1.0.0-M3&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;.enablePlugins(JSDependenciesPlugin)&lt;/code&gt; to Scala.js &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsConfigure(_.enablePlugins(JSDependenciesPlugin))&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the Node.js with jsdom environment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;libraryDependencies += &quot;org.scala-js&quot; %% &quot;scalajs-env-nodejs&quot; % &quot;1.0.0-M3&quot;&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the PhantomJS environment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-scalajs-env-phantomjs&quot; % &quot;1.0.0-M3&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, if your build has&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you will need to remove it (Scala.js 1.x always behaves as if &lt;code class=&quot;highlighter-rouge&quot;&gt;sjsDefinedByDefault&lt;/code&gt; were present).&lt;/p&gt;

&lt;p&gt;This should get your build up to speed to Scala.js 1.0.0-M3.
From there, you should be able to test whether things go smoothly, or whether you are affected by the breaking changes detailed below.&lt;/p&gt;

&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;

&lt;p&gt;This section discusses the backward incompatible changes, which might affect your project.&lt;/p&gt;

&lt;h3 id=&quot;scala-210x-is-not-supported-anymore-nor-building-on-jdk-6-and-7&quot;&gt;Scala 2.10.x is not supported anymore, nor building on JDK 6 and 7&lt;/h3&gt;

&lt;p&gt;The title says it all: you cannot use Scala.js with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.10.x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;anymore.
Note that you can still use the sbt plugin with sbt 0.13.16+, even though it runs itself on 2.10.x.
Only the Scala.js code itself (not the build) cannot use Scala 2.10.x.&lt;/p&gt;

&lt;p&gt;In addition, building Scala.js code on top of JDK 6 or 7 is not supported anymore either.&lt;/p&gt;

&lt;p&gt;Finally, a severe regression in Scala 2.12.0 upstream, affecting &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt;, forced us to drop support for Scala 2.12.0 (see &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3024&quot;&gt;#3024&lt;/a&gt;).
Scala 2.12.1+ is supported.&lt;/p&gt;

&lt;h3 id=&quot;access-to-the-global-scope-instead-of-the-global-object&quot;&gt;Access to the global scope instead of the global object&lt;/h3&gt;

&lt;p&gt;This is the only major breaking change at the language level.
In Scala.js 1.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dynamic.global&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobalScope&lt;/code&gt; objects refer to the global &lt;em&gt;scope&lt;/em&gt; of JavaScript, rather than the global &lt;em&gt;object&lt;/em&gt;.
Concretely, this has three consequences, which we outline below.
Further information can be found in &lt;a href=&quot;/doc/interoperability/global-scope.html&quot;&gt;the documentation about the global scope in Scala.js&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;members-can-only-be-accessed-with-a-statically-known-name-which-is-a-valid-javascript-identifier&quot;&gt;Members can only be accessed with a statically known name which is a valid JavaScript identifier&lt;/h4&gt;

&lt;p&gt;For example, the following is valid:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;but the following variant, where the name &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; is only known at run-time, is not valid anymore:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Math&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectDynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mathName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The latter will cause a compile error.
This is because it is not possible to perform dynamic lookups in the global scope.
Similarly, accessing a member whose name is statically known but not a valid JavaScript identifier is also prohibited:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;`not-a-valid-JS-identifier`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;global-scope-objects-cannot-be-stored-in-a-separate-val&quot;&gt;Global scope objects cannot be stored in a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;For example, the following is invalid and will cause a compile error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as well as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This follows from the previous rule.
If the above two snippets were allowed, we could not check that we only access members with statically known names.&lt;/p&gt;

&lt;p&gt;The first snippet can be advantageously replaced by a renaming import:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.Dynamic.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;accessing-a-member-that-is-not-declared-causes-a-referenceerror-to-be-thrown&quot;&gt;Accessing a member that is not declared causes a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt; to be thrown&lt;/h4&gt;

&lt;p&gt;This is a &lt;em&gt;run-time&lt;/em&gt; behavior change, and in our experience the larger source of breakages in actual code.&lt;/p&gt;

&lt;p&gt;Previously, reading a non-existent member of the global object, such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalVarThatDoesNotExist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would evaluate to &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.
In Scala.js 1.x, this throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt;.
Similarly, writing to a non-existent member, such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalVarThatDoesNotExist&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would previously &lt;em&gt;create&lt;/em&gt; said global variable.
In Scala.js 1.x, it also throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A typical use case of the previous behavior was to &lt;em&gt;test&lt;/em&gt; whether a global variable was defined or not, e.g.,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUndefined&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Promises are not supported
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Promises are supported
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This idiom is broken in Scala.js 1.x, and needs to be replaced by an explicit use of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.typeOf&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;js.typeOf&lt;/code&gt; “method” is magical when its argument is member of a global scope object.&lt;/p&gt;

&lt;h3 id=&quot;jsundefora-is-now-an-alias-for-a--unit&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[A]&lt;/code&gt; is now an alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;A | Unit&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Instead of defining &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[+A]&lt;/code&gt; as its own type, it is now a simple type alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;A | Unit&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UndefOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;+A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt;-like API is of course preserved.&lt;/p&gt;

&lt;p&gt;We do not expect this to cause any significant issue, but it may impact type inference in subtle ways that can cause compile errors for previously valid code.
You may have to adjust some uses of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt; due to these changes, especially if using Scala 2.10.&lt;/p&gt;

&lt;h3 id=&quot;testhtml-replaces-both-testhtmlfastopt-and-testhtmlfullopt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testHtml&lt;/code&gt; replaces both &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The separation of &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt;, which were independent of the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt;, caused significant unfixable issues in 0.6.x.
In Scala.js 1.x, both are replaced by a single task, &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtml&lt;/code&gt;.
It is equivalent to the old &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; if the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;FastOptStage&lt;/code&gt; (the default), and to &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt; if it is &lt;code class=&quot;highlighter-rouge&quot;&gt;FullOptStage&lt;/code&gt;.
This makes it more consistent with other tasks such as &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;scalajs-javalib-ex-was-removed&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-javalib-ex&lt;/code&gt; was removed&lt;/h3&gt;

&lt;p&gt;The artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-javalib-ex&lt;/code&gt; is removed in 1.x.
It only contained a partial implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.ZipInputStream&lt;/code&gt;.
If you were using it, we recommend that you integrate a copy of &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/0.6.x/javalib-ex/src/main/scala/java/util/zip&quot;&gt;its source code from Scala.js 0.6.x&lt;/a&gt; into your project.&lt;/p&gt;

&lt;h3 id=&quot;jsusexast-was-removed&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt; was removed&lt;/h3&gt;

&lt;p&gt;The use cases for &lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt; have been dramatically reduced by non-native JS classes (previously known as Scala.js-defined JS classes).
This API seems virtually unused on the visible Web.
Moreover, it was the only macro in the Scala.js standard library.&lt;/p&gt;

&lt;p&gt;We have therefore removed it from the standard library, and it is not provided anymore.
On demand, we can republish it as a separate library, if you need it.&lt;/p&gt;

&lt;h3 id=&quot;the-tools-api-has-been-split-into-3-artifacts-and-its-packages-reorganized&quot;&gt;The Tools API has been split into 3 artifacts and its packages reorganized&lt;/h3&gt;

&lt;p&gt;This only concerns consumers of the Tools API, i.e., tools that build on top of the Scala.js linker, such as ScalaFiddle.
In Scala.js 0.6.x, all the tools were in one artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-tools&lt;/code&gt;.
This artifact has been split in three in Scala.js 1.x:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-io&lt;/code&gt;: IR-independent virtual IO&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-logging&lt;/code&gt;: tiny logging API&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-linker&lt;/code&gt;: the linker API (and IR-specific virtual IO)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, the packages have been reorganized as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.ir&lt;/code&gt;            -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.ir&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.tools.io&lt;/code&gt;      -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.io&lt;/code&gt; (and some in &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.linker.irio&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.tools.logging&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.logging&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.core.tools.linker&lt;/code&gt;  -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;org.scalajs.linker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need to &lt;em&gt;cross-compile&lt;/em&gt; against the 0.6.x Tools API and the 1.x Linker API, consult &lt;a href=&quot;https://github.com/scala-js/scala-js/pull/3263&quot;&gt;the comments in PR #3263&lt;/a&gt; for a recommended trick.&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;p&gt;There are very few enhancements in Scala.js 1.0.0-M3.
Scala.js 1.0.0 is focused on simplifying Scala.js, not on adding new features.
Nevertheless, here are a few enhancements.&lt;/p&gt;

&lt;h3 id=&quot;scalajs-can-access-require-and-other-magical-global-variables-of-special-js-environments&quot;&gt;Scala.js can access &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; and other magical “global” variables of special JS environments&lt;/h3&gt;

&lt;p&gt;The changes from global &lt;em&gt;object&lt;/em&gt; to global &lt;em&gt;scope&lt;/em&gt; mean that magical “global” variables provided by some JavaScript environments, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; in Node.js, are now visible to Scala.js.
For example, it is possible to dynamically call &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; as follows in Scala.js 1.x:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathToSomeAsset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;assets/logo.png&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someAsset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathToSomeAsset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We still recommend to use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CommonJSModule&lt;/code&gt; for statically known imports.&lt;/p&gt;

&lt;h3 id=&quot;declaring-inner-classes-in-native-js-classes&quot;&gt;Declaring inner classes in native JS classes&lt;/h3&gt;

&lt;p&gt;Some JavaScript APIs define classes inside objects, as in the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OuterClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;allowing use sites to instantiate them as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;innerObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints 42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Scala.js 0.6.x, it is very awkward to define a facade type for &lt;code class=&quot;highlighter-rouge&quot;&gt;OuterClass&lt;/code&gt;, as illustrated &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2398&quot;&gt;in issue #2398&lt;/a&gt;.
Scala.js 1.x now allows to declare them very easily as inner JS classes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSGlobal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;which in turns allows for the following call site:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outerObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outerObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prints&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;nested-non-native-js-classes-expose-sane-constructors-to-javascript&quot;&gt;Nested non-native JS classes expose sane constructors to JavaScript&lt;/h3&gt;

&lt;p&gt;It is now possible to declare non-native JS classes inside outer &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;es or inside &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;s, and use their &lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf&lt;/code&gt; in a meaningful way.
For example, one can define a method that creates a new JavaScript class every time it is invoked:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingFormat&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Dynamic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructorOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Greeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assuming there is some native JavaScript function like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jane&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;one could call it from Scala.js as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;englishGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, %s!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;englishGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frenchGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bonjour, %s!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frenchGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;japaneseGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sさん、こんにちは。&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;japaneseGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;resulting in the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello, Jane!
Hello, John!
Bonjour, Jane!
Bonjour, John!
Janeさん、こんにちは。
Johnさん、こんにちは。&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Scala.js 0.6.x, the above code would compile but produce incoherent results at run-time, because &lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf&lt;/code&gt; was meaningless for nested classes.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.6.22:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2800&quot;&gt;#2800&lt;/a&gt; Global &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;es cannot be accessed by Scala.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2382&quot;&gt;#2382&lt;/a&gt; Name clash for &lt;code class=&quot;highlighter-rouge&quot;&gt;$outer&lt;/code&gt; pointers of two different nesting levels (fixed for Scala 2.10 and 2.11; 2.12 did not suffer from the bug in 0.6.x)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3085&quot;&gt;#3085&lt;/a&gt; Linking error after the optimizer for &lt;code class=&quot;highlighter-rouge&quot;&gt;someInt.toDouble.compareTo(double)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the full list of issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M1+is%3Aclosed&quot;&gt;fixed in 1.0.0-M1&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M2+is%3Aclosed&quot;&gt;in 1.0.0-M2&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M3+is%3Aclosed&quot;&gt;in 1.0.0-M3&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;cross-building-for-scalajs-06x-and-1x&quot;&gt;Cross-building for Scala.js 0.6.x and 1.x&lt;/h2&gt;

&lt;p&gt;If you want to cross-compile your libraries for Scala.js 0.6.x and 1.x (which you definitely should), here are a couple tips.&lt;/p&gt;

&lt;h3 id=&quot;dynamically-load-a-custom-version-of-scalajs&quot;&gt;Dynamically load a custom version of Scala.js&lt;/h3&gt;

&lt;p&gt;Since the version of Scala.js is not decided by an sbt setting in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;, but by the version of the sbt plugin in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;, standard cross-building setups based on &lt;code class=&quot;highlighter-rouge&quot;&gt;++&lt;/code&gt; cannot be applied.
We recommend that you load the version of Scala.js from an environment variable.
For example, you can do this in your &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SCALAJS_VERSION&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.22&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can then launch&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ SCALAJS_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.0.0-M3 sbt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;from your command line to start up your build with Scala.js 1.0.0-M3.&lt;/p&gt;

&lt;h3 id=&quot;extra-dependencies-for-js-environments&quot;&gt;Extra dependencies for JS environments&lt;/h3&gt;

&lt;p&gt;You can further build on the above &lt;code class=&quot;highlighter-rouge&quot;&gt;val scalaJSVersion&lt;/code&gt; to dynamically add dependencies on &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-phantomjs&lt;/code&gt; and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-jsdom-nodejs&lt;/code&gt; if you use them:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For Node.js with jsdom
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scalajs-env-jsdom-nodejs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// For PhantomJS
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs-env-phantomjs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In both cases, you can then use the source-compatible API in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; to select your JS environment of choice.&lt;/p&gt;

&lt;h3 id=&quot;extra-dependencies-for-jsdependencies&quot;&gt;Extra dependencies for &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Similarly, you can conditionally depend on &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For jsDependencies
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-jsdependencies&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that case, you should unconditionally keep the&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;enablePlugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSDependenciesPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;on the relevant projects.
Scala.js 0.6.20 and later define a no-op &lt;code class=&quot;highlighter-rouge&quot;&gt;JSDependenciesPlugin&lt;/code&gt; to allow for this scenario.&lt;/p&gt;

&lt;h3 id=&quot;conditional-application-of--pscalajssjsdefinedbydefault&quot;&gt;Conditional application of &lt;code class=&quot;highlighter-rouge&quot;&gt;-P:scalajs:sjsDefinedByDefault&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In Scala.js 1.x, the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-P:scalajs:sjsDefinedByDefault&lt;/code&gt; has been removed.
However, if you have non-native JS types in your codebase, you need this flag in Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Add the following setting to your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; to conditionally enable that flag:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;sbt-scalajs-crossproject-and-scalajs-06x&quot;&gt;sbt-scalajs-crossproject and Scala.js 0.6.x&lt;/h3&gt;

&lt;p&gt;If you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt; in your build, you need the &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-scalajs-crossproject&lt;/code&gt; sbt plugin in Scala.js 1.x.
You can also use that sbt plugin in Scala.js 0.6.x, but out-of-the-box there is a small conflict.
You can resolve this conflict using the shadowing import described in &lt;a href=&quot;https://github.com/scala-native/sbt-crossproject#cross-compiling-scalajs-jvm-and-native&quot;&gt;sbt-crossproject’s readme&lt;/a&gt;, adding the following line in your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// shadow sbt-scalajs' crossProject and CrossType from Scala.js 0.6.x (no-op with Scala.js 1.x)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sbtcrossproject.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crossProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CrossType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.22</title>
   <link href="https://www.scala-js.org/news/2018/01/24/announcing-scalajs-0.6.22/"/>
   <updated>2018-01-24T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2018/01/24/announcing-scalajs-0.6.22</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.22!&lt;/p&gt;

&lt;p&gt;This release is almost exclusively a bug-fix release.
It also features an improvement in terms of memory consumption and execution performance while running tests.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.14 or earlier, make sure to read &lt;a href=&quot;/news/2017/03/21/announcing-scalajs-0.6.15/&quot;&gt;the release notes of 0.6.15&lt;/a&gt;, which contain important migration information.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.22 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.22 without change.
0.6.22 is also forward binary compatible with 0.6.{17-21}, but not with earlier releases: libraries compiled with 0.6.22 cannot be used by projects using 0.6.{0-16}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;jdk-apis&quot;&gt;JDK APIs&lt;/h3&gt;

&lt;p&gt;The following JDK API methods have been added:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.nio.Charset.aliases()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.22:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3206&quot;&gt;#3206&lt;/a&gt; Standard error of Scala.js is erroneously sent to &lt;code class=&quot;highlighter-rouge&quot;&gt;logger.error&lt;/code&gt;, instead of to stderr&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3218&quot;&gt;#3218&lt;/a&gt; main() in test scope is executed twice when using test framework and a main module initializer in Test&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3219&quot;&gt;#3219&lt;/a&gt; Methods exported under a scalac name starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; are not exported&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3264&quot;&gt;#3264&lt;/a&gt; NPE while compiling an LMF-capable SAM inside an anonymous JS class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.22+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 1.0.0-M2</title>
   <link href="https://www.scala-js.org/news/2017/11/29/announcing-scalajs-1.0.0-M2/"/>
   <updated>2017-11-29T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2017/11/29/announcing-scalajs-1.0.0-M2</id>
   <content type="html">&lt;p&gt;We are very excited to announce the release of Scala.js 1.0.0-M2!&lt;/p&gt;

&lt;p&gt;This development release is mostly intended for testing purposes, and as a synchronization point with library authors so that they can start upgrading in preparation for the final release.&lt;/p&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.6.x, nor with 1.0.0-M1.
Libraries need to be recompiled and republished using this milestone to be compatible.&lt;/p&gt;

&lt;p&gt;Moreover, this release is not entirely source compatible with 0.6.x either.
We expect, however, that further milestones for 1.0.0 will stay backward source compatible with this milestone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attention:&lt;/strong&gt; We would like to bring your attention to the fact that Scala.js 1.0.0-M2 is the last release that will support:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sbt 0.13&lt;/li&gt;
  &lt;li&gt;building on JDK 6 and JDK 7&lt;/li&gt;
  &lt;li&gt;Scala 2.10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting with Scala.js 1.0.0-M3, the support for those will be dropped, as those technologies are obsolete and going forward, would put an undue maintenance burden on our shoulders.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-06x&quot;&gt;Preparations before upgrading from 0.6.x&lt;/h2&gt;

&lt;p&gt;Before upgrading to 1.0.0-M2, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.6.20 or later&lt;/strong&gt;, and address all deprecation warnings.
Since Scala.js 1.0.0-M2 removes support for all the deprecated features in 0.6.x, it is easier to see the deprecation messages guiding you to the proper replacements.&lt;/p&gt;

&lt;p&gt;Additionally to the explicitly deprecated things, make sure to use &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSLinkerConfig&lt;/code&gt; instead of the following sbt settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSSemantics&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSModuleKind&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOutputMode&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;emitSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;relativeSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOutputWrapper&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOptimizerOptions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upgrade-to-100-m2-from-0620-or-later&quot;&gt;Upgrade to 1.0.0-M2 from 0.6.20 or later&lt;/h2&gt;

&lt;p&gt;As a first approximation, all you need to do is to update the version number in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In addition, if you use some of the components that have been moved to separate repositories, you will need to add some more dependencies in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.portable-scala&quot; % &quot;sbt-scalajs-crossproject&quot; % &quot;0.3.0&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; (or rely on the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; of your transitive dependencies):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-jsdependencies&quot; % &quot;1.0.0-M2&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;.enablePlugins(JSDependenciesPlugin)&lt;/code&gt; to Scala.js &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsConfigure(_.enablePlugins(JSDependenciesPlugin))&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the Node.js with jsdom environment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;libraryDependencies += &quot;org.scala-js&quot; %% &quot;scalajs-env-nodejs&quot; % &quot;1.0.0-M2&quot;&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the PhantomJS environment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-scalajs-env-phantomjs&quot; % &quot;1.0.0-M2&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, if your build has&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you will need to remove it (Scala.js 1.x always behaves as if &lt;code class=&quot;highlighter-rouge&quot;&gt;sjsDefinedByDefault&lt;/code&gt; were present).&lt;/p&gt;

&lt;p&gt;This should get your build up to speed to Scala.js 1.0.0-M2.
From there, you should be able to test whether things go smoothly, or whether you are affected by the breaking changes detailed below.&lt;/p&gt;

&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;

&lt;p&gt;This section discusses the backward incompatible changes, which might affect your project.&lt;/p&gt;

&lt;h3 id=&quot;access-to-the-global-scope-instead-of-the-global-object&quot;&gt;Access to the global scope instead of the global object&lt;/h3&gt;

&lt;p&gt;This is the only major breaking change at the language level.
In Scala.js 1.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dynamic.global&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobalScope&lt;/code&gt; objects refer to the global &lt;em&gt;scope&lt;/em&gt; of JavaScript, rather than the global &lt;em&gt;object&lt;/em&gt;.
Concretely, this has three consequences, which we outline below.
Further information can be found in &lt;a href=&quot;/doc/interoperability/global-scope.html&quot;&gt;the documentation about the global scope in Scala.js&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;members-can-only-be-accessed-with-a-statically-known-name-which-is-a-valid-javascript-identifier&quot;&gt;Members can only be accessed with a statically known name which is a valid JavaScript identifier&lt;/h4&gt;

&lt;p&gt;For example, the following is valid:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;but the following variant, where the name &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; is only known at run-time, is not valid anymore:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Math&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectDynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mathName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The latter will cause a compile error.
This is because it is not possible to perform dynamic lookups in the global scope.
Similarly, accessing a member whose name is statically known but not a valid JavaScript identifier is also prohibited:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;`not-a-valid-JS-identifier`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;global-scope-objects-cannot-be-stored-in-a-separate-val&quot;&gt;Global scope objects cannot be stored in a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;For example, the following is invalid and will cause a compile error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as well as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This follows from the previous rule.
If the above two snippets were allowed, we could not check that we only access members with statically known names.&lt;/p&gt;

&lt;p&gt;The first snippet can be advantageously replaced by a renaming import:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.Dynamic.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;accessing-a-member-that-is-not-declared-causes-a-referenceerror-to-be-thrown&quot;&gt;Accessing a member that is not declared causes a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt; to be thrown&lt;/h4&gt;

&lt;p&gt;This is a &lt;em&gt;run-time&lt;/em&gt; behavior change, and in our experience the larger source of breakages in actual code.&lt;/p&gt;

&lt;p&gt;Previously, reading a non-existent member of the global object, such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalVarThatDoesNotExist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would evaluate to &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.
In Scala.js 1.x, this throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt;.
Similarly, writing to a non-existent member, such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalVarThatDoesNotExist&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would previously &lt;em&gt;create&lt;/em&gt; said global variable.
In Scala.js 1.x, it also throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A typical use case of the previous behavior was to &lt;em&gt;test&lt;/em&gt; whether a global variable was defined or not, e.g.,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUndefined&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Promises are not supported
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Promises are supported
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This idiom is broken in Scala.js 1.x, and needs to be replaced by an explicit use of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.typeOf&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;js.typeOf&lt;/code&gt; “method” is magical when its argument is member of a global scope object.&lt;/p&gt;

&lt;h3 id=&quot;jsundefora-is-now-an-alias-for-a--unit&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[A]&lt;/code&gt; is now an alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;A | Unit&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Instead of defining &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[+A]&lt;/code&gt; as its own type, it is now a simple type alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;A | Unit&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UndefOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;+A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt;-like API is of course preserved.&lt;/p&gt;

&lt;p&gt;We do not expect this to cause any significant issue, but it may impact type inference in subtle ways that can cause compile errors for previously valid code.
You may have to adjust some uses of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt; due to these changes, especially if using Scala 2.10.&lt;/p&gt;

&lt;h3 id=&quot;testhtml-replaces-both-testhtmlfastopt-and-testhtmlfullopt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testHtml&lt;/code&gt; replaces both &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The separation of &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt;, which were independent of the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt;, caused significant unfixable issues in 0.6.x.
In Scala.js 1.x, both are replaced by a single task, &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtml&lt;/code&gt;.
It is equivalent to the old &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; if the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;FastOptStage&lt;/code&gt; (the default), and to &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt; if it is &lt;code class=&quot;highlighter-rouge&quot;&gt;FullOptStage&lt;/code&gt;.
This makes it more consistent with other tasks such as &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;scalajs-javalib-ex-was-removed&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-javalib-ex&lt;/code&gt; was removed&lt;/h3&gt;

&lt;p&gt;The artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-javalib-ex&lt;/code&gt; is removed in 1.x.
It only contained a partial implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.ZipInputStream&lt;/code&gt;.
If you were using it, we recommend that you integrate a copy of &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/0.6.x/javalib-ex/src/main/scala/java/util/zip&quot;&gt;its source code from Scala.js 0.6.x&lt;/a&gt; into your project.&lt;/p&gt;

&lt;h3 id=&quot;jsusexast-was-removed&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt; was removed&lt;/h3&gt;

&lt;p&gt;The use cases for &lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt; have been dramatically reduced by non-native JS classes (previously known as Scala.js-defined JS classes).
This API seems virtually unused on the visible Web.
Moreover, it was the only macro in the Scala.js standard library.&lt;/p&gt;

&lt;p&gt;We have therefore removed it from the standard library, and it is not provided anymore.
On demand, we can republish it as a separate library, if you need it.&lt;/p&gt;

&lt;h3 id=&quot;scala-2120-is-not-supported-anymore&quot;&gt;Scala 2.12.0 is not supported anymore&lt;/h3&gt;

&lt;p&gt;A severe regression in Scala 2.12.0 upstream, affecting &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt;, forced us to drop support for Scala 2.12.0.
Scala 2.12.1+ is supported.&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;p&gt;There are very few enhancements in Scala.js 1.0.0-M2.
Scala.js 1.0.0 is focused on simplifying Scala.js, not on adding new features.
Nevertheless, here are a few enhancements.&lt;/p&gt;

&lt;h3 id=&quot;scalajs-can-access-require-and-other-magical-global-variables-of-special-js-environments&quot;&gt;Scala.js can access &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; and other magical “global” variables of special JS environments&lt;/h3&gt;

&lt;p&gt;The changes from global &lt;em&gt;object&lt;/em&gt; to global &lt;em&gt;scope&lt;/em&gt; mean that magical “global” variables provided by some JavaScript environments, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; in Node.js, are now visible to Scala.js.
For example, it is possible to dynamically call &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; as follows in Scala.js 1.x:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathToSomeAsset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;assets/logo.png&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someAsset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathToSomeAsset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We still recommend to use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CommonJSModule&lt;/code&gt; for statically known imports.&lt;/p&gt;

&lt;h3 id=&quot;declaring-inner-classes-in-native-js-classes&quot;&gt;Declaring inner classes in native JS classes&lt;/h3&gt;

&lt;p&gt;Some JavaScript APIs define classes inside objects, as in the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OuterClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;allowing use sites to instantiate them as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;innerObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints 42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Scala.js 0.6.x, it is very awkward to define a facade type for &lt;code class=&quot;highlighter-rouge&quot;&gt;OuterClass&lt;/code&gt;, as illustrated &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2398&quot;&gt;in issue #2398&lt;/a&gt;.
Scala.js 1.x now allows to declare them very easily as inner JS classes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSGlobal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;which in turns allows for the following call site:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outerObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outerObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prints&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;nested-non-native-js-classes-expose-sane-constructors-to-javascript&quot;&gt;Nested non-native JS classes expose sane constructors to JavaScript&lt;/h3&gt;

&lt;p&gt;It is now possible to declare non-native JS classes inside outer &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;es or inside &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;s, and use their &lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf&lt;/code&gt; in a meaningful way.
For example, one can define a method that creates a new JavaScript class every time it is invoked:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingFormat&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Dynamic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructorOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Greeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assuming there is some native JavaScript function like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jane&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;one could call it from Scala.js as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;englishGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, %s!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;englishGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frenchGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bonjour, %s!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frenchGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;japaneseGreeterClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeGreeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sさん、こんにちは。&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greetPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;japaneseGreeterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;resulting in the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello, Jane!
Hello, John!
Bonjour, Jane!
Bonjour, John!
Janeさん、こんにちは。
Johnさん、こんにちは。&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Scala.js 0.6.x, the above code would compile but produce incoherent results at run-time, because &lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf&lt;/code&gt; was meaningless for nested classes.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.6.21:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2800&quot;&gt;#2800&lt;/a&gt; Global &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;es cannot be accessed by Scala.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2382&quot;&gt;#2382&lt;/a&gt; Name clash for &lt;code class=&quot;highlighter-rouge&quot;&gt;$outer&lt;/code&gt; pointers of two different nesting levels (fixed for Scala 2.10 and 2.11; 2.12 did not suffer from the bug in 0.6.x)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3085&quot;&gt;#3085&lt;/a&gt; Linking error after the optimizer for &lt;code class=&quot;highlighter-rouge&quot;&gt;someInt.toDouble.compareTo(double)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the full list of issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M1+is%3Aclosed&quot;&gt;fixed in 1.0.0-M1&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M2+is%3Aclosed&quot;&gt;fixed in 1.0.0-M2&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;cross-building-for-scalajs-06x-and-1x&quot;&gt;Cross-building for Scala.js 0.6.x and 1.x&lt;/h2&gt;

&lt;p&gt;If you want to cross-compile your libraries for Scala.js 0.6.x and 1.x (which you definitely should), here are a couple tips.&lt;/p&gt;

&lt;h3 id=&quot;dynamically-load-a-custom-version-of-scalajs&quot;&gt;Dynamically load a custom version of Scala.js&lt;/h3&gt;

&lt;p&gt;Since the version of Scala.js is not decided by an sbt setting in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;, but by the version of the sbt plugin in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;, standard cross-building setups based on &lt;code class=&quot;highlighter-rouge&quot;&gt;++&lt;/code&gt; cannot be applied.
We recommend that you load the version of Scala.js from an environment variable.
For example, you can do this in your &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SCALAJS_VERSION&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.21&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can then launch&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ SCALAJS_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.0.0-M2 sbt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;from your command line to start up your build with Scala.js 1.0.0-M2.&lt;/p&gt;

&lt;h3 id=&quot;extra-dependencies-for-js-environments&quot;&gt;Extra dependencies for JS environments&lt;/h3&gt;

&lt;p&gt;You can further build on the above &lt;code class=&quot;highlighter-rouge&quot;&gt;val scalaJSVersion&lt;/code&gt; to dynamically add dependencies on &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-phantomjs&lt;/code&gt; and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-jsdom-nodejs&lt;/code&gt; if you use them:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For Node.js with jsdom
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scalajs-env-jsdom-nodejs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// For PhantomJS
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs-env-phantomjs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In both cases, you can then use the source-compatible API in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; to select your JS environment of choice.&lt;/p&gt;

&lt;h3 id=&quot;extra-dependencies-for-jsdependencies&quot;&gt;Extra dependencies for &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Similarly, you can conditionally depend on &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For jsDependencies
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-jsdependencies&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that case, you should unconditionally keep the&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;enablePlugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSDependenciesPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;on the relevant projects.
Scala.js 0.6.20 and later define a no-op &lt;code class=&quot;highlighter-rouge&quot;&gt;JSDependenciesPlugin&lt;/code&gt; to allow for this scenario.&lt;/p&gt;

&lt;h3 id=&quot;conditional-application-of--pscalajssjsdefinedbydefault&quot;&gt;Conditional application of &lt;code class=&quot;highlighter-rouge&quot;&gt;-P:scalajs:sjsDefinedByDefault&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In Scala.js 1.x, the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-P:scalajs:sjsDefinedByDefault&lt;/code&gt; has been removed.
However, if you have non-native JS types in your codebase, you need this flag in Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Add the following setting to your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; to conditionally enable that flag:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;sbt-scalajs-crossproject-and-scalajs-06x&quot;&gt;sbt-scalajs-crossproject and Scala.js 0.6.x&lt;/h3&gt;

&lt;p&gt;If you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt; in your build, you need the &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-scalajs-crossproject&lt;/code&gt; sbt plugin in Scala.js 1.x.
You can also use that sbt plugin in Scala.js 0.6.x, but out-of-the-box there is a small conflict.
You can resolve this conflict using the shadowing import described in &lt;a href=&quot;https://github.com/scala-native/sbt-crossproject#cross-compiling-scalajs-jvm-and-native&quot;&gt;sbt-crossproject’s readme&lt;/a&gt;, adding the following line in your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// shadow sbt-scalajs' crossProject and CrossType from Scala.js 0.6.x (no-op with Scala.js 1.x)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sbtcrossproject.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crossProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CrossType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.21</title>
   <link href="https://www.scala-js.org/news/2017/11/06/announcing-scalajs-0.6.21/"/>
   <updated>2017-11-06T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2017/11/06/announcing-scalajs-0.6.21</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.21!&lt;/p&gt;

&lt;p&gt;This release is almost exclusively a bug-fix release.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.14 or earlier, make sure to read &lt;a href=&quot;/news/2017/03/21/announcing-scalajs-0.6.15/&quot;&gt;the release notes of 0.6.15&lt;/a&gt;, which contain important migration information.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.21 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.21 without change.
0.6.21 is also forward binary compatible with 0.6.{17-20}, but not with earlier releases: libraries compiled with 0.6.21 cannot be used by projects using 0.6.{0-16}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;jdk-apis&quot;&gt;JDK APIs&lt;/h3&gt;

&lt;p&gt;The following JDK API methods have been added:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.StringBuilder.delete&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.StringBuffer.delete&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;The following bugs have been fixed in 0.6.21:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3125&quot;&gt;#3125&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;println(&quot;\u0007&quot;)&lt;/code&gt; renders as the character &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;a&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3128&quot;&gt;#3128&lt;/a&gt; Scala.js 0.6.20 breaks Java 7 builds (&lt;code class=&quot;highlighter-rouge&quot;&gt;NoSuchMethodError: java.util.concurrent.ConcurrentHashMap.keySet&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3134&quot;&gt;#3134&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;regex.Matcher.start(group)&lt;/code&gt; and friends report wrong positions&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3135&quot;&gt;#3135&lt;/a&gt; Relative path to source file in sourcemap is sometimes broken&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.21+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.20</title>
   <link href="https://www.scala-js.org/news/2017/09/01/announcing-scalajs-0.6.20/"/>
   <updated>2017-09-01T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2017/09/01/announcing-scalajs-0.6.20</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.20!&lt;/p&gt;

&lt;p&gt;This release is mostly intended to bridge the gap between the 0.6.x and 1.x branches, to make it easier to cross-compile and/or migrate.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.14 or earlier, make sure to read &lt;a href=&quot;/news/2017/03/21/announcing-scalajs-0.6.15/&quot;&gt;the release notes of 0.6.15&lt;/a&gt;, which contain important migration information.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.20 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.20 without change.
0.6.20 is also forward binary compatible with 0.6.{17-19}, but not with earlier releases: libraries compiled with 0.6.20 cannot be used by projects using 0.6.{0-16}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;

&lt;h3 id=&quot;sbt-01316-or-above-is-required-or-sbt-1x&quot;&gt;sbt 0.13.16 or above is required (or sbt 1.x)&lt;/h3&gt;

&lt;p&gt;The sbt plugin of Scala.js 0.6.20 starts using features of sbt 0.13.16.
If you are using an older version of sbt 0.13.x, you will have to upgrade to 0.13.16 or later.&lt;/p&gt;

&lt;p&gt;Since 0.6.19, Scala.js also supports sbt 1.0.0+.&lt;/p&gt;

&lt;h3 id=&quot;scalajs-env-selenium-has-to-be-upgraded-to-020&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-selenium&lt;/code&gt; has to be upgraded to 0.2.0&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.20 contains internal changes to improve the so-called test adapter, which is the mechanism used by sbt to communicate with testing frameworks.
These changes are invisible to you, but they broke &lt;a href=&quot;https://github.com/scala-js/scala-js-env-selenium&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-selenium&lt;/code&gt;&lt;/a&gt; 0.1.x.
If you use it, you will have to upgrade it to 0.2.0.&lt;/p&gt;

&lt;h2 id=&quot;deprecations&quot;&gt;Deprecations&lt;/h2&gt;

&lt;p&gt;Scala.js 0.6.20 introduces more aggressive deprecations for features that will disappear in 1.x.
Note that those features have already had better replacements since Scala.js 0.6.18; we are just making it more obvious that these new features should be used to be compatible with 1.x.&lt;/p&gt;

&lt;h3 id=&quot;scalajsdefined&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This annotation is now deprecated.
Instead of using it, you should add the following to your project settings:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; annotations everywhere in your codebase.
The semantics of your codebase will be unchanged.&lt;/p&gt;

&lt;h3 id=&quot;jsjsapp&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt; has traditionally provided two services to an &lt;code class=&quot;highlighter-rouge&quot;&gt;object Foo&lt;/code&gt; that extends it.
These two services are replaced by two different features.&lt;/p&gt;

&lt;h4 id=&quot;discoverability-by-sbt-as-main-object&quot;&gt;Discoverability by sbt as main object&lt;/h4&gt;

&lt;p&gt;Since Scala.js 0.6.18, the sbt plugin can recognize “standard” &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; methods of the form&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;in objects, even if they do not extend &lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt;.
Use such a main method to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt; in the context of discoverability by sbt.&lt;/p&gt;

&lt;p&gt;To enable it as main method, make sure you also set&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSUseMainModuleInitializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;in your project settings.&lt;/p&gt;

&lt;h4 id=&quot;automatic-export-to-javascript&quot;&gt;Automatic export to JavaScript&lt;/h4&gt;

&lt;p&gt;Given&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bar&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the object &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; and its &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; method are automatically exported such that JavaScript code can call&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To achieve exactly the same behavior without &lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt;, define &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bar&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar.Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;this.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, you can define it as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bar&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar.Foo.main&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;but in that case, the JavaScript code will have to be changed to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsdependencies--runtimedom-and-requiresdom--true&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies += RuntimeDOM&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;requiresDOM := true&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;These settings will not be supported by &lt;a href=&quot;https://github.com/scala-js/jsdependencies&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-jsdependencies&lt;/code&gt;&lt;/a&gt; 1.x, the new home of &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; and related features.&lt;/p&gt;

&lt;p&gt;Instead of relying on them to configure a JS environment equipped with the DOM, you should explicitly do so.
For example, to use Node.js with jsdom, use:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;jsEnv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsdomnodejs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSDOMNodeJSEnv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;improved-support-for-cross-compilation-with-1x-and-jsdependencies&quot;&gt;Improved support for cross-compilation with 1.x and &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/news/2017/07/03/announcing-scalajs-1.0.0-M1/&quot;&gt;The release notes of Scala.js 1.0.0-M1&lt;/a&gt; detail how to cross-compile between 0.6.x and 1.x.
One aspect of it was particularly painful: handling the new &lt;code class=&quot;highlighter-rouge&quot;&gt;JSDependenciesPlugin&lt;/code&gt;.
Scala.js 0.6.20 makes this easier by introducing a shim of &lt;code class=&quot;highlighter-rouge&quot;&gt;JSDependenciesPlugin&lt;/code&gt; inside sbt-scalajs.
It is now sufficient to add the following to your &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For jsDependencies
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-jsdependencies&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and add &lt;code class=&quot;highlighter-rouge&quot;&gt;enablePlugins(JSDependenciesPlugin)&lt;/code&gt; to the projects that require it.
There is no need for the hacky &lt;code class=&quot;highlighter-rouge&quot;&gt;project/JSDependenciesCompat.scala&lt;/code&gt; anymore.&lt;/p&gt;

&lt;h3 id=&quot;jdk-apis&quot;&gt;JDK APIs&lt;/h3&gt;

&lt;p&gt;The following JDK API class has been added:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.SplittableRandom&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;The following bugs have been fixed in 0.6.20:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3107&quot;&gt;#3107&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ByteArrayOutputStream&lt;/code&gt; (and in general all &lt;code class=&quot;highlighter-rouge&quot;&gt;Closeable&lt;/code&gt;s) should be an &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoCloseable&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3082&quot;&gt;#3082&lt;/a&gt; Incorrect handling of main generates broken code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.20+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.19</title>
   <link href="https://www.scala-js.org/news/2017/07/29/announcing-scalajs-0.6.19/"/>
   <updated>2017-07-29T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2017/07/29/announcing-scalajs-0.6.19</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.19!&lt;/p&gt;

&lt;p&gt;This release brings support for &lt;a href=&quot;http://www.scala-sbt.org/1.0/docs/sbt-1.0-Release-Notes.html#sbt+1.0.0-RC2&quot;&gt;sbt 1.0.0-RC2&lt;/a&gt; and following.
In addition, it fixes a few compiler issues.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.14 or earlier, make sure to read &lt;a href=&quot;/news/2017/03/21/announcing-scalajs-0.6.15/&quot;&gt;the release notes of 0.6.15&lt;/a&gt;, which contain important migration information.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.19 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.19 without change.
0.6.19 is also forward binary compatible with 0.6.{17-18}, but not with earlier releases: libraries compiled with 0.6.19 cannot be used by projects using 0.6.{0-16}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;support-for-sbt-100-rc2-and-following&quot;&gt;Support for sbt 1.0.0-RC2 and following&lt;/h3&gt;

&lt;p&gt;You can now use Scala.js 0.6.19 with &lt;a href=&quot;http://www.scala-sbt.org/1.0/docs/sbt-1.0-Release-Notes.html#sbt+1.0.0-RC2&quot;&gt;sbt 1.0.0-RC2&lt;/a&gt;, and following releases of sbt.
Nothing changes in sbt-scalajs between sbt 0.13.x and sbt 1.x.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.19:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3053&quot;&gt;#3053&lt;/a&gt; “&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.NoSuchElementException&lt;/code&gt;: key not found: null” while optimizing (root cause: &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3055&quot;&gt;#3055&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3050&quot;&gt;#3050&lt;/a&gt; No linking error reported for conflicting export names with &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel object&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3047&quot;&gt;#3047&lt;/a&gt; Two methods with the same JS name must not compile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.19+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 1.0.0-M1</title>
   <link href="https://www.scala-js.org/news/2017/07/03/announcing-scalajs-1.0.0-M1/"/>
   <updated>2017-07-03T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2017/07/03/announcing-scalajs-1.0.0-M1</id>
   <content type="html">&lt;p&gt;We are very excited to announce the first milestone of Scala.js 1.0.0, aka 1.0.0-M1!&lt;/p&gt;

&lt;p&gt;This development release is mostly intended for testing purposes, and as a synchronization point with library authors so that they can start upgrading in preparation for the final release.&lt;/p&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.6.x.
Libraries need to be recompiled and republished using this milestone to be compatible.&lt;/p&gt;

&lt;p&gt;Moreover, this release is not entirely source compatible with 0.6.x either.
We expect, however, that further milestones for 1.0.0 will stay backward source compatible with this first milestone.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries and testing frameworks have already been upgraded and published for 1.0.0-M1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;scalajs-dom (static types for the DOM)&lt;/a&gt;: 0.9.3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-java-time&quot;&gt;scalajs-java-time&lt;/a&gt;: 0.2.2&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-java-logging&quot;&gt;scalajs-java-logging&lt;/a&gt;: 0.1.2&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-jquery&quot;&gt;scalajs-jquery&lt;/a&gt;: 0.9.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-06x&quot;&gt;Preparations before upgrading from 0.6.x&lt;/h2&gt;

&lt;p&gt;Before upgrading to 1.0.0-M1, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.6.18&lt;/strong&gt;, and address all deprecation warnings.
Since Scala.js 1.0.0-M1 removes support for all the deprecated features in 0.6.x, it is easier to see the deprecation messages guiding you to the proper replacements.&lt;/p&gt;

&lt;p&gt;Additionally to the explicitly deprecated things, make sure to use &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSLinkerConfig&lt;/code&gt; instead of the following sbt settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSSemantics&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSModuleKind&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOutputMode&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;emitSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;relativeSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOutputWrapper&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOptimizerOptions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upgrade-to-100-m1-from-0618&quot;&gt;Upgrade to 1.0.0-M1 from 0.6.18&lt;/h2&gt;

&lt;p&gt;As a first approximation, all you need to do is to update the version number in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In addition, if you use some of the components that have been moved to separate repositories, you will need to add some more dependencies in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; (or rely on the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; of your transitive dependencies):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-jsdependencies&quot; % &quot;1.0.0-M1&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;.enablePlugins(JSDependenciesPlugin)&lt;/code&gt; to Scala.js &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsConfigure(_.enablePlugins(JSDependenciesPlugin))&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the Node.js with jsdom environment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;libraryDependencies += &quot;org.scala-js&quot; %% &quot;scalajs-env-nodejs&quot; % &quot;1.0.0-M1&quot;&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you relied on the automatic selection of the above environment due to &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies += RuntimeDOM&lt;/code&gt;, you have to explicitly select it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;jsEnv := new org.scalajs.jsenv.jsdomnodejs.JSDOMNodeJSEnv()&lt;/code&gt; to the relevant Scala.js project settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the PhantomJS environment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-scalajs-env-phantomjs&quot; % &quot;1.0.0-M1&quot;)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This should get your build up to speed to Scala.js 1.0.0-M1.
From there, you should be able to test whether things go smoothly, or whether you are affected by the breaking changes detailed below.&lt;/p&gt;

&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;

&lt;p&gt;This section discusses the backward incompatible changes, which might affect your project.&lt;/p&gt;

&lt;h3 id=&quot;access-to-the-global-scope-instead-of-the-global-object&quot;&gt;Access to the global scope instead of the global object&lt;/h3&gt;

&lt;p&gt;This is the only major breaking change at the language level.
In Scala.js 1.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dynamic.global&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobalScope&lt;/code&gt; objects refer to the global &lt;em&gt;scope&lt;/em&gt; of JavaScript, rather than the global &lt;em&gt;object&lt;/em&gt;.
Concretely, this has three consequences, which we outline below.
Further information can be found in &lt;a href=&quot;/doc/interoperability/global-scope.html&quot;&gt;the documentation about the global scope in Scala.js&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;members-can-only-be-accessed-with-a-statically-known-name-which-is-a-valid-javascript-identifier&quot;&gt;Members can only be accessed with a statically known name which is a valid JavaScript identifier&lt;/h4&gt;

&lt;p&gt;For example, the following is valid:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;but the following variant, where the name &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; is only known at run-time, is not valid anymore:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Math&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectDynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mathName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The latter will cause a compile error.
This is because it is not possible to perform dynamic lookups in the global scope.
Similarly, accessing a member whose name is statically known but not a valid JavaScript identifier is also prohibited:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;`not-a-valid-JS-identifier`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;global-scope-objects-cannot-be-stored-in-a-separate-val&quot;&gt;Global scope objects cannot be stored in a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;For example, the following is invalid and will cause a compile error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as well as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This follows from the previous rule.
If the above two snippets were allowed, we could not check that we only access members with statically known names.&lt;/p&gt;

&lt;p&gt;The first snippet can be advantageously replaced by a renaming import:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.Dynamic.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;accessing-a-member-that-is-not-declared-causes-a-referenceerror-to-be-thrown&quot;&gt;Accessing a member that is not declared causes a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt; to be thrown&lt;/h4&gt;

&lt;p&gt;This is a &lt;em&gt;run-time&lt;/em&gt; behavior change, and in our experience the larger source of breakages in actual code.&lt;/p&gt;

&lt;p&gt;Previously, reading a non-existent member of the global object, such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalVarThatDoesNotExist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would evaluate to &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.
In Scala.js 1.x, this throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt;.
Similarly, writing to a non-existent member, such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalVarThatDoesNotExist&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would previously &lt;em&gt;create&lt;/em&gt; said global variable.
In Scala.js 1.x, it also throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A typical use case of the previous behavior was to &lt;em&gt;test&lt;/em&gt; whether a global variable was defined or not, e.g.,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUndefined&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Promises are not supported
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Promises are supported
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This idiom is broken in Scala.js 1.x, and needs to be replaced by an explicit use of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.typeOf&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;js.typeOf&lt;/code&gt; “method” is magical when its argument is member of a global scope object.&lt;/p&gt;

&lt;h3 id=&quot;extends-jsjsapp-does-not-export-the-object-to-javascript-anymore&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;extends js.JSApp&lt;/code&gt; does not export the object to JavaScript anymore&lt;/h3&gt;

&lt;p&gt;Consider the following object definition:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bar&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.6.x, extending &lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt; has &lt;em&gt;two&lt;/em&gt; consequences:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; is recognized by the sbt plugin as a main object, and it can be used by &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSUseMainModuleInitializer := true&lt;/code&gt; (as well as in deprecated launchers)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; is exported to JavaScript as a 0-argument function &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.Foo()&lt;/code&gt;, and its &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; method as well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Scala.js 1.x, the second bullet is not true anymore, which constitutes a &lt;em&gt;run-time behavior change&lt;/em&gt;.
If you need to preserve this behavior, you need to explicitly export &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; and its &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; method as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar.Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsAccessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foo.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In addition, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt; itself is deprecated, so you should use a &lt;code class=&quot;highlighter-rouge&quot;&gt;def main(args: Array[String]): Unit&lt;/code&gt; method instead.
&lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt; will be removed in Scala.js 1.0.0-RC1.&lt;/p&gt;

&lt;h3 id=&quot;jsundefora-is-now-an-alias-for-a--unit&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[A]&lt;/code&gt; is now an alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;A | Unit&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Instead of defining &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[+A]&lt;/code&gt; as its own type, it is now a simple type alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;A | Unit&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UndefOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;+A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt;-like API is of course preserved.&lt;/p&gt;

&lt;p&gt;We do not expect this to cause any significant issue, but it may impact type inference in subtle ways that can cause compile errors for previously valid code.
You may have to adjust some uses of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt; due to these changes, especially if using Scala 2.10.&lt;/p&gt;

&lt;h3 id=&quot;testhtml-replaces-both-testhtmlfastopt-and-testhtmlfullopt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testHtml&lt;/code&gt; replaces both &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The separation of &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt;, which were independent of the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt;, caused significant unfixable issues in 0.6.x.
In Scala.js 1.x, both are replaced by a single task, &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtml&lt;/code&gt;.
It is equivalent to the old &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; if the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;FastOptStage&lt;/code&gt; (the default), and to &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt; if it is &lt;code class=&quot;highlighter-rouge&quot;&gt;FullOptStage&lt;/code&gt;.
This makes it more consistent with other tasks such as &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;scalajs-javalib-ex-was-removed&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-javalib-ex&lt;/code&gt; was removed&lt;/h3&gt;

&lt;p&gt;The artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-javalib-ex&lt;/code&gt; is removed in 1.x.
It only contained a partial implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.ZipInputStream&lt;/code&gt;.
If you were using it, we recommend that you integrate a copy of &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/0.6.x/javalib-ex/src/main/scala/java/util/zip&quot;&gt;its source code from Scala.js 0.6.x&lt;/a&gt; into your project.&lt;/p&gt;

&lt;h3 id=&quot;jsusexast-was-removed&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt; was removed&lt;/h3&gt;

&lt;p&gt;The use cases for &lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt; have been dramatically reduced by non-native JS classes (previously known as Scala.js-defined JS classes).
This API seems virtually unused on the visible Web.
Moreover, it was the only macro in the Scala.js standard library.&lt;/p&gt;

&lt;p&gt;We have therefore removed it from the standard library, and it is not provided anymore.
On demand, we can republish it as a separate library, if you need it.&lt;/p&gt;

&lt;h3 id=&quot;scala-2120-is-not-supported-anymore&quot;&gt;Scala 2.12.0 is not supported anymore&lt;/h3&gt;

&lt;p&gt;A severe regression in Scala 2.12.0 upstream, affecting &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt;, forced us to drop support for Scala 2.12.0.
Scala 2.12.1+ is supported.&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;p&gt;There are very few enhancements in Scala.js 1.0.0-M1.
Scala.js 1.0.0 is focused on simplifying Scala.js, not on adding new features.
Nevertheless, here are a few enhancements.&lt;/p&gt;

&lt;h3 id=&quot;non-native-js-classes-by-default-previously-known-as-scalajs-defined&quot;&gt;Non-native JS classes by default (previously known as Scala.js-defined)&lt;/h3&gt;

&lt;p&gt;In Scala.js 0.6.x, we can declare a so-called &lt;em&gt;Scala.js-defined&lt;/em&gt; JS class as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Scala.js 1.x, “Scala.js-defined” is the default, so the above snippet would be simply written as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Consequently, we also introduce a shift of &lt;em&gt;terminology&lt;/em&gt;.
Such a class is now called a &lt;em&gt;non-native JS class&lt;/em&gt; (by opposition to a &lt;em&gt;native JS class&lt;/em&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;@js.native&lt;/code&gt;).
Both native and non-native JS classes (resp. traits, objects) are called &lt;em&gt;JS classes&lt;/em&gt; (resp. traits, objects).
All of them are called &lt;em&gt;JS types&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Also note that the annotation &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; is deprecated, and will be removed in Scala.js 1.0.0-RC1.&lt;/p&gt;

&lt;h3 id=&quot;scalajs-can-access-require-and-other-magical-global-variables-of-special-js-environments&quot;&gt;Scala.js can access &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; and other magical “global” variables of special JS environments&lt;/h3&gt;

&lt;p&gt;The changes from global &lt;em&gt;object&lt;/em&gt; to global &lt;em&gt;scope&lt;/em&gt; mean that magical “global” variables provided by some JavaScript environments, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; in Node.js, are now visible to Scala.js.
For example, it is possible to dynamically call &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; as follows in Scala.js 1.x:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathToSomeAsset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;assets/logo.png&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someAsset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathToSomeAsset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We still recommend to use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CommonJSModule&lt;/code&gt; for statically known imports.&lt;/p&gt;

&lt;h3 id=&quot;the-sbt-plugin-builds-on-top-of-sbt-crossproject&quot;&gt;The sbt plugin builds on top of sbt-crossproject&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.x defined itself the notion of &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;%%%&lt;/code&gt; operator for cross-platform dependencies.
In Scala.js 1.x, we standardize on &lt;a href=&quot;https://github.com/scala-native/sbt-crossproject&quot;&gt;sbt-crossproject&lt;/a&gt;, which provides a unified API that can also be used by &lt;a href=&quot;https://scala-native.readthedocs.io/&quot;&gt;Scala Native&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The changes are entirely backward source compatible, because &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-crossproject&lt;/code&gt; was designed with that specific goal.
However, the traditional cross-project constructor:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crossProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...)...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;is now deprecated, as it hard-codes the JVM × JS pair of platforms.
Instead, you should use&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crossProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JVMPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...)...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.6.18:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2800&quot;&gt;#2800&lt;/a&gt; Global &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;es cannot be accessed by Scala.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2382&quot;&gt;#2382&lt;/a&gt; Name clash for &lt;code class=&quot;highlighter-rouge&quot;&gt;$outer&lt;/code&gt; pointers of two different nesting levels (fixed for Scala 2.10 and 2.11; 2.12 did not suffer from the bug in 0.6.x)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av1.0.0-M1+is%3Aclosed&quot;&gt;full list&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;cross-building-for-scalajs-06x-and-1x&quot;&gt;Cross-building for Scala.js 0.6.x and 1.x&lt;/h2&gt;

&lt;p&gt;If you want to cross-compile your libraries for Scala.js 0.6.x and 1.x (which you definitely should), here are a couple tips.&lt;/p&gt;

&lt;h3 id=&quot;dynamically-load-a-custom-version-of-scalajs&quot;&gt;Dynamically load a custom version of Scala.js&lt;/h3&gt;

&lt;p&gt;Since the version of Scala.js is not decided by an sbt setting in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;, but by the version of the sbt plugin in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;, standard cross-building setups based on &lt;code class=&quot;highlighter-rouge&quot;&gt;++&lt;/code&gt; cannot be applied.
We recommend that you load the version of Scala.js from an environment variable.
For example, you can do this in your &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SCALAJS_VERSION&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.18&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can then launch&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ SCALAJS_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.0.0-M1 sbt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;from your command line to start up your build with Scala.js 1.0.0-M1.&lt;/p&gt;

&lt;h3 id=&quot;extra-dependencies-for-js-environments&quot;&gt;Extra dependencies for JS environments&lt;/h3&gt;

&lt;p&gt;You can further build on the above &lt;code class=&quot;highlighter-rouge&quot;&gt;val scalaJSVersion&lt;/code&gt; to dynamically add dependencies on &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-phantomjs&lt;/code&gt; and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-env-jsdom-nodejs&lt;/code&gt; if you use them:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For Node.js with jsdom
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scalajs-env-jsdom-nodejs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// For PhantomJS
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs-env-phantomjs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In both cases, you can then use the source-compatible API in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; to select your JS environment of choice.&lt;/p&gt;

&lt;h3 id=&quot;extra-dependencies-for-jsdependencies&quot;&gt;Extra dependencies for &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The case of &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-jsdependencies&lt;/code&gt; is trickier, because it defines an &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoPlugin&lt;/code&gt; that needs to be enabled on your projects.
This means that there is no source-compatible way to write your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;.
The trick is to provide a fake &lt;code class=&quot;highlighter-rouge&quot;&gt;JSDependenciesPlugin&lt;/code&gt; when compiling for 0.6.x.&lt;/p&gt;

&lt;p&gt;First add the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For jsDependencies
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-jsdependencies&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0-M1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then create a file &lt;code class=&quot;highlighter-rouge&quot;&gt;project/JSDependenciesCompat.scala&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jsdependenciescompat&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sbt._&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakeJSDependenciesPlugin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AutoPlugin&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakeJSDependenciesPluginProvider&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AutoPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Compat._&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;autoImport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.scalajs._&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSDependenciesPluginCompat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsdependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sbtplugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSDependenciesPlugin&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Compat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;jsdependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;sbtplugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSDependenciesPlugin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakeJSDependenciesPlugin&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can now write &lt;code class=&quot;highlighter-rouge&quot;&gt;enablePlugins(JSDependenciesCompat)&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;, and otherwise use &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; and other keys as usual.&lt;/p&gt;

&lt;p&gt;Understanding how the trick works is left as an exercise for the reader.&lt;/p&gt;

&lt;h3 id=&quot;warning-free-cross-compilation-of-scalajsdefined&quot;&gt;Warning-free cross-compilation of &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In Scala.js 1.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; is deprecated because it is the default.
However, by default, in Scala.js 0.6.x, it is required.
Scala.js 0.6.17 introduced the compiler option &lt;code class=&quot;highlighter-rouge&quot;&gt;-P:scalajs:sjsDefinedByDefault&lt;/code&gt; to allow warning-free cross-compilation.
Add the following setting to your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then remove all your &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; annotations.
This will be source-compatible between both versions, and not produce any warnings.&lt;/p&gt;

&lt;h3 id=&quot;enabling-sbt-crossproject-even-with-scalajs-06x&quot;&gt;Enabling sbt-crossproject even with Scala.js 0.6.x&lt;/h3&gt;

&lt;p&gt;This should only be necessary if your codebase also cross-compiles with Scala Native, in which case you need your build to depend on &lt;a href=&quot;https://github.com/scala-native/sbt-crossproject&quot;&gt;sbt-crossproject&lt;/a&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-scalajs-crossproject&lt;/code&gt; in the 0.6.x build.
However, you must not depend on it in the 1.x build, because it conflicts with the now built-in support of sbt-crossproject in Scala.js 1.x.
Therefore, here is what you should put in your &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For sbt-crossproject support even with Scala.js 0.6.x
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-native&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-scalajs-crossproject&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that case, you still need to apply the shadowing import described in &lt;a href=&quot;https://github.com/scala-native/sbt-crossproject#cross-compiling-scalajs-jvm-and-native&quot;&gt;sbt-crossproject’s readme&lt;/a&gt;, i.e., in your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// shadow sbt-scalajs' crossProject and CrossType from Scala.js 0.6.x (no-op with Scala.js 1.x)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sbtcrossproject.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crossProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CrossType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.18</title>
   <link href="https://www.scala-js.org/news/2017/06/28/announcing-scalajs-0.6.18/"/>
   <updated>2017-06-28T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2017/06/28/announcing-scalajs-0.6.18</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.18!&lt;/p&gt;

&lt;p&gt;This release is mostly a bug-fix release, but it also brings one new feature: the ability to recognize “standard” &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; methods (with &lt;code class=&quot;highlighter-rouge&quot;&gt;args: Array[String]&lt;/code&gt;) in addition to &lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.14 or earlier, make sure to read &lt;a href=&quot;/news/2017/03/21/announcing-scalajs-0.6.15/&quot;&gt;the release notes of 0.6.15&lt;/a&gt;, which contain important migration information.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.18 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.18 without change.
0.6.18 is also forward binary compatible with 0.6.17, but not with earlier releases: libraries compiled with 0.6.18 cannot be used by projects using 0.6.{0-16}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;support-for-standard-main-methods&quot;&gt;Support for “standard” &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; methods&lt;/h3&gt;

&lt;p&gt;Until Scala.js 0.6.17, in order for the sbt plugin to recognize an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; as a &lt;em&gt;main&lt;/em&gt; object, and call its main method (either through the deprecated &lt;em&gt;launchers&lt;/em&gt;, or more recently with &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSUseMainModuleInitializer := true&lt;/code&gt;), that object had to extend &lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt;.
For example, a hello world would look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this release onwards, the “standard” shape of main objects, JVM-style, are also recognized.
The above example can be rewritten as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and truly be cross-platform.
This style of main objects is only supported with &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSUseMainModuleInitializer := true&lt;/code&gt; (not with the deprecated &lt;em&gt;launchers&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id=&quot;simplified-sbt-setting-to-configure-all-aspects-of-scalajs&quot;&gt;Simplified sbt setting to configure all aspects of Scala.js&lt;/h3&gt;

&lt;p&gt;In preparation for Scala.js 1.x, we introduce a new sbt setting to configure all aspects of the Scala.js linker: &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSLinkerConfig&lt;/code&gt;.
That settings aggregates and replaces the following settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSSemantics&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSModuleKind&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOutputMode&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;emitSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;relativeSourceMaps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOutputWrapper&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSOptimizerOptions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The old settings will of course continue to work in 0.6.x, but they will be dropped in Scala.js 1.x.
New builds are encouraged to use &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSLinkerConfig&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that, due to backward compatibility concerns, in 0.6.x the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSLinkerConfig&lt;/code&gt; is only relevant in the project scope (not scoped per config like with &lt;code class=&quot;highlighter-rouge&quot;&gt;in Compile&lt;/code&gt;), and in the fully-qualified scope (project, config, &lt;em&gt;and&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptJS&lt;/code&gt;).
Usually, it will only be set in the project scope, in which case you have nothing to worry about.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.18:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2945&quot;&gt;#2945&lt;/a&gt; Scala.js sbt plugin ignores &lt;code class=&quot;highlighter-rouge&quot;&gt;logBuffered&lt;/code&gt; setting&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3025&quot;&gt;#3025&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;@noinline&lt;/code&gt; breaks the optimizer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/3013&quot;&gt;#3013&lt;/a&gt; Super call to a mixin of an outer class confuses the codegen in 2.12+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.18+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.17</title>
   <link href="https://www.scala-js.org/news/2017/06/04/announcing-scalajs-0.6.17/"/>
   <updated>2017-06-04T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2017/06/04/announcing-scalajs-0.6.17</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.6.17!&lt;/p&gt;

&lt;p&gt;This release is mostly a bug-fix release, but it also brings a few new features.&lt;/p&gt;

&lt;p&gt;One bug fix which we would like to highlight is &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2943&quot;&gt;#2943&lt;/a&gt;/&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2827&quot;&gt;#2827&lt;/a&gt;.
The optimizer exposed a quadratic behavior which meant insanely long times of &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; on some codebases, which we have now fixed.
This was particularly true in test suites using ScalaTest.&lt;/p&gt;

&lt;p&gt;The main new feature of this release is the ability for facade libraries to support both the traditional &lt;code class=&quot;highlighter-rouge&quot;&gt;NoModule&lt;/code&gt; style, where JS libraries are exposed as global variables and accessed through &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobal&lt;/code&gt;, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;CommonJSModule&lt;/code&gt; style, where JS libraries are imported through &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.14 or earlier, make sure to read &lt;a href=&quot;/news/2017/03/21/announcing-scalajs-0.6.15/&quot;&gt;the release notes of 0.6.15&lt;/a&gt;, which contain important migration information.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.17 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.17 without change.
However, it is not forward compatible: libraries compiled with 0.6.17 cannot be used by projects using 0.6.{0-16}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;double-support-for-global-variablesimports-in-facade-types&quot;&gt;Double support for global variables/imports in facade types&lt;/h3&gt;

&lt;p&gt;Since Scala.js 0.6.13, Scala.js codebases have had the option to &lt;a href=&quot;/doc/project/module.html&quot;&gt;emit CommonJS modules&lt;/a&gt;, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;CommonJSModule&lt;/code&gt; module kind.
In that mode, JS libraries are imported through facade types with &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt;.
For example, one might import jQuery as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JQuery&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, if one uses the more traditional “script” style (with the &lt;code class=&quot;highlighter-rouge&quot;&gt;NoModule&lt;/code&gt; module kind), where JS libraries are exposed as global variables, the facade would have to look like the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSGlobal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JQuery&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This means that there was no way to write a facade library that works both for applications using &lt;code class=&quot;highlighter-rouge&quot;&gt;NoModule&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CommonJSModule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.17, the facade can now be declared as follows to support both module kinds:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalFallback&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JQuery&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When linking with &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSModuleKind := ModuleKind.CommonJSModule&lt;/code&gt;, this will behave as in the first example.
When linking with &lt;code class=&quot;highlighter-rouge&quot;&gt;ModuleKind.NoModule&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;globalFallback&lt;/code&gt; is used, and the facade behaves as in the second example with &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobal(&quot;$&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;opt-in-scalajsdefined-by-default&quot;&gt;Opt-in &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; by default&lt;/h3&gt;

&lt;p&gt;As a sneak peak of Scala.js 1.x, you can now opt-in for &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; by default in your codebase.&lt;/p&gt;

&lt;p&gt;As you might know, in Scala.js 1.x, classes, traits and objects extending &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Any&lt;/code&gt; will be “Scala.js-defined” by default.
In 0.6.x, the compiler forces you to choose between &lt;code class=&quot;highlighter-rouge&quot;&gt;@js.native&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; with warnings.
In 1.x however, the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; annotation will be deprecated and have no effect.&lt;/p&gt;

&lt;p&gt;In other words, when migrating from 0.6.x to 1.x, a class such as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will have to lose its annotation and simply become&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Scala.js 0.6.17, you can opt-in to the new behavior of Scala.js 1.x.
To do so, give the option &lt;code class=&quot;highlighter-rouge&quot;&gt;-P:scalajs:sjsDefinedByDefault&lt;/code&gt; to the Scala compiler.
In sbt, you can do so with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For a Scala.js-only project
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enablePlugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ScalaJSPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// For a cross project:
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crossProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jsSettings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:sjsDefinedByDefault&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this compiler option, you can safely remove all your &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; annotations, and benefit from the cleaner syntax of Scala.js 1.x today!&lt;/p&gt;

&lt;p&gt;Codebases with and without the option are still interoperable between each other.
Using the option does not prevent you from depending on libraries that do not use it, nor does it prevent codebases not using it from depending on your library.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.17:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2943&quot;&gt;#2943&lt;/a&gt; Performance regression in the optimiser&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2827&quot;&gt;#2827&lt;/a&gt; Slow incremental linking times for fastOptJS (with ScalaTest)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2979&quot;&gt;#2979&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;%%%&lt;/code&gt; does not work in JVM projects&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2953&quot;&gt;#2953&lt;/a&gt; Type-matching arbitrary things against &lt;code class=&quot;highlighter-rouge&quot;&gt;Byte&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Short&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt; ends up calling &lt;code class=&quot;highlighter-rouge&quot;&gt;toString&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2928&quot;&gt;#2928&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;return x match {...}&lt;/code&gt; crashes the compiler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2927&quot;&gt;#2927&lt;/a&gt; JUnit &lt;code class=&quot;highlighter-rouge&quot;&gt;assertEquals(_: Double, _: Double)&lt;/code&gt; not failing for JS, only for JVM&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2845&quot;&gt;#2845&lt;/a&gt; Scala.js compiler doesn’t pass through UTF-8 correctly for dependencies&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2798&quot;&gt;#2798&lt;/a&gt; Allow the sbt plugin to work if run on Java 9 (the optimizer will not be parallel)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2786&quot;&gt;#2786&lt;/a&gt; Code which runs with fastOptJS but crashes with fullOptJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.17+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.16</title>
   <link href="https://www.scala-js.org/news/2017/04/29/announcing-scalajs-0.6.16/"/>
   <updated>2017-04-29T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2017/04/29/announcing-scalajs-0.6.16</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.6.16!&lt;/p&gt;

&lt;p&gt;This release is mostly a bug-fix release.
It also adds support for jsdom v10.x (which contains breaking changes wrt. jsdom v9.x) and Scala 2.13.0-M1.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.14 or earlier, make sure to read &lt;a href=&quot;/news/2017/03/21/announcing-scalajs-0.6.15/&quot;&gt;the release notes of 0.6.15&lt;/a&gt;, which contain important migration information.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.16 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.16 without change.
It is also forward binary compatible with 0.6.15, but not with earlier releases: libraries compiled with 0.6.16 cannot be used by projects using 0.6.{0-14}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;new-jdk-parts&quot;&gt;New JDK parts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2906&quot;&gt;#2906&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Math.next{Up,Down,After}&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt;s, as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;nextDown&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.16:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2821&quot;&gt;#2821&lt;/a&gt; Source Maps bug - wrong column in the generated file (thanks to &lt;a href=&quot;https://github.com/Gralfim&quot;&gt;@Gralfim&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2902&quot;&gt;#2902&lt;/a&gt; JSDOM API change breaks virtual console in tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.16+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.15</title>
   <link href="https://www.scala-js.org/news/2017/03/21/announcing-scalajs-0.6.15/"/>
   <updated>2017-03-21T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2017/03/21/announcing-scalajs-0.6.15</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.6.15!&lt;/p&gt;

&lt;p&gt;This release was focused on preparations for Scala.js 1.0.0.
It notably contains better replacements for some features that we were not 100% happy with, which are now deprecated and will be dropped in 1.0.0.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/olafurpg&quot;&gt;@olafurpg&lt;/a&gt; and his great tool &lt;a href=&quot;https://scalacenter.github.io/scalafix/&quot;&gt;scalafix&lt;/a&gt;, you can automatically migrate your codebase for the first and most intrusive of those deprecations.
See below for details.&lt;/p&gt;

&lt;p&gt;Scala.js 0.6.15 also comes with a set of exciting new features, including several awesome JavaScript interoperability features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportStatic&lt;/code&gt; to define static members on Scala.js-defined JS classes.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel&lt;/code&gt; is not restricted to methods anymore: it can be used on fields and top-level classes/objects.&lt;/li&gt;
  &lt;li&gt;The standard library now contains the API for ECMAScript 2015 symbols (as &lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/latest/#scala.scalajs.js.Symbol&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Symbol&lt;/code&gt;&lt;/a&gt;) and iterables/iterators (as &lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/latest/#scala.scalajs.js.Iterable&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Iterable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/latest/#scala.scalajs.js.Iterator&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Iterator&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;In JS types (both native and non-native), &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName&lt;/code&gt; can be given a reference to a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Symbol&lt;/code&gt; (instead of a constant string) to declare members whose “name” is a JavaScript symbol.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, the sbt plugin also features a replacement for the “launcher” files, so that the call to the main method of your program can be included directly inside the main &lt;code class=&quot;highlighter-rouge&quot;&gt;-fastopt.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Read on for more details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.12 or earlier, make sure to read &lt;a href=&quot;/news/2016/10/17/announcing-scalajs-0.6.13/&quot;&gt;the release notes of 0.6.13&lt;/a&gt;, which contain some breaking changes in sbt build definitions.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.15 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.15 without change.
However, it is not forward compatible: libraries compiled with 0.6.15 cannot be used by projects using 0.6.{0-14}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;main-deprecations&quot;&gt;Main deprecations&lt;/h2&gt;

&lt;h3 id=&quot;jsnative-classes-and-objects-need-to-have-jsglobal&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@js.native&lt;/code&gt; classes and objects need to have &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobal&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Previously, one would declare facade types for native classes and objects as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foobar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is now deprecated: &lt;code class=&quot;highlighter-rouge&quot;&gt;@js.native&lt;/code&gt; objects and classes should now explicitly use the annotation &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobal&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js.annotation._&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSGlobal&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// implied name &quot;Foo&quot;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSGlobal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foobar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobal&lt;/code&gt; &lt;em&gt;replaces&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName&lt;/code&gt; if it is present, and is otherwise added.&lt;/p&gt;

&lt;h4 id=&quot;migration-tips&quot;&gt;Migration tips&lt;/h4&gt;

&lt;p&gt;You can temporarily disable the deprecation warnings with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:suppressMissingJSGlobalDeprecations&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will keep working in the 0.6.x cycle.
You can use that to ease your migration and delay dealing with these deprecations until you have some time to allocate to that.&lt;/p&gt;

&lt;h4 id=&quot;automatically-migrate-your-codebase-with-scalafix&quot;&gt;Automatically migrate your codebase with scalafix&lt;/h4&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/olafurpg&quot;&gt;@olafurpg&lt;/a&gt;, we have a &lt;a href=&quot;https://scalacenter.github.io/scalafix/&quot;&gt;scalafix&lt;/a&gt; rewrite for you.
You can use it to automatically migrate your codebase!&lt;/p&gt;

&lt;p&gt;Here is a how-to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure you use sbt 0.13.13 or later (in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/build.properties&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following sbt plugin to &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addSbtPlugin(&quot;ch.epfl.scala&quot; % &quot;sbt-scalafix&quot; % &quot;0.3.2&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a file &lt;code class=&quot;highlighter-rouge&quot;&gt;.scalafix.conf&lt;/code&gt; at the root of your project, and fill it with:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rewrites = [&quot;https://gist.githubusercontent.com/sjrd/ef8bb7c52be1451b3a3b9bab6a187549/raw/0b1d451d266bce20921bbff3a74722610d604509/ScalaJSRewrites.scala&quot;]
imports.organize = false
imports.removeUnused = false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first line specifies that we want to apply the &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobal&lt;/code&gt; rewrite available &lt;a href=&quot;https://gist.github.com/sjrd/ef8bb7c52be1451b3a3b9bab6a187549&quot;&gt;in this gist&lt;/a&gt;, written by @olafurpg.&lt;/p&gt;

&lt;p&gt;The last two lines are optional, but provide minimal diffs, at the cost of some manual intervention on imports.
Consult &lt;a href=&quot;https://scalacenter.github.io/scalafix/&quot;&gt;the scalafix documentation&lt;/a&gt; for further details on those.&lt;/p&gt;

&lt;p&gt;Once that is done, simply run&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sbt scalafix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and enjoy the magic.
If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;-Xfatal-warnings&lt;/code&gt;, you may have to disable it to run &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt scalafix&lt;/code&gt;, and re-enable it afterwards.
Unless you do not use &lt;code class=&quot;highlighter-rouge&quot;&gt;imports.organize = false&lt;/code&gt;, you will then have to manually adjust your imports to your liking so that &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js.annotation.JSGlobal&lt;/code&gt; is imported.&lt;/p&gt;

&lt;p&gt;If you want a working example of this process, look at &lt;a href=&quot;https://github.com/scala-js/scala-js-dom/pull/277&quot;&gt;the PR on scalajs-dom&lt;/a&gt;, where we have successfully applied scalafix to the entire codebase.
The commits of the PR provide explanations of the steps we performed, so it’s good to look at them (not just the PR diff).&lt;/p&gt;

&lt;h3 id=&quot;jsexport-on-objects-and-classes-becomes-jsexporttoplevel&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; on objects and classes becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;To make a top-level class or object accessible to JavaScript, we previously used the &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; annotation, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;foo&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;so that they can be accessed from JavaScript as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fooObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// note the ()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;barObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Starting with 0.6.15, &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel&lt;/code&gt; should be used instead.
On &lt;em&gt;classes&lt;/em&gt;, it has exactly the same behavior as &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt;.
On &lt;em&gt;objects&lt;/em&gt; however, it directly exports the object, rather than a 0-arg function.
Moreover, at least for now, &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel&lt;/code&gt; always demands an explicit string argument.&lt;/p&gt;

&lt;p&gt;We would therefore update the previous example as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;foo&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo.Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and use it from JavaScript as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fooObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// note the absence of ()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;barObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If retaining the 0-arg function is desirable in your use case (so that you do not need to update the JavaScript code), you can do the following instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;foo&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo.Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsAccessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;this.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;migration-tips-1&quot;&gt;Migration tips&lt;/h4&gt;

&lt;p&gt;You can temporarily disable the deprecation warnings with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:suppressExportDeprecations&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will keep working in 0.6.x.&lt;/p&gt;

&lt;h4 id=&quot;about-jsjsapp&quot;&gt;About &lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt;, you need not change anything.
We have seen people do the following (both &lt;code class=&quot;highlighter-rouge&quot;&gt;extends js.JSApp&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is redundant.
You can safely remove the two &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt;s while leaving the behavior unchanged:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsexportdescendentclasses-and-jsexportdescendentobjects-are-deprecated-without-direct-replacement&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportDescendentClasses&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportDescendentObjects&lt;/code&gt; are deprecated without (direct) replacement&lt;/h3&gt;

&lt;p&gt;Those two annotations were basically only used by testing frameworks, to “reflectively” instantiate test classes and objects.
For this use case (and similar ones), read further below about the introduction of the Reflective Instantiation API.&lt;/p&gt;

&lt;h4 id=&quot;migration-tips-2&quot;&gt;Migration tips&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Are you maintaining a testing framework?&lt;/strong&gt;
If you use our &lt;code class=&quot;highlighter-rouge&quot;&gt;TestUtils.newInstance&lt;/code&gt; and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;TestUtils.loadModule&lt;/code&gt; methods to perform reflective instantiation of &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportDescendent...&lt;/code&gt; things, all you need to do is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;replace &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportDescendentClasses&lt;/code&gt; and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportDescendentObjects&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;@scala.scalajs.reflect.annotation.EnableReflectiveInstantiation&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;use the new overload of &lt;code class=&quot;highlighter-rouge&quot;&gt;TestUtils.newInstance&lt;/code&gt;, which uses an explicit list of formal parameters (&lt;code class=&quot;highlighter-rouge&quot;&gt;TestUtils.loadModule&lt;/code&gt; stays as it was)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also temporarily disable the deprecation warnings with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-P:scalajs:suppressExportDeprecations&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will keep working in 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;persistlauncher-is-deprecated-in-favor-of-scalajsusemainmoduleinitializer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;persistLauncher&lt;/code&gt; is deprecated in favor of &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSUseMainModuleInitializer&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The sbt plugin of Scala.js has been providing the &lt;code class=&quot;highlighter-rouge&quot;&gt;persistLauncher&lt;/code&gt; setting, to enable the automatic creation of a &lt;code class=&quot;highlighter-rouge&quot;&gt;-launcher.js&lt;/code&gt; file, which calls the main method of your application.
This convenient setting is being deprecated in favor of an even more convenient feature:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSUseMainModuleInitializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will include the call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; method (of a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt; object) directly inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;-fastopt.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-opt.js&lt;/code&gt; files produced by Scala.js.
No need for a &lt;code class=&quot;highlighter-rouge&quot;&gt;-launcher.js&lt;/code&gt; file at all anymore!&lt;/p&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;jsexportstatic&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportStatic&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;A long awaited feature was to be able to declare static methods and fields in Scala.js-defined JS classes.
This is now possible, with &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportStatic&lt;/code&gt;.
When defining a Scala.js-defined JS class, this annotation can be used on members &lt;em&gt;of its companion object&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExportStatic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@JSExportStatic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The members will be available as static members of &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;.
Assuming that &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; itself is exported to JavaScript (with &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel&lt;/code&gt;), then we can access these members as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 42&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;s, getters and setters can also be similarly exported as static.&lt;/p&gt;

&lt;h3 id=&quot;jssymbol-jsiterablea-and-jsiteratora&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Symbol&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Iterable[+A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Iterator[+A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The standard library now includes definitions for some new ECMAScript 2015 types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/latest/#scala.scalajs.js.Symbol&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Symbol&lt;/code&gt;&lt;/a&gt; represents a JavaScript primitive &lt;code class=&quot;highlighter-rouge&quot;&gt;symbol&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/latest/#scala.scalajs.js.Iterable&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Iterable[+A]&lt;/code&gt;&lt;/a&gt; is an abstract type for JavaScript objects that can be iterated with &lt;code class=&quot;highlighter-rouge&quot;&gt;for..of&lt;/code&gt;.
In Scala.js, they can be iterated using a normal &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; comprehension, as expected.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/latest/#scala.scalajs.js.Iterator&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Iterator[+A]&lt;/code&gt;&lt;/a&gt; is a JavaScript iterator, which is the result of the method &lt;code class=&quot;highlighter-rouge&quot;&gt;[Symbol.iterator]&lt;/code&gt; of iterables.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jsname-accepts-javascript-symbols&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName&lt;/code&gt; accepts JavaScript symbols&lt;/h3&gt;

&lt;p&gt;In JavaScript types (extending &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Any&lt;/code&gt;, both native and non-native), members can be annotated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName(&quot;someName&quot;)&lt;/code&gt; to specify their JavaScript name, if it needs to be different than the Scala name.
With this release, &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName&lt;/code&gt; has been augmented to also accept a reference to a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Symbol&lt;/code&gt;.
This is useful/necessary to declare members whose “name” are JavaScript symbols.&lt;/p&gt;

&lt;p&gt;For example, one can define a custom JavaScript iterable (which needs to implement a method &lt;code class=&quot;highlighter-rouge&quot;&gt;[Symbol.iterator]&lt;/code&gt;) as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SingletonIterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;+A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onlyItem&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Iterator.Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onlyItem&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;An object of that class can be iterated in JavaScript with a &lt;code class=&quot;highlighter-rouge&quot;&gt;for..of&lt;/code&gt; loop:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someSingletonIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// displays once the `onlyItem`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsexporttoplevel-for-fields&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel&lt;/code&gt; for fields&lt;/h3&gt;

&lt;p&gt;In addition to being able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel&lt;/code&gt; on methods, which was introduced in 0.6.14, as well as on &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;es as described above, &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel&lt;/code&gt; can also be used on fields (&lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;s) to export top-level variables to JavaScript.
For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;exports &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;foobar&lt;/code&gt; to the top-level, so that they can be used from JavaScript as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 42&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;hello&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you emit a CommonJS module, the variables are fields of the module instance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ScalaJSModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo-fastopt.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ScalaJSModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 42&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ScalaJSModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;hello&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that for &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;s, the JavaScript binding is &lt;em&gt;read-only&lt;/em&gt;, i.e., JavaScript code cannot assign a new value to an exported &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;.
However, if Scala.js code sets &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo.foobar&lt;/code&gt;, the new value will be visible from JavaScript.
This is consistent with exporting a &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; binding in ECMAScript 2015 modules, which guided our design.&lt;/p&gt;

&lt;h3 id=&quot;reflective-instantiation-api&quot;&gt;Reflective Instantiation API&lt;/h3&gt;

&lt;p&gt;When we examined the uses of &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportDescendentClasses&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportDescendentObjects&lt;/code&gt; found in the wild, we noticed that every time, they were used as a hack to “reflectively” instantiate classes or load objects.
No wonder, since we, the core team, showed the world how to do this for testing frameworks!&lt;/p&gt;

&lt;p&gt;In this release, we have added an official, principled API to do so.
The new API is more reliable and powerful, especially for classes inside objects, as well as classes with overloaded constructors.&lt;/p&gt;

&lt;p&gt;Reflective instantiation is still not enabled by default for all classes in the world (as that would completely inhibit dead code elimination).
Used on a trait, class or object, the annotation &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableReflectiveInstantiation&lt;/code&gt; enables reflective instantiation for all the non-abstract classes and all the objects inheriting from the annotated entity.
Afterwards, it is possible to use the API in &lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/latest/#scala.scalajs.reflect.Reflect$&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.reflect.Reflect&lt;/code&gt;&lt;/a&gt; to instantiate those classes and/or load those objects.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;foo&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.reflect.annotation.EnableReflectiveInstantiation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.reflect.Reflect&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@EnableReflectiveInstantiation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WithReflInstantiation&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foobar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WithReflInstantiation&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomeReflInstantiation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WithReflInstantiation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo.Foobar&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiatableClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookupInstantiatableClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiatableClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WithReflInstantiation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;new-jdk-parts&quot;&gt;New JDK parts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2739&quot;&gt;#2739&lt;/a&gt; Some methods of &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.{Float,Double}&lt;/code&gt; from JDK 8&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2764&quot;&gt;#2764&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.io.DataOutputStream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.15:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2708&quot;&gt;#2708&lt;/a&gt; fastOptJS code not working in JavaScriptCore (JSC)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2712&quot;&gt;#2712&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ScalaRunTime.isArray&lt;/code&gt; is buggy for instances of JavaScript classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2737&quot;&gt;#2737&lt;/a&gt; Failure when accessing protected buf in &lt;code class=&quot;highlighter-rouge&quot;&gt;ByteArrayOutputStream&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2755&quot;&gt;#2755&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.math.BigDecimal.divide&lt;/code&gt; fails when used with a scale and rounding mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.15+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.14</title>
   <link href="https://www.scala-js.org/news/2016/12/21/announcing-scalajs-0.6.14/"/>
   <updated>2016-12-21T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2016/12/21/announcing-scalajs-0.6.14</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.6.14!&lt;/p&gt;

&lt;p&gt;This release features a few language enhancements for interoperability.
Among others, it allows to export top-level functions, and provides language support for JavaScript “configuration objects”.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from Scala.js 0.6.12 or earlier, make sure to read &lt;a href=&quot;/news/2016/10/17/announcing-scalajs-0.6.13/&quot;&gt;the release notes of 0.6.13&lt;/a&gt;, which contain some breaking changes in sbt build definitions.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.14 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.14 without change.
However, it is not forward compatible: libraries compiled with 0.6.14 cannot be used by projects using 0.6.{0-13}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;javascript-configuration-objects&quot;&gt;JavaScript configuration objects&lt;/h2&gt;

&lt;p&gt;Many JavaScript libraries expose APIs where options are given in what we call configuration objects.
A well-known example would be the &lt;a href=&quot;http://api.jquery.com/jquery.ajax/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.ajax()&lt;/code&gt;&lt;/a&gt; function of jQuery, which we can declare as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JQueryAjaxSettings&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Object&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crossDomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Function3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;JQueryXHR&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JQueryAjaxSettings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JQueryXHR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;s need to be declared abstract because, in previous versions of Scala.js, &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; traits could not have concrete members.
This makes it tedious to create an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;JQueryAjaxSettings&lt;/code&gt;, since the Scala type system forces us to fill them in, although the fields are optional in JavaScript.
Previous workarounds include a) using &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dynamic.literal(...).asInstanceOf[JQueryAjaxSettings]&lt;/code&gt; or b) using &lt;a href=&quot;https://github.com/jducoeur/jsext#jsoptionbuilder&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSOptionBuilder&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Scala.js 0.6.14 finally provides language support for this kind of API.
It is now allowed to have concrete members in &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; traits, &lt;em&gt;if&lt;/em&gt; their right-hand-side is &lt;code class=&quot;highlighter-rouge&quot;&gt;= js.undefined&lt;/code&gt; (this implies that their type must be a supertype of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[Nothing]&lt;/code&gt;).
With this relaxed rule, we can define &lt;code class=&quot;highlighter-rouge&quot;&gt;JQueryAjaxSettings&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JQueryAjaxSettings&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.UndefOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;js.Object&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.UndefOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crossDomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.UndefOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.UndefOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;js.Function3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;JQueryXHR&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When calling &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax()&lt;/code&gt;, we can now give an anonymous object that overrides only the &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;s we care about:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JQueryAjaxSettings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crossDomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.UndefOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.UndefOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;js.Function3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;JQueryXHR&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textStatus&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JQueryXHR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Status: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that for functions, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;js.defined { ... }&lt;/code&gt; to drive Scala’s type inference.
Otherwise, it needs to apply two implicit conversions, which is not allowed.&lt;/p&gt;

&lt;p&gt;The explicit types are still quite annoying, but they are only necessary in Scala 2.10 and 2.11.
If you use Scala 2.12, you can omit all the type annotations (but keep &lt;code class=&quot;highlighter-rouge&quot;&gt;js.defined&lt;/code&gt;), thanks to improved type inference for &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;s and SAM conversions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JQueryAjaxSettings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crossDomain&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Status: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;export-top-level-functions&quot;&gt;Export top-level functions&lt;/h2&gt;

&lt;p&gt;In Scala.js 0.6.13 and earlier, the only way to export something resembling a top-level function was to export the method and its enclosing object, as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, this requires to call it as &lt;code class=&quot;highlighter-rouge&quot;&gt;Main().main()&lt;/code&gt; from JavaScript, which shows that it is not actually a top-level function.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.14, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel&lt;/code&gt; annotation instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExportTopLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;which allows to call &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; from JavaScript.
&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportTopLevel&lt;/code&gt; methods must be declared in top-level &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;s.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.14:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2587&quot;&gt;#2587&lt;/a&gt; Incorrect result for &lt;code class=&quot;highlighter-rouge&quot;&gt;BigDecimal&lt;/code&gt; multiplication (corner case)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2639&quot;&gt;#2639&lt;/a&gt; The linker should refuse to build if &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; is used with &lt;code class=&quot;highlighter-rouge&quot;&gt;NoModule&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2640&quot;&gt;#2640&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeoutException&lt;/code&gt; when running PhantomJS with macOS Sierra&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2643&quot;&gt;#2643&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;js.ThisFunction&lt;/code&gt; passing Scala-&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; instead of JS-&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; when using Scala 2.12.0&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2655&quot;&gt;#2655&lt;/a&gt; Inconsistent behavior in &lt;code class=&quot;highlighter-rouge&quot;&gt;NumericRange.min&lt;/code&gt; method between JVM and JS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2689&quot;&gt;#2689&lt;/a&gt; The optimizer does something wrong with &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; inside &lt;code class=&quot;highlighter-rouge&quot;&gt;finally&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.14+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.13</title>
   <link href="https://www.scala-js.org/news/2016/10/17/announcing-scalajs-0.6.13/"/>
   <updated>2016-10-17T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2016/10/17/announcing-scalajs-0.6.13</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.6.13!&lt;/p&gt;

&lt;p&gt;This release contains one particularly anticipated feature: the ability to generate CommonJS modules with Scala.js!
It also standardizes on Node.js as the default runner for all sbt projects (with &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt test&lt;/code&gt;), which constitutes a breaking change for builds.
Read on for more details!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;As a minor release, 0.6.13 is backward source and binary compatible with previous releases in the 0.6.x series, although &lt;em&gt;build&lt;/em&gt; definitions are not.
Libraries compiled with earlier versions can be used with 0.6.13 without change.
However, it is not forward compatible: libraries compiled with 0.6.13 cannot be used by projects using 0.6.{0-12}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;

&lt;p&gt;This release changes the default JavaScript interpreters used to perform &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt test&lt;/code&gt;.
Until 0.6.12 (and since 0.6.6), the defaults were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rhino by default&lt;/li&gt;
  &lt;li&gt;Node.js with &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSUseRhino in Global := false&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;PhantomJS with &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSUseRhino in Global := false&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies += RuntimeDOM&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The new defaults are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Node.js by default&lt;/li&gt;
  &lt;li&gt;Node.js + &lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jsdom&lt;/code&gt;&lt;/a&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies += RuntimeDOM&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that Node.js and jsdom need to be installed separately on your system.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Download Node.js here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install jsdom with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install jsdom&lt;/code&gt; (either in your project’s root directory, or &lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-npm-packages-globally&quot;&gt;globally&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We decided to standardize on Node.js for all command-line executions by default because it is always the best alternative.
Rhino is extremely slow.
Although using it by default works out-of-the-box, it caused a number of users to stick to it and discovering months or years later that their tests could run 10x-100x faster by switching to Node.js.
PhantomJS, on the other hand, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1881&quot;&gt;reportedly suffers from significant issues&lt;/a&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;jsdom&lt;/code&gt; seems to be better maintained at this point.&lt;/p&gt;

&lt;p&gt;You can restore the previous behaviors with the following sbt settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rhino: &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSUseRhino in Global := true&lt;/code&gt;.
Rhino is however &lt;em&gt;deprecated&lt;/em&gt;, and will not be supported anymore in 1.0.0.&lt;/li&gt;
  &lt;li&gt;PhantomJS: &lt;code class=&quot;highlighter-rouge&quot;&gt;jsEnv := PhantomJSEnv().value&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember that you can also use Selenium with Scala.js, using &lt;a href=&quot;https://github.com/scala-js/scala-js-env-selenium&quot;&gt;scalajs-env-selenium&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;deprecation-jsglobalscope-replaces-extends-jsglobalscope&quot;&gt;Deprecation: &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobalScope&lt;/code&gt; replaces &lt;code class=&quot;highlighter-rouge&quot;&gt;extends js.GlobalScope&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;As indicated by a deprecation warning, &lt;code class=&quot;highlighter-rouge&quot;&gt;extends js.GlobalScope&lt;/code&gt; should not be used anymore.
Instead, you should annotate the object with &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSGlobalScope&lt;/code&gt;.
For example, this old snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GlobalScope&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;should be replaced with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.annotation._&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSGlobalScope&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;jsimport-and-emitting-commonjs-modules&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; and emitting CommonJS modules&lt;/h2&gt;

&lt;p&gt;This is a long-awaited feature!
Scala.js can now emit CommonJS modules (i.e., those used by Node.js, as well as several bundlers).&lt;/p&gt;

&lt;h3 id=&quot;enabling-commonjs-module&quot;&gt;Enabling CommonJS module&lt;/h3&gt;

&lt;p&gt;You can enable emission of a CommonJS module with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSModuleKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModuleKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CommonJSModule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When emitting a CommonJS module, top-level &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt;ed classes and objects are stored in the &lt;code class=&quot;highlighter-rouge&quot;&gt;exports&lt;/code&gt; object, so that they can be required from other CommonJS modules.&lt;/p&gt;

&lt;p&gt;Obviously, this requires that you use Node.js for &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt test&lt;/code&gt; (should you use them at all), and that you use a JavaScript bundler such as &lt;a href=&quot;https://webpack.github.io/docs/&quot;&gt;Webpack&lt;/a&gt; to create a bundle fit for use in the browser.
At the moment, Scala.js does not provide any facility to do so.&lt;/p&gt;

&lt;p&gt;Emitting CommonJS modules is also not compatible with &lt;code class=&quot;highlighter-rouge&quot;&gt;persistLauncher := true&lt;/code&gt;, as a different launcher needs to be emitted for fastOpt versus fullOpt.&lt;/p&gt;

&lt;p&gt;You can find more information on module support &lt;a href=&quot;/doc/project/module.html&quot;&gt;in the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;importing-stuff-from-other-commonjs-modules&quot;&gt;Importing stuff from other CommonJS modules&lt;/h3&gt;

&lt;p&gt;To import other CommonJS modules from Scala.js, you should use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; (&lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.13/#scala.scalajs.js.annotation.JSImport&quot;&gt;Scaladoc&lt;/a&gt;).
Semantically speaking, &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;ECMAScript 2015 import&lt;/a&gt;, but Scala.js desugars it into a CommonJS &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;.
Let us see an example first:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.annotation._&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ES6:      import { Foo } from &quot;bar.js&quot;
// CommonJS: var Foo = require(&quot;bar.js&quot;).Foo;
&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foobaz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foobaz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the module exports top-level functions or variables, you should create an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; representing the module itself, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ES6:      import * as bar from &quot;bar.js&quot;
// CommonJS: var bar = require(&quot;bar.js&quot;);
&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bar.aFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that importing with &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; is completely incompatible with the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; mechanism.
If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt;, you have to manage your JavaScript dependencies on your own (possibly through &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You can find more information on &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSImport&lt;/code&gt; &lt;a href=&quot;/doc/interoperability/facade-types.html#import&quot;&gt;in the facade types documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;new-java-libraries&quot;&gt;New Java libraries&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Timer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.concurrent.atomic.AtomicLongArray&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.io.DataInputStream&lt;/code&gt; (was already available with &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-javalib-ex&lt;/code&gt;, but is now available by default)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in 0.6.13:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2592&quot;&gt;#2592&lt;/a&gt; Yet another String.split() inconcistency&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2598&quot;&gt;#2598&lt;/a&gt; FrameworkDetector swallows the stderr output of the JS env&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2602&quot;&gt;#2602&lt;/a&gt; Linker thinks it’s used concurrently when in fact it’s been made invalid after an exception&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2603&quot;&gt;#2603&lt;/a&gt; Inner def with default param in a Scala.js-defined JS class produces invalid IR&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2625&quot;&gt;#2625&lt;/a&gt; Outer pointer checks fail in 2.12 (not fixed in 2.12.0-RC1)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2382&quot;&gt;#2382&lt;/a&gt; Name clash for $outer pointers of two different nesting levels, only for 2.12.0-RC2 onwards (not fixed in 2.10, 2.11, nor 2.12.0-RC1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/milestone/41?closed=1&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.12</title>
   <link href="https://www.scala-js.org/news/2016/09/01/announcing-scalajs-0.6.12/"/>
   <updated>2016-09-01T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2016/09/01/announcing-scalajs-0.6.12</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.12!&lt;/p&gt;

&lt;p&gt;This release exclusively contains bug fixes, and a few internal changes to support the upcoming Scala 2.12.0-RC1.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from 0.6.5 or earlier, please also read the &lt;a href=&quot;/news/2016/01/25/announcing-scalajs-0.6.6/&quot;&gt;release notes of 0.6.6&lt;/a&gt;, which contains some breaking changes.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.12 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.12 without change.
0.6.12 is also forward binary compatible with 0.6.8 through 0.6.11, but not with earlier releases: libraries compiled with 0.6.12 cannot be used by projects using 0.6.{0-7}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;potentially-breaking-change&quot;&gt;Potentially breaking change&lt;/h2&gt;

&lt;p&gt;This release fixes &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2573&quot;&gt;#2573&lt;/a&gt;, which potentially constitutes a breaking change, if you relied on the previously buggy behavior.
Until Scala.js 0.6.11, the behavior of &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.regex.Pattern.split()&lt;/code&gt; (and consequently &lt;code class=&quot;highlighter-rouge&quot;&gt;String.split()&lt;/code&gt;) was aligned with the behavior of the JDK 7.
The fix for &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2573&quot;&gt;#2573&lt;/a&gt; changes this behavior to align with the JDK 8.
This will change the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;split()&lt;/code&gt; when a zero-width separator is matched at the beginning of the string.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;The following bugs have been fixed in 0.6.12:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2547&quot;&gt;#2547&lt;/a&gt; Overriding a JS native method with default parameters leads to &lt;code class=&quot;highlighter-rouge&quot;&gt;AssertionError&lt;/code&gt; in the compiler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2553&quot;&gt;#2553&lt;/a&gt; Constructing a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; from a large byte array throws “Maximum call stack size exceeded”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2554&quot;&gt;#2554&lt;/a&gt; Wrong codegen in the presence of pattern match + boxed value class&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2559&quot;&gt;#2559&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Throwable&lt;/code&gt; constructor with cause should use the cause’s message&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2565&quot;&gt;#2565&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Date.toString()&lt;/code&gt; result is missing dd part&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2573&quot;&gt;#2573&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;split(&quot;&quot;)&lt;/code&gt; is not identical to JVM split&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.12+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.11</title>
   <link href="https://www.scala-js.org/news/2016/07/27/announcing-scalajs-0.6.11/"/>
   <updated>2016-07-27T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2016/07/27/announcing-scalajs-0.6.11</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.11!&lt;/p&gt;

&lt;p&gt;This release was mainly focused on optimizations.
In particular, &lt;code class=&quot;highlighter-rouge&quot;&gt;Long&lt;/code&gt;s have been dramatically improved, with up to 15x speedups (&lt;a href=&quot;https://github.com/scala-js/scala-js/pull/2488&quot;&gt;#1488&lt;/a&gt;).
Some operations on &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt;s benefit a lot from this, with up to 8x speedups.&lt;/p&gt;

&lt;p&gt;We have also finally upgraded the version of the Google Closure Compiler that is used for &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptJS&lt;/code&gt;, which brings speed improvements to the production applications of up to 2x, although mostly in the 10-15% range (&lt;a href=&quot;https://github.com/scala-js/scala-js/pull/2490#issuecomment-234492628&quot;&gt;#2490&lt;/a&gt;).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from 0.6.5 or earlier, please also read the &lt;a href=&quot;/news/2016/01/25/announcing-scalajs-0.6.6/&quot;&gt;release notes of 0.6.6&lt;/a&gt;, which contains some breaking changes.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.11 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.11 without change.
0.6.11 is also forward binary compatible with 0.6.8 through 0.6.10, but not with earlier releases: libraries compiled with 0.6.11 cannot be used by projects using 0.6.{0-7}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;potentially-breaking-change&quot;&gt;Potentially breaking change&lt;/h2&gt;

&lt;p&gt;This release fixes &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2445&quot;&gt;#2445&lt;/a&gt;, which potentially constitutes a breaking change, if you relied on the previously buggy behavior.
Recall that, in JavaScript types and exports, &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;s without parentheses are JavaScript &lt;em&gt;getters&lt;/em&gt;.
For example,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeArray&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The bug &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2445&quot;&gt;#2445&lt;/a&gt; was that, if &lt;code class=&quot;highlighter-rouge&quot;&gt;makeArray&lt;/code&gt; was defined with type parameters, it would erroneously translate to a &lt;em&gt;method call&lt;/em&gt; in JavaScript, rather than a &lt;em&gt;field access/getter call&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gave&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;because&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2445&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2445&quot;&gt;#2445&lt;/a&gt; is fixed, the last instruction correctly calls &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.makeArray&lt;/code&gt; without parentheses.&lt;/p&gt;

&lt;p&gt;If you were relying on the previously buggy behavior (i.e., it was correct in your case to have &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.makeArray()&lt;/code&gt;), your code will break in this release.
The solution in that case is to add &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt; at the definition site of &lt;code class=&quot;highlighter-rouge&quot;&gt;makeArray&lt;/code&gt;, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;deprecating-jsexportnamed&quot;&gt;Deprecating &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportNamed&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The annotation &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportNamed&lt;/code&gt; was deprecated, per &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2442&quot;&gt;#2442&lt;/a&gt;.
Refer &lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.11/#scala.scalajs.js.annotation.JSExportNamed&quot;&gt;to its Scaladoc&lt;/a&gt; for migration tips.&lt;/p&gt;

&lt;h2 id=&quot;improvements-to-the-html-test-runners&quot;&gt;Improvements to the HTML test runners&lt;/h2&gt;

&lt;p&gt;In 0.6.10, &lt;a href=&quot;/news/2016/06/17/announcing-scalajs-0.6.10/&quot;&gt;we introduced HTML test runners&lt;/a&gt;.
This release brings a few improvements to them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/pull/2476&quot;&gt;#2476&lt;/a&gt; The outputs are grouped by test suite, in collapsible boxes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2481&quot;&gt;#2481&lt;/a&gt; Failed tests are moved to the top of the UI&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2475&quot;&gt;#2475&lt;/a&gt; It is possible to filter the set of tests to run, for a quicker turnaround when debugging a few issues&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;clean-way-to-find-the-map-file-associated-to-fastoptjsfulloptjs&quot;&gt;Clean way to find the &lt;code class=&quot;highlighter-rouge&quot;&gt;.map&lt;/code&gt; file associated to &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptJS&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Previously, to find the source map file (&lt;code class=&quot;highlighter-rouge&quot;&gt;.map&lt;/code&gt;) associated to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; file produced by &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptJS&lt;/code&gt;, it was necessary to compute it by hand, by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;.map&lt;/code&gt; to the file name.
This was not very clean.&lt;/p&gt;

&lt;p&gt;We have improved this in &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2494&quot;&gt;#2494&lt;/a&gt;.
Now, you can access the source map file to an attribute of the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptJS&lt;/code&gt;.
For example,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastOptAttrFile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastOptJS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastOptFile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastOptAttrFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the .js file
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastOptSourceMapFile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastOptAttrFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSourceMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;new-jdk-apis&quot;&gt;New JDK APIs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/pull/2507&quot;&gt;#2507&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Optional&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/pull/2533&quot;&gt;#2533&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.EventObject&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2471&quot;&gt;#2471&lt;/a&gt; The &lt;code class=&quot;highlighter-rouge&quot;&gt;BufferedReader&lt;/code&gt; implementation does not close its underlying &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2474&quot;&gt;#2474&lt;/a&gt; 2+ top-level exports with the same name cause trouble at run-time&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2491&quot;&gt;#2491&lt;/a&gt; Name clash in some cases after renaming by the Closure Compiler in &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2512&quot;&gt;#2512&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Arrays.asList()&lt;/code&gt; cannot be called&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2513&quot;&gt;#2513&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; does not work for abstract &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2539&quot;&gt;#2539&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.ConcurrentHashMap.putIfAbsent()&lt;/code&gt; is wrong&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2445&quot;&gt;#2445&lt;/a&gt; Paren-free &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;’s with type-parameters are handled as a function in &lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; traits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.11+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.10</title>
   <link href="https://www.scala-js.org/news/2016/06/17/announcing-scalajs-0.6.10/"/>
   <updated>2016-06-17T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2016/06/17/announcing-scalajs-0.6.10</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.10!&lt;/p&gt;

&lt;p&gt;This release is mostly a bug-fix release.
It also contains further adaptations to support the upcoming Scala 2.12.0-M5.&lt;/p&gt;

&lt;p&gt;The most important improvement is that the sbt plugin can now generate HTML pages to run your test suites in browsers (with any testing framework), so that you can use your browser’s debugger to step through your tests.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from 0.6.5 or earlier, please also read the &lt;a href=&quot;/news/2016/01/25/announcing-scalajs-0.6.6/&quot;&gt;release notes of 0.6.6&lt;/a&gt;, which contains some breaking changes.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.10 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.10 without change.
0.6.10 is also forward binary compatible with 0.6.8 and 0.6.9, but not with earlier releases: libraries compiled with 0.6.10 cannot be used by projects using 0.6.{0-7}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;html-test-runners&quot;&gt;HTML test runners&lt;/h2&gt;

&lt;p&gt;You already know that you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; task of sbt to run your unit tests in Rhino, Node.js, PhantomJS or even Selenium.
All these runners however lack friendly, graphical debbugers.
In Scala.js 0.6.10, we have enhanced the sbt plugin with two new tasks &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testHtmlFullOpt&lt;/code&gt;.
These tasks generate an HTML file which, when opened in a web browser, will run your test suite within the browser.
From there, you can use your browser’s debugger.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2314&quot;&gt;#2314&lt;/a&gt; Infinite loop in &lt;code class=&quot;highlighter-rouge&quot;&gt;BigDecimal.isValidLong&lt;/code&gt; (again)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2376&quot;&gt;#2376&lt;/a&gt; PhantomJSEnv does not properly escape JS code in webpage (duplicate &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2279&quot;&gt;#2279&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2322&quot;&gt;#2322&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2368&quot;&gt;#2368&lt;/a&gt; RhinoJSEnv does not support setTimeout without second argument&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2333&quot;&gt;#2333&lt;/a&gt; The JUnit runner does not report failures as events, causing &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt test&lt;/code&gt; to erroneously succeed&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2392&quot;&gt;#2392&lt;/a&gt; java.util.Date should have method getTimezoneOffset&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2400&quot;&gt;#2400&lt;/a&gt; java.util.Arrays.sort is not stable&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2401&quot;&gt;#2401&lt;/a&gt; Allow native objects in package objects without @JSName&lt;/li&gt;
  &lt;li&gt;A number of discrepancies with the way our implementation of JUnit was logging its output wrt. the JVM reference&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.10+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.9</title>
   <link href="https://www.scala-js.org/news/2016/04/30/announcing-scalajs-0.6.9/"/>
   <updated>2016-04-30T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2016/04/30/announcing-scalajs-0.6.9</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.9!&lt;/p&gt;

&lt;p&gt;This release was mostly focused on ironing out the support of Scala 2.12.0-M4 and the upcoming M5.
All users of 2.12.0-M4 are highly encouraged to upgrade to Scala.js 0.6.9.
The release also contains a few bug fixes, as well as the following improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2009&quot;&gt;#2009&lt;/a&gt; No own class for anonymous Scala.js-defined JS classes (see below)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2350&quot;&gt;#2350&lt;/a&gt; A read-only sbt setting &lt;code class=&quot;highlighter-rouge&quot;&gt;isScalaJSProject&lt;/code&gt; which is &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; iff the current project is a Scala.js project&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from 0.6.5 or earlier, please also read the &lt;a href=&quot;/news/2016/01/25/announcing-scalajs-0.6.6/&quot;&gt;release notes of 0.6.6&lt;/a&gt;, which contains some breaking changes.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.9 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.9 without change.
0.6.9 is also forward binary compatible with 0.6.8, but not with earlier releases: libraries compiled with 0.6.9 cannot be used by projects using 0.6.{0-7}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;no-own-class-for-anonymous-scalajs-defined-js-classes&quot;&gt;No own class for anonymous Scala.js-defined JS classes&lt;/h2&gt;

&lt;p&gt;The language proposal &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2009&quot;&gt;#2009&lt;/a&gt; was implemented in this release.
In a nutshell, consider this snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The previous language specification and implementation would create an anonymous &lt;em&gt;class&lt;/em&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;new Point {...}&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; would be an instance of that class.
This has two major disadvantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It consumes a lot of code to define the class&lt;/li&gt;
  &lt;li&gt;Some libraries can refuse to treat &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; as a “plain old JavaScript object” because its class is not &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; itself, but a subclass (see &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2006&quot;&gt;#2006&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The new specification guarantees that &lt;code class=&quot;highlighter-rouge&quot;&gt;new Point {...}&lt;/code&gt; will not create a new class.
Instead, it will intuitively correspond to the following JavaScript code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the superclass js.Object of Point&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In other words, fields (and methods) of the anonymous class are directly assigned on the created object.&lt;/p&gt;

&lt;p&gt;For the complete semantic reference, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2009&quot;&gt;read the proposal&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2320&quot;&gt;#2320&lt;/a&gt; Objects extending &lt;code class=&quot;highlighter-rouge&quot;&gt;js.GlobalScope&lt;/code&gt; should not allow &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName&lt;/code&gt; (potentially breaking change if you have &lt;code class=&quot;highlighter-rouge&quot;&gt;-Xfatal-warnings&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2319&quot;&gt;#2319&lt;/a&gt; Objects extending &lt;code class=&quot;highlighter-rouge&quot;&gt;js.GlobalScope&lt;/code&gt; inside objects are allowed but require &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName&lt;/code&gt; annotation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2314&quot;&gt;#2314&lt;/a&gt; Infinite loop in &lt;code class=&quot;highlighter-rouge&quot;&gt;BigDecimal.isValidLong&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2333&quot;&gt;#2333&lt;/a&gt; The JUnit runner does not report failures as events, causing &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt test&lt;/code&gt; to erroneously succeed&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2345&quot;&gt;#2345&lt;/a&gt; Different &lt;code class=&quot;highlighter-rouge&quot;&gt;hashCode&lt;/code&gt; in JS and JVM for case class with big &lt;code class=&quot;highlighter-rouge&quot;&gt;Long&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2358&quot;&gt;#2358&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ProvidedJS&lt;/code&gt; requires OS dependent path separator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.9+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.8</title>
   <link href="https://www.scala-js.org/news/2016/03/18/announcing-scalajs-0.6.8/"/>
   <updated>2016-03-18T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2016/03/18/announcing-scalajs-0.6.8</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.8!&lt;/p&gt;

&lt;p&gt;This release is mostly a bugfix release.
The most important changes are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fixed &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2243&quot;&gt;#2243&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;-jsdeps.min.js&lt;/code&gt; not produced anymore after upgrading from 0.6.5 to 0.6.6 and 0.6.7&lt;/li&gt;
  &lt;li&gt;Upgrade the implementation of the standard library to Scala 2.11.8&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2238&quot;&gt;#2238&lt;/a&gt; Drop support for ES6 Strong Mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This release also contains important although invisible changes to prepare for Scala 2.12.0-M4, which &lt;a href=&quot;https://github.com/scala/scala/pull/5003&quot;&gt;will start using default methods&lt;/a&gt; to encode traits.
This required substantial changes in Scala.js.
Although most of the work was done in earlier releases of Scala.js, 0.6.8 is the first version that should be able to support Scala 2.12.0-M4.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from 0.6.5 or earlier, please also read the &lt;a href=&quot;/news/2016/01/25/announcing-scalajs-0.6.6/&quot;&gt;release notes of 0.6.6&lt;/a&gt;, which contains some breaking changes.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.8 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.8 without change.
However, it is not forward compatible: libraries compiled with 0.6.8 cannot be used by projects using 0.6.{0-7}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;drop-support-for-es6-strong-mode&quot;&gt;Drop support for ES6 Strong Mode&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&quot;/news/2015/05/12/announcing-scalajs-0.6.3/&quot;&gt;Scala.js 0.6.3&lt;/a&gt;, we had introduced experimental support for &lt;a href=&quot;https://developers.google.com/v8/experiments&quot;&gt;ES6 Strong Mode&lt;/a&gt;, a proposal of the V8 team.
Since the Strong Mode experiment &lt;a href=&quot;https://groups.google.com/forum/#!topic/strengthen-js/ojj3TDxbHpQ&quot;&gt;has been discontinued by V8&lt;/a&gt;, we have removed the Strong Mode support from Scala.js 0.6.8.&lt;/p&gt;

&lt;p&gt;The sbt setting&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scalaJSOutputMode := OutputMode.ECMAScript6StrongMode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is therefore deprecated, and has the same behavior as &lt;code class=&quot;highlighter-rouge&quot;&gt;ECMAScript6&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;new-java-libraries&quot;&gt;New Java libraries&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Properties&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;System.getProperties()&lt;/code&gt; and friends, along with support for &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; options in the sbt setting &lt;code class=&quot;highlighter-rouge&quot;&gt;javaOptions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed in this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2226&quot;&gt;#2226&lt;/a&gt; JSEnv timeouts start too early&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2243&quot;&gt;#2243&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;-jsdeps.min.js&lt;/code&gt; not produced anymore after upgrading from 0.6.5 to 0.6.6 and 0.6.7&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.8+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.7</title>
   <link href="https://www.scala-js.org/news/2016/02/12/announcing-scalajs-0.6.7/"/>
   <updated>2016-02-12T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2016/02/12/announcing-scalajs-0.6.7</id>
   <content type="html">&lt;p&gt;We are pleased to announce the release of Scala.js 0.6.7!&lt;/p&gt;

&lt;p&gt;This release is almost exclusively a bugfix release, after some critical regressions regarding the sbt plugin in Scala.js 0.6.6.
In particular, it fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2195&quot;&gt;#2195&lt;/a&gt; Source maps to the Scala standard library are broken&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2198&quot;&gt;#2198&lt;/a&gt; “Illegal classpath entry: &lt;non existent=&quot;&quot; path=&quot;&quot;&gt;&quot; after upgrading from 0.6.5 to 0.6.6&lt;/non&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2202&quot;&gt;#2202&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2219&quot;&gt;#2219&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;AssertionError&lt;/code&gt; while linking in client/server projects&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2222&quot;&gt;#2222&lt;/a&gt; Huge performance regression of the optimizer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides bug fixes, this release brings a few improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.7/#scala.scalajs.js.Promise&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Promise&lt;/code&gt;&lt;/a&gt; and its conversions to/from &lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Proper stack traces for &lt;code class=&quot;highlighter-rouge&quot;&gt;Throwable&lt;/code&gt;s in Node.js&lt;/li&gt;
  &lt;li&gt;Support for Scala cross-version source directories in &lt;code class=&quot;highlighter-rouge&quot;&gt;shared/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;If upgrading from 0.6.5 or earlier, please also read the &lt;a href=&quot;/news/2016/01/25/announcing-scalajs-0.6.6/&quot;&gt;release notes of 0.6.6&lt;/a&gt;, which contains some breaking changes.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.7 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.7 without change.
0.6.7 is also forward binary compatible with 0.6.6, but not with earlier releases: libraries compiled with 0.6.7 cannot be used by projects using 0.6.{0-5}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;In addition to the important bug fixes mentioned above, the following bugs have been fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2228&quot;&gt;#2228&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInt(&quot;+100000000&quot;)&lt;/code&gt; crashes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2220&quot;&gt;#2220&lt;/a&gt; Compiler crash in 2.12 with a lambda inside a Scala.js-defined JS class&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2217&quot;&gt;#2217&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;this[&quot;require&quot;]()&lt;/code&gt; and fastOptJS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2197&quot;&gt;#2197&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName&lt;/code&gt; fails for field in trait&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.7+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.6</title>
   <link href="https://www.scala-js.org/news/2016/01/25/announcing-scalajs-0.6.6/"/>
   <updated>2016-01-25T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2016/01/25/announcing-scalajs-0.6.6</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.6.6!&lt;/p&gt;

&lt;p&gt;It has been a long while since the last release, almost 5 months already.
That was too long, and we apologize.
In the future, we hope never to let more than 2 months elapse between consecutive releases.&lt;/p&gt;

&lt;p&gt;Besides bug fixes, this release brings several major improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.TupleN&lt;/code&gt;, a JS equivalent of Scala tuples&lt;/li&gt;
  &lt;li&gt;Support for JUnit&lt;/li&gt;
  &lt;li&gt;Better support of constructors of &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; classes:
they can now have overloads, default parameters and varargs&lt;/li&gt;
  &lt;li&gt;A completely redesigned internal API for the linker, whose main visible impact should be reduced memory usage and improved speed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.ConstructorTag[C]&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassTag&lt;/code&gt; equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf[C]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;As a minor release, 0.6.6 is (almost, see Breaking changes below) backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.6 without change.
However, it is not forward compatible: libraries compiled with 0.6.6 cannot be used by projects using 0.6.{0-5}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;

&lt;h3 id=&quot;running-in-nodejsphantomjs&quot;&gt;Running in Node.js/PhantomJS&lt;/h3&gt;

&lt;p&gt;Until Scala.js 0.6.5, the following sbt setting would, as a side-effect, enable Node.js or PhantomJS:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As of Scala.js 0.6.6, this setting is redundant, as it is the default, but &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; will still use Rhino by default!
To disable Rhino and use Node.js/PhantomJS in 0.6.6, use the following setting instead:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scalaJSUseRhino in Global := false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tools-api&quot;&gt;Tools API&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.scala-js.org/api/scalajs-tools/0.6.6/#org.scalajs.core.tools.package&quot;&gt;Tools API&lt;/a&gt;,
(the API to the Scala.js linker and optimizer) have been completely redesigned.
Users of this API, such as &lt;a href=&quot;http://www.scala-js-fiddle.com/&quot;&gt;Scala.jsFiddle&lt;/a&gt;, will experience breakages.
Contact us if you need help porting your code.&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;h3 id=&quot;javascript-tuple-types&quot;&gt;JavaScript Tuple types&lt;/h3&gt;

&lt;p&gt;In the same spirit as &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Function&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt;, etc., we have added a series of types representing JavaScript “tuples”: &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Tuple2&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Tuple22&lt;/code&gt;.
The JavaScript representation of a tuple is, in fact, a heterogeneous array of fixed length.&lt;/p&gt;

&lt;p&gt;For example, the value&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val t = js.Tuple2(45, &quot;hello&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;corresponds the JavaScript value&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[45, &quot;hello&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should use &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Tuple&lt;/code&gt;s in facades to JavaScript libraries that take and return tuples as heterogeneous arrays.&lt;/p&gt;

&lt;p&gt;JavaScript tuples are convertible back and forth to Scala tuples, and you can use deconstruction to extract all values of a JavaScript at the same time.
For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val scalaT: (Int, String) = t
val t2: js.Tuple2[Int, String] = scalaT
val js.Tuple2(a, b) = t2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;support-for-junit&quot;&gt;Support for JUnit&lt;/h3&gt;

&lt;p&gt;It is now possible to write JUnit tests for Scala.js!
We have ported the JUnit API to Scala.js, so that it is now possible to write cross-compiling unit tests with JUnit.&lt;/p&gt;

&lt;p&gt;To enable JUnit on your Scala.js project, add the appropriate sbt AutoPlugin using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enablePlugins(ScalaJSJUnitPlugin)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(like you would with the basic &lt;code class=&quot;highlighter-rouge&quot;&gt;ScalaJSPlugin&lt;/code&gt;).
For a &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;, this must be enabled only on the JS variant.
For the JVM variant, use the usual &lt;code class=&quot;highlighter-rouge&quot;&gt;libraryDependencies&lt;/code&gt; setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myCrossProject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crossProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jsConfigure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enablePlugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ScalaJSJUnitPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jvmSettings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;com.novocode&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;junit-interface&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.9&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsconstructortagc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.ConstructorTag[C]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.6/#scala.scalajs.js.ConstructorTag&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.ConstructorTag[C]&lt;/code&gt;&lt;/a&gt; is to &lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.6/#scala.scalajs.js.package@constructorOf[T&amp;lt;:scala.scalajs.js.Any]:scala.scalajs.js.Dynamic&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf[C]&lt;/code&gt;&lt;/a&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassTag[C]&lt;/code&gt; is to &lt;code class=&quot;highlighter-rouge&quot;&gt;classOf[C]&lt;/code&gt;, i.e., you can use an &lt;code class=&quot;highlighter-rouge&quot;&gt;implicit&lt;/code&gt; parameter of type &lt;code class=&quot;highlighter-rouge&quot;&gt;js.ConstructorTag[C]&lt;/code&gt; to implicitly get a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf[C]&lt;/code&gt;.
For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Any&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.ConstructorTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructorTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newEmptyJSArray&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;js.Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Implicit expansion will desugar the above code into:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;js.ConstructorTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newEmptyJSArray&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;js.Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstructorTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructorOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;js.Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;although you cannot write the desugared version in user code because the constructor of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.ConstructorTag&lt;/code&gt; is private.&lt;/p&gt;

&lt;p&gt;This feature is particularly useful for Scala.js libraries wrapping JavaScript frameworks expecting to receive JavaScript constructors as parameters.&lt;/p&gt;

&lt;h3 id=&quot;query-for-development-versus-production-mode&quot;&gt;Query for Development versus Production mode&lt;/h3&gt;

&lt;p&gt;The new methods &lt;code class=&quot;highlighter-rouge&quot;&gt;isDevelopmentMode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;isProductionMode&lt;/code&gt; allow you to query in your code whether you are running in a Development build or a Production build (for all practical purposes, aka &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptJS&lt;/code&gt;, resp.).
The methods are located in &lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.6/#scala.scalajs.LinkingInfo$&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.LinkingInfo&lt;/code&gt;&lt;/a&gt;.
These methods can be used by libraries to provide domain-specific “optimizations” for production, e.g., eliminate expensive run-time checks useful for debugging.
Using these methods should be done with great care as, by definition, they will alter the behavior of your program between &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;java-library-additions&quot;&gt;Java library additions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Methods of &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Long&lt;/code&gt; dealing with unsigned values&lt;/li&gt;
  &lt;li&gt;Several JDK8 methods of &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Math&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Comparator.reversed&lt;/code&gt;: the first of the &lt;em&gt;default&lt;/em&gt; methods of JDK8&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.ArrayDeque&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.net.URLDecoder&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.concurrent.locks.ReentrantLock&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Objects&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1635&quot;&gt;#1635&lt;/a&gt; Touching a file in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/test/resources&lt;/code&gt; triggers &lt;code class=&quot;highlighter-rouge&quot;&gt;test:fastOptJS&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1891&quot;&gt;#1891&lt;/a&gt; Class with constructors with optional parameters can’t be embedded in objects that extend &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Object&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1899&quot;&gt;#1899&lt;/a&gt; Some members of &lt;code class=&quot;highlighter-rouge&quot;&gt;new js.Object {...}&lt;/code&gt; are not visible from JavaScript&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1975&quot;&gt;#1975&lt;/a&gt; Inner function in &lt;code class=&quot;highlighter-rouge&quot;&gt;@ScalaJSDefined&lt;/code&gt; method doesn’t get parameter&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1979&quot;&gt;#1979&lt;/a&gt; &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2042&quot;&gt;#2042&lt;/a&gt; Bugs in &lt;code class=&quot;highlighter-rouge&quot;&gt;java.math.BigDecimal.divideToIntegralValue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1984&quot;&gt;#1984&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;-8 % 8&lt;/code&gt; evaluates to negative 0, which then blows up if cast to Integer (duplicate &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2068&quot;&gt;#2068&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2045&quot;&gt;#2045&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInt.pow(31)&lt;/code&gt; return the negative of the expected number&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2067&quot;&gt;#2067&lt;/a&gt; Better implicits for combinations of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.|&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2114&quot;&gt;#2114&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;CharBuffer.wrap(CharSequence,Int,Int)&lt;/code&gt; interprets &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2158&quot;&gt;#2158&lt;/a&gt; Parsing very large &lt;code class=&quot;highlighter-rouge&quot;&gt;Long&lt;/code&gt; does not fail properly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2159&quot;&gt;#2159&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.math.BigInteger&lt;/code&gt; violate equals/hashCode law&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2178&quot;&gt;#2178&lt;/a&gt; sbt &lt;code class=&quot;highlighter-rouge&quot;&gt;test:run&lt;/code&gt; on Scala.js projects runs it under the JVM&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2180&quot;&gt;#2180&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Character.isWhitespace&lt;/code&gt; discrepancies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.6+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;known-issues&quot;&gt;Known issues&lt;/h2&gt;

&lt;p&gt;The following issues were discovered too late to be fixed in v0.6.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/2195&quot;&gt;#2195&lt;/a&gt; Source maps to the Scala library are broken&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>A new website for Scala.js</title>
   <link href="https://www.scala-js.org/news/2015/11/23/new-website/"/>
   <updated>2015-11-23T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2015/11/23/new-website</id>
   <content type="html">&lt;p&gt;After a couple months of design, content writing, and a lot of discussions, we
are pleased to finally release our new website for Scala.js! Most if not all of
the credit for this huge task goes to &lt;a href=&quot;https://github.com/ochrons&quot;&gt;Otto Chrons&lt;/a&gt;.
Big round of thanks to him!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Go and see the front page!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This new website is structured and designed specifically for front-end
developers, highlighting the benefits of Scala.js over JavaScript itself, but
also ECMAScript 6 or other languages targeting JavaScript, such as TypeScript.&lt;/p&gt;

&lt;p&gt;We hope you will like it. Come and tell us in
&lt;a href=&quot;https://gitter.im/scala-js/scala-js&quot;&gt;the Scala.js Gitter chat room&lt;/a&gt;!
We would love to hear your feedback.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.5</title>
   <link href="https://www.scala-js.org/news/2015/08/31/announcing-scalajs-0.6.5/"/>
   <updated>2015-08-31T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2015/08/31/announcing-scalajs-0.6.5</id>
   <content type="html">&lt;p&gt;We are thrilled to announce the release of Scala.js 0.6.5!&lt;/p&gt;

&lt;p&gt;This is probably &lt;em&gt;the most important release since Scala.js 0.5.0&lt;/em&gt;!
It brings significant advances to interoperability with JavaScript:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can now implement subclasses of JavaScript classes and traits in Scala.js!&lt;/li&gt;
  &lt;li&gt;Using the same semantics, you can now define object literals with &lt;code class=&quot;highlighter-rouge&quot;&gt;new js.Object { val x = 5 }&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;There is a new unboxed pseudo-union type &lt;code class=&quot;highlighter-rouge&quot;&gt;A | B&lt;/code&gt; to more accurately type your JavaScript facades&lt;/li&gt;
  &lt;li&gt;You can statically typecheck that the &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt;s of a Scala class comply with a JavaScript facade trait with &lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt;
&lt;!--more--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;For changes in the 0.6.x series compared to 0.5.x, read &lt;a href=&quot;/news/2015/02/05/announcing-scalajs-0.6.0/&quot;&gt;the announcement of 0.6.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.5 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.5 without change.
However, it is not forward compatible: libraries compiled with 0.6.5 cannot be used by projects using 0.6.{0-4}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;important-new-warnings&quot;&gt;Important new warnings&lt;/h2&gt;

&lt;p&gt;When upgrading from 0.6.{0-4}, you will get new warnings on the declarations of your facade types, i.e., traits, classes and objects extending &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Any&lt;/code&gt;.
For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will have the following warning:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Foo.scala:3: warning: Classes, traits and objects inheriting from js.Any should be annotated
  with @js.native, unless they have @ScalaJSDefined.
  The default will switch to Scala.js-defined in the next major version of Scala.js.
class Foo extends js.Object
      ^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As the text says, you should simply add the &lt;code class=&quot;highlighter-rouge&quot;&gt;@js.native&lt;/code&gt; annotation to the declaration of &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; to silence the warning:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Addressing these warnings is important to make your source code forward compatible with the next major version of Scala.js.
An unannotated declaration extending &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Any&lt;/code&gt; will by default be Scala.js-defined (see next section) in the next version.&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;h3 id=&quot;scalajs-defined-js-classes-objects-and-traits&quot;&gt;Scala.js-defined JS classes, objects, and traits&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.5 introduces a major language improvement: the ability to define, in Scala.js, a subclass of a native JavaScript class (or implementing a JavaScript trait/interface).
We call such classes &lt;em&gt;Scala.js-defined JS classes&lt;/em&gt;, because they are effectively JavaScript classes, but written in Scala.js; whereas classes that you typically write are Scala classes, not JavaScript classes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js.annotation._&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that the body of &lt;code class=&quot;highlighter-rouge&quot;&gt;bar()&lt;/code&gt; is implemented in Scala.js, instead of being &lt;code class=&quot;highlighter-rouge&quot;&gt;= js.native&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A Scala.js-defined JS class is not a facade type to a JavaScript library.
Instead, it is fully implemented in Scala.js.
Unlike Scala classes, which require exports, all members of Scala.js-defined JS classes are automatically visible from JavaScript code.
The class itself is not automatically visible; if you want it to be, you can &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; it.
You can also use &lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.5/#scala.scalajs.js.package@constructorOf[T&amp;lt;:scala.scalajs.js.Any]:scala.scalajs.js.Dynamic&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.constructorOf[C]&lt;/code&gt;&lt;/a&gt; to obtain the JS constructor function and pass it to a JavaScript library.&lt;/p&gt;

&lt;p&gt;Scala.js-defined JS classes have JavaScript semantics instead of Scala semantics.
You can read more about that in &lt;a href=&quot;/doc/interoperability/sjs-defined-js-classes.html&quot;&gt;the documentation&lt;/a&gt;.
Most importantly, that means overloading dispatch is done at run-time instead of compile-time.&lt;/p&gt;

&lt;p&gt;You can also declare Scala.js-defined JS &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;s as singletons, just like &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;s in Scala.&lt;/p&gt;

&lt;h4 id=&quot;traits&quot;&gt;Traits&lt;/h4&gt;

&lt;p&gt;Scala.js-defined JS traits are restricted: they cannot declare any concrete term member, i.e., all their &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;s must be abstract.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js.annotation._&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// ok
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// illegal
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// ok
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// illegal
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Scala.js-defined JS classes, objects and traits cannot directly extend native JS traits (i.e., non-Scala.js-defined JS traits).&lt;/p&gt;

&lt;h4 id=&quot;anonymous-classes-and-object-literals&quot;&gt;Anonymous classes and object literals&lt;/h4&gt;

&lt;p&gt;Anonymous classes extending a JS class and/or trait are automatically Scala.js-defined.
Combined with Scala.js-defined JS traits, this is very useful to write typechecked object literals with Scala syntax:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js.annotation._&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In previous versions, &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; would have been written with a non-typechecked &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dynamic.literal&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;literal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;pseudo-union-type-a--b&quot;&gt;Pseudo-union type &lt;code class=&quot;highlighter-rouge&quot;&gt;A | B&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Many JavaScript libraries have APIs with parameters or values that accept different types of values.
To be able to accurately type those libraries, Scala.js 0.6.5 features an unboxed, facade-friendly pseudo-union type &lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.5/#scala.scalajs.js.$bar&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A | B&lt;/code&gt;&lt;/a&gt;.
Here are a couple of examples of what it can do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyVal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// the following examples do not compile
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.5/test-suite/src/test/scala/org/scalajs/testsuite/library/UnionTypeTest.scala&quot;&gt;the complete test cases&lt;/a&gt; to get the complete picture.&lt;/p&gt;

&lt;h3 id=&quot;jsusexast-statically-typecheck-your-exports&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt;: statically typecheck your exports&lt;/h3&gt;

&lt;p&gt;Sometimes, you &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; members of your Scala classes so that they comply with some JavaScript interface, for example to pass it to a JavaScript library expecting some fields and methods on your object.
In 0.6.4 and before, you needed to take care yourself of exporting everything that was required, and then probably do a hard-cast:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeInterface&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeLibrary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterfaceImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SomeLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterfaceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SomeInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you mess up your exports, you will have trouble at run-time.&lt;/p&gt;

&lt;p&gt;In 0.6.5, you can write the following instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;SomeLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterfaceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SomeInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unlike &lt;code class=&quot;highlighter-rouge&quot;&gt;x.asInstanceOf[T]&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;js.use(x).as[T]&lt;/code&gt; idiom &lt;em&gt;statically typechecks&lt;/em&gt; that you have all the exports required to comply to the JavaScript interface.&lt;/p&gt;

&lt;h3 id=&quot;java-library-additions&quot;&gt;Java library additions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The complete set of &lt;code class=&quot;highlighter-rouge&quot;&gt;Character.isXYZ&lt;/code&gt; methods (to test Unicode properties of characters)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Math.rint(Double)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.concurrent.ThreadLocalRandom&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.TreeSet&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.NavigableSet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1818&quot;&gt;#1818&lt;/a&gt; Performance bottleneck in one of the steps of the linker (fast- and fullOptJS)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1759&quot;&gt;#1759&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;new Int8Array(n).toArray&lt;/code&gt; throws &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeError&lt;/code&gt; (second run)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1790&quot;&gt;#1790&lt;/a&gt; Compiler crash with a dash in a parameter of a lambda&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1799&quot;&gt;#1799&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Iterable&lt;/code&gt; is incorrectly in &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1819&quot;&gt;#1819&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt; doesn’t match &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; even with non-strict floats&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1836&quot;&gt;#1836&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger.ONE.gcd(x)&lt;/code&gt; loops forever&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1857&quot;&gt;#1857&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;j.l.Math.{abs,min,max}&lt;/code&gt; do not handle correctly &lt;code class=&quot;highlighter-rouge&quot;&gt;-0.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1777&quot;&gt;#1777&lt;/a&gt; Bug with &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.LinkedList.size&lt;/code&gt; when larger than &lt;code class=&quot;highlighter-rouge&quot;&gt;Int.MaxValue&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.5+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.4</title>
   <link href="https://www.scala-js.org/news/2015/07/03/announcing-scalajs-0.6.4/"/>
   <updated>2015-07-03T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2015/07/03/announcing-scalajs-0.6.4</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.6.4!&lt;/p&gt;

&lt;p&gt;This release brings support for Scala 2.11.7 and 2.12.0-M1, as well as a significant part of the Java collections library in &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util&lt;/code&gt;, thanks to &lt;a href=&quot;https://github.com/andreaTP&quot;&gt;@andreaTP&lt;/a&gt; and &lt;a href=&quot;https://github.com/nicolasstucki&quot;&gt;@nicolasstucki&lt;/a&gt;.
It also fixes numerous bugs.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;For changes in the 0.6.x series compared to 0.5.x, read &lt;a href=&quot;/news/2015/02/05/announcing-scalajs-0.6.0/&quot;&gt;the announcement of 0.6.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.4 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.4 without change.
However, it is not forward compatible: libraries compiled with 0.6.4 cannot be used by projects using 0.6.{0-3}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;potential-breaking-changes&quot;&gt;Potential breaking changes&lt;/h2&gt;

&lt;p&gt;The bug fix for &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1705&quot;&gt;#1705&lt;/a&gt; in this release is potentially a breaking change that might affect your code silently.
If you had something like this in a facade type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b_=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;JS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the last line would previously (erroneously) translate to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;JS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This releases fixes the compiler to instead translate to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;JS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b_=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you relied on the former code to be emitted, you should change the &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName&lt;/code&gt; annotation as &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName(&quot;b&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is no deprecation period because there was no way to, at the same time, warn against problems, and still allow correct new code to be warning-free, unfortunately.&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;h3 id=&quot;java-collections-api&quot;&gt;Java Collections API&lt;/h3&gt;

&lt;p&gt;Some Scala libraries use the collections of Java in some cases.
To help port these libraries to Scala.js, a number of collection types have been ported.
At the moment, the following data structures are supported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedList&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;HashSet&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedHashSet&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentSkipListSet&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedHashMap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentHashMap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Queue&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedList&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentLinkedQueue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;as well as the helper classes &lt;code class=&quot;highlighter-rouge&quot;&gt;Arrays&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Collections&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;better-and-earlier-diagnostics-for-illegal-jsexports-and-facade-types&quot;&gt;Better and earlier diagnostics for illegal &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt;s and facade types&lt;/h3&gt;

&lt;p&gt;There were a number of illegal usages of &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; and facade types that were not detected by the compiler.
Using those would previously result in crashes of the linker or production of completely wrong .js code.
See tickets &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1647&quot;&gt;#1647&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1664&quot;&gt;#1664&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1704&quot;&gt;#1704&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1706&quot;&gt;#1706&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1707&quot;&gt;#1707&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1717&quot;&gt;#1717&lt;/a&gt; for details.&lt;/p&gt;

&lt;h3 id=&quot;running-with-rhino-also-reports-linking-errors&quot;&gt;Running with Rhino also reports linking errors&lt;/h3&gt;

&lt;p&gt;Until 0.6.3, running with Rhino (the default) would not truly link, and therefore would not report linking errors.
This caused confusions in several occasions, because code that appeared to work on Rhino refused to link and therefore &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; would not work.
As of 0.6.4, even running with Rhino will report linking errors.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1646&quot;&gt;#1646&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Char#isUpper&lt;/code&gt; behavior diverges between Scala.js/Scala-JVM&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1664&quot;&gt;#1664&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName(variable)&lt;/code&gt; annotation does not fail on objects and classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1671&quot;&gt;#1671&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Double.toInt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Float.toInt&lt;/code&gt; are broken&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1718&quot;&gt;#1718&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Pattern.compile&lt;/code&gt; doesn’t validate regex&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1722&quot;&gt;#1722&lt;/a&gt; Rhino crash with Scalatest&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1733&quot;&gt;#1733&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSName&lt;/code&gt; does not work for &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1734&quot;&gt;#1734&lt;/a&gt; Charset decoding fails with read-only byte buffers&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1743&quot;&gt;#1743&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dynamic.literal.applyDynamic(&quot;apply&quot;)(map.toSeq: _*)&lt;/code&gt; causes optimizer to crash&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1748&quot;&gt;#1748&lt;/a&gt; Source root not found for shared project error (&lt;code class=&quot;highlighter-rouge&quot;&gt;CrossProject&lt;/code&gt; friendlier to Scoverage)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1759&quot;&gt;#1759&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;new Int8Array(n).toArray&lt;/code&gt; throws TypeError&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1764&quot;&gt;#1764&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger.modInverse&lt;/code&gt; always throws an exception&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1774&quot;&gt;#1774&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;org.mozilla.javascript.UniqueTag&lt;/code&gt; running Scala.js project&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1781&quot;&gt;#1781&lt;/a&gt; When the optimizer crashes, it is left in an inconsistent state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.4+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.3</title>
   <link href="https://www.scala-js.org/news/2015/05/12/announcing-scalajs-0.6.3/"/>
   <updated>2015-05-12T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2015/05/12/announcing-scalajs-0.6.3</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.6.3!&lt;/p&gt;

&lt;p&gt;A lot has happened in this release, probably because we dragged it for a longer amount of time than usual (2 months since the last release!).
Besides the usual bag of bug fixes, there are three highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;BigDecimal&lt;/code&gt;, thanks to an incredible amount of work by &lt;a href=&quot;https://github.com/InTheNow&quot;&gt;@InTheNow&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Extension of &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; to specify minified versions of the JS libraries.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Experimental&lt;/em&gt; output modes to target ECMAScript 6, as well as &lt;a href=&quot;https://developers.google.com/v8/experiments&quot;&gt;Strong Mode&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also welcome Nicolas Stucki aka &lt;a href=&quot;https://github.com/nicolasstucki&quot;&gt;@nicolasstucki&lt;/a&gt; to the core team at EPFL.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;For changes in the 0.6.x series compared to 0.5.x, read &lt;a href=&quot;/news/2015/02/05/announcing-scalajs-0.6.0/&quot;&gt;the announcement of 0.6.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.3 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.3 without change.
However, it is not forward compatible: libraries compiled with 0.6.3 cannot be used by projects using 0.6.{0-2}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;h3 id=&quot;big-numbers-are-here&quot;&gt;Big numbers are here!&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/InTheNow&quot;&gt;@InTheNow&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;java.math.BigInteger&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;java.math.BigDecimal&lt;/code&gt; are finally supported by Scala.js.
Consequently, so are &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.math.BigInt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.math.BigDecimal&lt;/code&gt;, as well as ranges of &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;s.&lt;/p&gt;

&lt;h3 id=&quot;minified-versions-of-js-dependencies&quot;&gt;Minified versions of JS dependencies&lt;/h3&gt;

&lt;p&gt;The new &lt;code class=&quot;highlighter-rouge&quot;&gt;minified&lt;/code&gt; modifier to &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; allows to specify minified alternatives of JS libraries.
Use it like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jsDependencies +=
  &quot;org.webjars&quot; % &quot;immutable&quot; % &quot;3.4.0&quot; / &quot;immutable.js&quot; minified &quot;immutable.min.js&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Minified dependencies are packaged with &lt;code class=&quot;highlighter-rouge&quot;&gt;packageMinifiedJSDependencies&lt;/code&gt;, which is automatically called when &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptJS&lt;/code&gt; is invoked.
The result is put in a file &lt;code class=&quot;highlighter-rouge&quot;&gt;-jsdeps.min.js&lt;/code&gt; next to &lt;code class=&quot;highlighter-rouge&quot;&gt;-jsdeps.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Obviously, for JS dependencies that do not specify a minified version, their non-minified version is used instead.&lt;/p&gt;

&lt;h3 id=&quot;opt-in-silent-fail-for-jsexportdescendentclassesobjects&quot;&gt;Opt-in silent fail for &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportDescendent{Classes,Objects}&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Only public top-level classes and objects can be &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt;ed.
Trying to export a non-public or inner entity does not compile.
For directly applied &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt;, this is the expected behavior.
For &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportDescendentClasses&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportDescendentObjects&lt;/code&gt;, however, it can prevent certain useful patterns.
In some cases it is preferable to simply ignore descendent classes and objects that cannot be exported, rather than failing with a compile error.&lt;/p&gt;

&lt;p&gt;These two annotations now take an additional, optional parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreInvalidDescendants&lt;/code&gt; of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;.
If &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, invalid descendent classes and objects will be ignored for exports.&lt;/p&gt;

&lt;p&gt;For example, this does not compile:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@JSExportDescendentClasses&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidExport&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we change the definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@JSExportDescendentClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ignoreInvalidDescendants&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;then it will compile and &lt;code class=&quot;highlighter-rouge&quot;&gt;InvalidExport&lt;/code&gt; will be silently ignored.&lt;/p&gt;

&lt;h3 id=&quot;emit-ecmascript-6&quot;&gt;Emit ECMAScript 6&lt;/h3&gt;

&lt;p&gt;Now that ECMAScript 6 has reached the status of Release Candidate, it is time for Scala.js to offer the possibility to emit JavaScript code taking full advantage of its features.
You can do so with the following sbt setting:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scalaJSOutputMode := org.scalajs.core.tools.javascript.OutputMode.ECMAScript6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will cause the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; task (after a &lt;code class=&quot;highlighter-rouge&quot;&gt;clean&lt;/code&gt;) to emit ES6-style code.
Among others, the following features are used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Classes&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;...rest&lt;/code&gt; parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, very few runtimes support enough of ECMAScript 6 to be able to run the Scala.js output.
To the best of our knowledge, V8 4.2.71 minimum is required, with the feature flag &lt;code class=&quot;highlighter-rouge&quot;&gt;--harmony-rest-parameters&lt;/code&gt;.
This runtime is available in &lt;a href=&quot;https://iojs.org/&quot;&gt;iojs&lt;/a&gt; &amp;gt;= 2.0.0, as well as in &lt;a href=&quot;https://www.google.fr/chrome/browser/canary.html&quot;&gt;Chrome Canary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can use io.js with the &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; commands of sbt with the following sbt settings:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;postLinkJSEnv := NodeJSEnv(executable = &quot;iojs&quot;, args = Seq(&quot;--harmony-rest-parameters&quot;)).value
scalaJSStage := FastOptStage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Caveats:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; works. &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; will break with crashes or obscure errors, do not use it.&lt;/li&gt;
  &lt;li&gt;Runtime performance is &lt;em&gt;awful&lt;/em&gt;. Benchmarks have shown degradations up to 10x slower than the normal output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Consequence:&lt;/strong&gt; This is currently a toy, an experiment, and should not be used in production.&lt;/p&gt;

&lt;h3 id=&quot;ecmascript-6-strong-mode&quot;&gt;ECMAScript 6 Strong Mode&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/v8/experiments&quot;&gt;Strong Mode&lt;/a&gt; is an experiment conducted by the V8 team.
Their website will explain better than we can, but basically it is an extension to JS’ strict mode, which further restricts what programs are valid.
It is meant to define a subset of JavaScript that can be optimized more predictably by runtimes, and which also causes less surprises to developers.
Contrary to &lt;a href=&quot;http://asmjs.org/&quot;&gt;asm.js&lt;/a&gt;, it is still meant to be written by hand.&lt;/p&gt;

&lt;p&gt;Early experiments show that Strong Mode can be an excellent target for Scala.js, because their semantics and restrictions align in many ways.
We have therefore invested time in providing a Strong Mode-compliant output to Scala.js.
Similarly to the ECMAScript 6 output, it can be activated with an sbt setting:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scalaJSOutputMode := org.scalajs.core.tools.javascript.OutputMode.ECMAScript6StrongMode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since Strong Mode is a subset of ECMAScript 6, any runtime which supports ES6 can also run Strong Mode code.
But to enable the additional checks, you have to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--strong-mode&lt;/code&gt; argument to V8.
Using io.js, this can be done with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;postLinkJSEnv := NodeJSEnv(executable = &quot;iojs&quot;, args = Seq(&quot;--harmony-rest-parameters&quot;, &quot;--strong-mode&quot;)).value
scalaJSStage := FastOptStage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same caveats as the ES6 mode apply.&lt;/p&gt;

&lt;p&gt;Scala.js is an excellent platform for experimenting with Strong Mode, as we can easily generate huge amounts of Strong Mode-compliant code just by recompiling applications in this mode.
Since Strong Mode is still in flux, we are discussing with the V8 team to make it as good as it can be, for JavaScript developers at large as well as for Scala.js and compiler writers specifically.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1490&quot;&gt;#1490&lt;/a&gt; JVM style module initialization under semantic flag&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1512&quot;&gt;#1512&lt;/a&gt; Atomic write of &lt;code class=&quot;highlighter-rouge&quot;&gt;-fastopt.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-opt.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1556&quot;&gt;#1556&lt;/a&gt; Test adapter provisions slaves too aggressively&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1560&quot;&gt;#1560&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.io.StringReader.read(c:Array[Char],offset:Int,len:Int)&lt;/code&gt; returns 0 at eof, instead of -1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1564&quot;&gt;#1564&lt;/a&gt; Allow overriding path prefixes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1569&quot;&gt;#1569&lt;/a&gt; AssertionError when crossProject is used as a ProjectRef in another project&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1578&quot;&gt;#1578&lt;/a&gt; Report the full stack trace for exceptions thrown in Futures&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1582&quot;&gt;#1582&lt;/a&gt; Parsing hexadecimal Long that has 0x80000000 bit set fails&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1589&quot;&gt;#1589&lt;/a&gt; Switch statement with &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; causes compiler to fail&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1556&quot;&gt;#1556&lt;/a&gt; Test adapter provisions slaves too aggressively&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1625&quot;&gt;#1625&lt;/a&gt; Emit warning if &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dynamic.literal&lt;/code&gt; has duplicate keys (and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1595&quot;&gt;#1595&lt;/a&gt; not emit illegal JS in that situation)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.3+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.2</title>
   <link href="https://www.scala-js.org/news/2015/03/16/announcing-scalajs-0.6.2/"/>
   <updated>2015-03-16T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2015/03/16/announcing-scalajs-0.6.2</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.6.2!&lt;/p&gt;

&lt;p&gt;This release mostly contains bug fixes, among which the lack of support of &lt;code class=&quot;highlighter-rouge&quot;&gt;java.net.URI&lt;/code&gt; for Unicode characters.
It also brings code size reduction and performance improvements to fastOpt code (although nothing changes in fullOpt).&lt;/p&gt;

&lt;p&gt;We are also happy to share that Scala.js is now part of &lt;a href=&quot;https://github.com/scala/community-builds&quot;&gt;Scala’s community build&lt;/a&gt;.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;For changes in the 0.6.x series compared to 0.5.x, read &lt;a href=&quot;/news/2015/02/05/announcing-scalajs-0.6.0/&quot;&gt;the announcement of 0.6.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.2 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.2 without change.&lt;/p&gt;

&lt;p&gt;We would like to remind you that libraries compiled with 0.6.0 will suffer from &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1506&quot;&gt;bug #1506&lt;/a&gt;, which will cause &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; in dependent projects to perform more work than necessary.
It is therefore recommended for library authors to upgrade to Scala.js &amp;gt;= 0.6.1 and publish new versions of their libraries, if they haven’t done so yet.
Scala.js 0.6.0 can read binaries compiled with 0.6.1 and 0.6.2, so you need not be afraid to force an upgrade of all the users of your libraries.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/pull/1535&quot;&gt;A better translation to JavaScript&lt;/a&gt; reduces the size of the &lt;code class=&quot;highlighter-rouge&quot;&gt;-fastopt.js&lt;/code&gt; files by a few percent, and speeds up their execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1520&quot;&gt;#1520&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.net.URI&lt;/code&gt; does not support Unicode&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1521&quot;&gt;#1521&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;new java.net.URI(&quot;#foo&quot;).getSchemeSpecificPart()&lt;/code&gt; should return the empty String&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1532&quot;&gt;#1532&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;TypedArrayByteBuffer.asDoubleBuffer&lt;/code&gt; results in a “RangeError: Invalid typed array length”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1546&quot;&gt;#1546&lt;/a&gt; Error “Node.js isn’t connected” when running on Travis (tentative fix)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.1</title>
   <link href="https://www.scala-js.org/news/2015/03/03/announcing-scalajs-0.6.1/"/>
   <updated>2015-03-03T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2015/03/03/announcing-scalajs-0.6.1</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.6.1!&lt;/p&gt;

&lt;p&gt;This release mostly contains bug fixes, including inefficiencies in the incremental &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt;.
It also brings the entire &lt;code class=&quot;highlighter-rouge&quot;&gt;java.nio.Buffer&lt;/code&gt;s API, with interoperability with the JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;Typed Arrays&lt;/a&gt; API.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;For changes in the 0.6.x series compared to 0.5.x, read &lt;a href=&quot;/news/2015/02/05/announcing-scalajs-0.6.0/&quot;&gt;the announcement of 0.6.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.1 is backward source and binary compatible with 0.6.0.
Libraries compiled with 0.6.0 can be used with 0.6.1 without change.
However, they will suffer from &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1506&quot;&gt;bug #1506&lt;/a&gt;, which will cause your &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; to perform more work than necessary.
It is therefore recommended for library authors to upgrade to 0.6.1 and publish new versions of their libraries.
Scala.js 0.6.0 can read binaries compiled with 0.6.1, so you need not be afraid to force an upgrade of all the users of your libraries.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;javaniobuffer-and-typed-arrays&quot;&gt;java.nio.Buffer and Typed Arrays&lt;/h2&gt;

&lt;p&gt;Scala.js 0.6.1 brings a complete implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;java.nio.Buffer&lt;/code&gt; API, with the exception of &lt;code class=&quot;highlighter-rouge&quot;&gt;MappedByteBuffer&lt;/code&gt;.
The non-&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html#direct&quot;&gt;direct&lt;/a&gt; buffers work on any JS engine supported by Scala.js, i.e., supporting ECMAScript 5.1.&lt;/p&gt;

&lt;p&gt;Direct buffers are implemented with JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;Typed Arrays&lt;/a&gt;, and therefore require the JS VM to support them.
Two additional APIs of the Scala.js standard library provide interoperability with Typed Arrays:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.1/#scala.scalajs.js.typedarray.TypedArrayBufferOps&quot;&gt;TypedArrayBufferOps&lt;/a&gt; allows to retrieve the underlying &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DataView&lt;/code&gt;, and optionally &lt;code class=&quot;highlighter-rouge&quot;&gt;TypedArray&lt;/code&gt; of a direct buffer (if it is not read-only)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.1/#scala.scalajs.js.typedarray.TypedArrayBuffer$&quot;&gt;TypedArrayBuffer&lt;/a&gt; allows to construct direct buffers wrapping existing Typed Arrays.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/pull/1488&quot;&gt;Better dce&lt;/a&gt; reduces the size of the generated .js files by a few percents.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/pull/1508&quot;&gt;java.util.Random&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/pull/1511&quot;&gt;j.l.Math.random()&lt;/a&gt; have been optimized. The latter is now an (inlined) direct forwarder to &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Math.random()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Running tests should be faster thanks to &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1299&quot;&gt;launching JS VMs in advance&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1496&quot;&gt;#1496&lt;/a&gt; Partial relative paths can now be used in &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1478&quot;&gt;#1478&lt;/a&gt; Wrong optimization of Float/Double * -1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1491&quot;&gt;#1491&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;~fastOptJS&lt;/code&gt; runs non-stop (also reported as &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1513&quot;&gt;#1513&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1506&quot;&gt;#1506&lt;/a&gt;/&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1514&quot;&gt;#1514&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; performs unnecessary work (requires libraries to be recompiled with 0.6.1)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1497&quot;&gt;#1497&lt;/a&gt; A better error message when trying to &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; an abstract class&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1499&quot;&gt;#1499&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptJS&lt;/code&gt; doesn’t generate the &lt;code class=&quot;highlighter-rouge&quot;&gt;-launcher.js&lt;/code&gt; script&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1515&quot;&gt;#1515&lt;/a&gt; Hidden crasher bug of the optimizer in obscure cases&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.0</title>
   <link href="https://www.scala-js.org/news/2015/02/05/announcing-scalajs-0.6.0/"/>
   <updated>2015-02-05T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2015/02/05/announcing-scalajs-0.6.0</id>
   <content type="html">&lt;p&gt;We are thrilled to announce the final release of Scala.js 0.6.0!&lt;/p&gt;

&lt;p&gt;As of this version, we do not consider Scala.js to be experimental anymore.
We believe it has reached maturity, and from now on, the language semantics as well as the APIs will only evolve in backward compatible ways, or go through proper deprecation cycles.&lt;/p&gt;

&lt;p&gt;Today is also the 2-year anniversary of Scala.js!
The &lt;a href=&quot;https://github.com/scala-js/scala-js/commit/9ad7627c2418e5d345375705ca087a60e3aa2c22&quot;&gt;first commit&lt;/a&gt; was pushed on February 5, 2013.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/tutorial/&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using 0.6.0 to be compatible.
More importantly, this release is not source compatible with 0.5.x either.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries have already been upgraded and published for 0.6.0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;org.scala-js&quot; %%% &quot;scalajs-dom&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-jquery&quot;&gt;jQuery types&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;be.doeraene&quot; %%% &quot;scalajs-jquery&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;scalarx&quot; % &quot;0.2.7&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;upickle&quot; % &quot;0.2.6&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;autowire&quot; % &quot;0.2.4&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jokade/scalajs-angulate&quot;&gt;scalajs-angulate&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;biz.enef&quot; %%% &quot;scalajs-angulate&quot; % &quot;0.1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/greencatsoft/scalajs-angular&quot;&gt;scalajs-angular&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.greencatsoft&quot; %%% &quot;scalajs-angular&quot; % &quot;0.3&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/scalaz&quot;&gt;scalaz&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.github.japgolly.fork.scalaz&quot; %%% &quot;scalaz-core&quot; % &quot;7.1.0-4&quot;&lt;/code&gt; &lt;em&gt;(plus other modules + version 7.1.1)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/Monocle&quot;&gt;Monocle&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.github.japgolly.fork.monocle&quot; %%% &quot;monocle-core&quot; % &quot;1.0.1&quot;&lt;/code&gt; &lt;em&gt;(plus other modules)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/rng&quot;&gt;NICTA/rng&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.github.japgolly.fork.nicta&quot; %%% &quot;rng&quot; % &quot;1.3.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/shapeless&quot;&gt;Shapeless&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.github.japgolly.fork.shapeless&quot; %%% &quot;shapeless&quot; % &quot;2.0.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/scalajs-react&quot;&gt;scalajs-react&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.github.japgolly.scalajs-react&quot; %%% &quot;core&quot; % &quot;0.7.2&quot;&lt;/code&gt; &lt;em&gt;(plus other modules)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/nyaya&quot;&gt;nyaya&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.github.japgolly.nyaya&quot; %%% &quot;nyaya-core&quot; % &quot;0.5.2&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following testing frameworks are available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;utest&quot; % &quot;0.3.0&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;org.monifu&quot; %%% &quot;minitest&quot; % &quot;0.11&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/greencatsoft/greenlight&quot;&gt;Greenlight&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.greencatsoft&quot; %%% &quot;greenlight&quot; % &quot;0.1-SNAPSHOT&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rickynils/scalacheck&quot;&gt;ScalaCheck&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.github.inthenow&quot; %%% &quot;scalacheck&quot; % &quot;1.12.2&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/InTheNow/zcheck&quot;&gt;zCheck&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.github.inthenow&quot; %%% &quot;zcheck&quot; % &quot;0.6.0&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the following helper sbt plugins as well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/workbench&quot;&gt;Workbench&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;com.lihaoyi&quot; % &quot;workbench&quot; % &quot;0.2.3&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;@InTheNow’s &lt;a href=&quot;https://github.com/InTheNow/sbt-scalajs&quot;&gt;sbt-scalajs&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;addSbtPlugin(&quot;com.github.inthenow&quot; % &quot;sbt-scalajs&quot; % &quot;0.6.0&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also a new–and incompatible–version of the DOM API.
We recommend that you first upgrade to 0.7.0 and the above libraries while upgrading to Scala.js 0.6.0.
As a second step, you can upgrade to the DOM API version 0.8.0.
Libraries depending on the DOM API must also be republished against this version of the DOM API, since it is by and large incompatible with 0.7.0.
Here are the 0.8.0 versions of said libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;org.scala-js&quot; %%% &quot;scalajs-dom&quot; % &quot;0.8.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-jquery&quot;&gt;jQuery types&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;be.doeraene&quot; %%% &quot;scalajs-jquery&quot; % &quot;0.8.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;scalatags&quot; % &quot;0.4.5&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jokade/scalajs-angulate&quot;&gt;scalajs-angulate&lt;/a&gt; and &lt;a href=&quot;https://github.com/greencatsoft/scalajs-angular&quot;&gt;scalajs-angular&lt;/a&gt;: not yet published&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/scalajs-react&quot;&gt;scalajs-react&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.github.japgolly.scalajs-react&quot; %%% &quot;core&quot; % &quot;0.8.0&quot;&lt;/code&gt; &lt;em&gt;(plus other modules)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start a Play! project with Scala.js, have a look at &lt;a href=&quot;https://github.com/vmunier/play-with-scalajs-example&quot;&gt;play-with-scalajs-example&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-05x&quot;&gt;Preparations before upgrading from 0.5.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-scalajs-jasmine-test-framework&quot;&gt;Migrate away from the Scala.js Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework wrapper for Scala.js (&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-jasmine-test-framework&lt;/code&gt;), migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework wrapper is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/greencatsoft/greenlight&quot;&gt;Greenlight&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0 before you can use them.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-from-056&quot;&gt;Upgrade to 0.6.0 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/6ccd5f64c3d46b203685a3c0762142513f5cc3e9&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.7.&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-enabled versions of your dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; stages.
In Scala 0.5.x, you could run in the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; stage with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In 0.6.x, the stage is regulated by the setting &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FastOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FullOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOpt mode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code class=&quot;highlighter-rouge&quot;&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting source compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code class=&quot;highlighter-rouge&quot;&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in the PreLink and FastOpt stages&lt;/em&gt;, by throwing an &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;).
&lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code class=&quot;highlighter-rouge&quot;&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in the fullOpt stage than in the other stages.
The idea of &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (in all stages), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sound.&lt;/p&gt;

&lt;h3 id=&quot;the-scalascalajsjs-package-has-been-simplified&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js&lt;/code&gt; package has been simplified&lt;/h3&gt;

&lt;p&gt;We have removed a lot of historical warts from the &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js&lt;/code&gt; package, mostly types and APIs with equivalents among normal Scala types and libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Number&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Undefined&lt;/code&gt; have been removed, as well as their &lt;code class=&quot;highlighter-rouge&quot;&gt;js.prim.*&lt;/code&gt; equivalent.
&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Unit&lt;/code&gt; should be used instead, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.parseInt(s)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.parseFloat(s)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;s.toInt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;s.toDouble&lt;/code&gt;, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.NaN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Infinity&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;Double.NaN&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Double.PositiveInfinity&lt;/code&gt;, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.isNaN(x)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;x.isNaN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.isFinite(x)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;!x.isNaN &amp;amp;&amp;amp; !x.isInfinite&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Methods provided by ECMAScript 5.1 on primitive strings and numbers can be enabled by importing the following implicit conversions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSStringOps._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSNumberOps._&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code class=&quot;highlighter-rouge&quot;&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time, and severe discrepencies with the JVM sbt testing interface.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0/sbt-plugin-test/build.sbt#L49-L64&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0/sbt-plugin-test/build.sbt#L66-L86&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;-defining-cross-compiling-projects-with-crossproject&quot;&gt;&lt;a name=&quot;cross-project&quot;&gt;&lt;/a&gt; Defining cross-compiling projects with &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When writing cross-compiling code, we need to have two separate projects in sbt for the JVM target and the JS target.
The new &lt;code class=&quot;highlighter-rouge&quot;&gt;CrossProject&lt;/code&gt; type, and its &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt; builder, helps in defining these pairs of projects in a DRY way.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://www.scala-js.org/api/sbt-scalajs/0.6.0/#org.scalajs.sbtplugin.cross.CrossProject&quot;&gt;documentation of &lt;code class=&quot;highlighter-rouge&quot;&gt;CrossProject&lt;/code&gt;&lt;/a&gt; for more information and examples.&lt;/p&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.0 benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Range.foreach&lt;/code&gt;, aka the &lt;code class=&quot;highlighter-rouge&quot;&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary&lt;/code&gt;s (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; wrapped in a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implicits-to-make-writing-javascript-easier&quot;&gt;Implicits to make “writing JavaScript” easier&lt;/h3&gt;

&lt;p&gt;Sometimes, for example when porting existing JavaScript code, we want to just “write JavaScript” inside our Scala.js code.
A new object &lt;code class=&quot;highlighter-rouge&quot;&gt;js.DynamicImplicits&lt;/code&gt; (&lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.0/#scala.scalajs.js.DynamicImplicits$&quot;&gt;API&lt;/a&gt;) provides implicit conversions that allow to write dynamically typed JavaScriptish code directly in Scala.js with a mimimal amount of boilerplate.
Needless to say, these implicits should be handled with care, but they can come in handy.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code class=&quot;highlighter-rouge&quot;&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;obfuscation-of-class-names&quot;&gt;Obfuscation of class names&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSSemantics&lt;/code&gt; option also allows to obfuscate or otherwise rename the class names in the emitted .js file, as was requested in &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1113&quot;&gt;#1113&lt;/a&gt;.
For example, this sbt setting empties out all class names in the package &lt;code class=&quot;highlighter-rouge&quot;&gt;my.company&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withRuntimeClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my.company.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This changes the value returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;x.getClass.getName&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;classOf[C].getName&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine Maven and Gradle plugins for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven/Gradle user could therefore build a Maven/Gradle plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,686 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1430&quot;&gt;#1430&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassTag.unapply&lt;/code&gt; method (for deconstruction) fails for raw JS classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1423&quot;&gt;#1423&lt;/a&gt; String.getBytes returns trailing zeroes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1349&quot;&gt;#1349&lt;/a&gt; Auto-completion in runMain task does not work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1402&quot;&gt;#1402&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Traversers&lt;/code&gt; does not handle the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;Debugger&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1451&quot;&gt;#1451&lt;/a&gt; ScalaDoc run crashes with property &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExports&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1455&quot;&gt;#1455&lt;/a&gt; Runs for ScalaDoc complain about &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport(SomeFinalVal)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1458&quot;&gt;#1458&lt;/a&gt; PhantomJS 2 expects a scheme name (&lt;code class=&quot;highlighter-rouge&quot;&gt;file:///&lt;/code&gt;) for all urls, not just a path to local files&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.0-RC2</title>
   <link href="https://www.scala-js.org/news/2015/01/23/announcing-scalajs-0.6.0-RC2/"/>
   <updated>2015-01-23T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2015/01/23/announcing-scalajs-0.6.0-RC2</id>
   <content type="html">&lt;p&gt;We are excited to announce the second release candidate of Scala.js 0.6.0, aka 0.6.0-RC2!
Unless there are blocking issues with this RC, or issues requiring binary incompatible changes, this version will become 0.6.0 final.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Compared to 0.6.0-RC1, this is strictly a bug fix release.
The following bugs have been fixed in this second RC:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1451&quot;&gt;#1451&lt;/a&gt; ScalaDoc run crashes with property &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExports&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1452&quot;&gt;#1452&lt;/a&gt; PhantomJS sometimes doesn’t shut down properly on Linux&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1453&quot;&gt;#1453&lt;/a&gt; Critical incorrect constant folding of &lt;code class=&quot;highlighter-rouge&quot;&gt;* (-1)&lt;/code&gt; in the optimizer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1455&quot;&gt;#1455&lt;/a&gt; Runs for ScalaDoc complain about &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport(SomeFinalVal)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1458&quot;&gt;#1458&lt;/a&gt; PhantomJS 2 expects a scheme name (&lt;code class=&quot;highlighter-rouge&quot;&gt;file:///&lt;/code&gt;) for all urls, not just a path to local files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scala.js 0.6.0-RC2 is backward and forward binary compatible with 0.6.0-RC1.
Libraries already published for RC1 need therefore not be published again against RC2.&lt;/p&gt;

&lt;p&gt;To upgrade from 0.6.0-Mx/RC1, simply change the version number.
If you’re upgrading from M1/M2, you might need to address some compilation errors regarding the &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt; package, but it should be straightforward.
Should you encounter any trouble, do not hesitate to ask.&lt;/p&gt;

&lt;p&gt;The rest of this announcement is cumulative with the changes introduced in the milestones and RC1, and is therefore written wrt. 0.5.6.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using 0.6.0-RC1 or RC2 to be compatible.
More importantly, this release is not source compatible with 0.5.x either.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries and testing frameworks have already been upgraded and published for 0.6.0-RC1/RC2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;org.scala-js&quot; %%% &quot;scalajs-dom&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-jquery&quot;&gt;jQuery types&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;be.doeraene&quot; %%% &quot;scalajs-jquery&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;scalarx&quot; % &quot;0.2.7-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;scalatags&quot; % &quot;0.4.3-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;autowire&quot; % &quot;0.2.4-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;upickle&quot; % &quot;0.2.6-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;utest&quot; % &quot;0.2.5-RC1&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;org.monifu&quot; %%% &quot;minitest&quot; % &quot;0.10&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-05x&quot;&gt;Preparations before upgrading from 0.5.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0-RC2, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-scalajs-jasmine-test-framework&quot;&gt;Migrate away from the Scala.js Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework wrapper for Scala.js (&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajs-jasmine-test-framework&lt;/code&gt;), migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework wrapper is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eecolor/little-spec&quot;&gt;Little Spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0-RC1/RC2 before you can use them.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-rc2-from-056&quot;&gt;Upgrade to 0.6.0-RC2 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/07e940a6fe4d2208ab633402d6849eb020ec277d&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.6 (the current version is 0.13.7).&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys, as they are not needed anymore.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-RC2-enabled versions of your dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; stages.
In Scala 0.5.x, you could run in the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; stage with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In 0.6.x, the stage is regulated by the setting &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FastOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FullOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOpt mode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code class=&quot;highlighter-rouge&quot;&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting source compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code class=&quot;highlighter-rouge&quot;&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in the PreLink and FastOpt stages&lt;/em&gt;, by throwing an &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;).
&lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code class=&quot;highlighter-rouge&quot;&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in the fullOpt stage than in the other stages.
The idea of &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (in all stages), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sound.&lt;/p&gt;

&lt;h3 id=&quot;the-scalascalajsjs-package-has-been-simplified&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js&lt;/code&gt; package has been simplified&lt;/h3&gt;

&lt;p&gt;We have removed a lot of historical warts from the &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js&lt;/code&gt; package, mostly types and APIs with equivalents among normal Scala types and libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Number&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Undefined&lt;/code&gt; have been removed, as well as their &lt;code class=&quot;highlighter-rouge&quot;&gt;js.prim.*&lt;/code&gt; equivalent.
&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Unit&lt;/code&gt; should be used instead, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.parseInt(s)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.parseFloat(s)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;s.toInt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;s.toDouble&lt;/code&gt;, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.NaN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Infinity&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;Double.NaN&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Double.PositiveInfinity&lt;/code&gt;, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.isNaN(x)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;x.isNaN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.isFinite(x)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;!x.isNaN &amp;amp;&amp;amp; !x.isInfinite&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Methods provided by ECMAScript 5.1 on primitive strings and numbers can be enabled by importing the following implicit conversions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSStringOps._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSNumberOps._&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code class=&quot;highlighter-rouge&quot;&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time, and severe discrepencies with the JVM sbt testing interface.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC2/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-RC2/sbt-plugin-test/build.sbt#L49-L64&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC2/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-RC2/sbt-plugin-test/build.sbt#L66-L86&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC2/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;-defining-cross-compiling-projects-with-crossproject&quot;&gt;&lt;a name=&quot;cross-project&quot;&gt;&lt;/a&gt; Defining cross-compiling projects with &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When writing cross-compiling code, we need to have two separate projects in sbt for the JVM target and the JS target.
The new &lt;code class=&quot;highlighter-rouge&quot;&gt;CrossProject&lt;/code&gt; type, and its &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt; builder, helps in defining these pairs of projects in a DRY way.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://www.scala-js.org/api/sbt-scalajs/0.6.0-RC2/#org.scalajs.sbtplugin.cross.CrossProject&quot;&gt;documentation of &lt;code class=&quot;highlighter-rouge&quot;&gt;CrossProject&lt;/code&gt;&lt;/a&gt; for more information and examples.&lt;/p&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.x benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Range.foreach&lt;/code&gt;, aka the &lt;code class=&quot;highlighter-rouge&quot;&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary&lt;/code&gt;s (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; wrapped in a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implicits-to-make-writing-javascript-easier&quot;&gt;Implicits to make “writing JavaScript” easier&lt;/h3&gt;

&lt;p&gt;Sometimes, for example when porting existing JavaScript code, we want to just “write JavaScript” inside our Scala.js code.
A new object &lt;code class=&quot;highlighter-rouge&quot;&gt;js.DynamicImplicits&lt;/code&gt; (&lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.0-RC2/#scala.scalajs.js.DynamicImplicits$&quot;&gt;API&lt;/a&gt;) provides implicit conversions that allow to write dynamically typed JavaScriptish code directly in Scala.js with a mimimal amount of boilerplate.
Needless to say, these implicits should be handled with care, but they can come in handy.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code class=&quot;highlighter-rouge&quot;&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;obfuscation-of-class-names&quot;&gt;Obfuscation of class names&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSSemantics&lt;/code&gt; option also allows to obfuscate or otherwise rename the class names in the emitted .js file, as was requested in &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1113&quot;&gt;#1113&lt;/a&gt;.
For example, this sbt setting empties out all class names in the package &lt;code class=&quot;highlighter-rouge&quot;&gt;my.company&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withRuntimeClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my.company.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This changes the value returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;x.getClass.getName&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;classOf[C].getName&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine a Maven plugin for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven user could therefore build a Maven plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,686 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1430&quot;&gt;#1430&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassTag.unapply&lt;/code&gt; method (for deconstruction) fails for raw JS classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1423&quot;&gt;#1423&lt;/a&gt; String.getBytes returns trailing zeroes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1349&quot;&gt;#1349&lt;/a&gt; Auto-completion in runMain task does not work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1402&quot;&gt;#1402&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Traversers&lt;/code&gt; does not handle the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;Debugger&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1451&quot;&gt;#1451&lt;/a&gt; ScalaDoc run crashes with property &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExports&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1455&quot;&gt;#1455&lt;/a&gt; Runs for ScalaDoc complain about &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport(SomeFinalVal)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1458&quot;&gt;#1458&lt;/a&gt; PhantomJS 2 expects a scheme name (&lt;code class=&quot;highlighter-rouge&quot;&gt;file:///&lt;/code&gt;) for all urls, not just a path to local files&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.0-RC1</title>
   <link href="https://www.scala-js.org/news/2015/01/12/announcing-scalajs-0.6.0-RC1/"/>
   <updated>2015-01-12T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2015/01/12/announcing-scalajs-0.6.0-RC1</id>
   <content type="html">&lt;p&gt;We are excited to announce the first release candidate of Scala.js 0.6.0, aka 0.6.0-RC1!
Unless there are blocking issues with this RC, or issues requiring binary incompatible changes, this version will become 0.6.0 final.&lt;/p&gt;

&lt;p&gt;Scala.js 0.6.0-RC1 is not forward nor backward binary compatible with M1/M2/M3.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;To upgrade from 0.6.0-Mx, simply change the version number.
If you’re upgrading from M1/M2, you might need to address some compilation errors regarding the &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt; package, but it should be straightforward.
Should you encounter any trouble, do not hesitate to ask.&lt;/p&gt;

&lt;p&gt;The rest of this announcement is cumulative with the changes introduced in the milestones, and is therefore written wrt. 0.5.6.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using 0.6.0-RC1 to be compatible.
More importantly, this release is not source compatible with 0.5.x either.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries and testing frameworks have already been upgraded and published for 0.6.0-RC1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;org.scala-js&quot; %%% &quot;scalajs-dom&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-jquery&quot;&gt;jQuery types&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;be.doeraene&quot; %%% &quot;scalajs-jquery&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;scalarx&quot; % &quot;0.2.7-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;scalatags&quot; % &quot;0.4.3-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;autowire&quot; % &quot;0.2.4-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;upickle&quot; % &quot;0.2.6-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;com.lihaoyi&quot; %%% &quot;utest&quot; % &quot;0.2.5-RC1&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;org.monifu&quot; %%% &quot;minitest&quot; % &quot;0.10&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-05x&quot;&gt;Preparations before upgrading from 0.5.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0-RC1, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-jasmine-test-framework&quot;&gt;Migrate away from the Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework, migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eecolor/little-spec&quot;&gt;Little Spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0-RC1 before you can use them.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-rc1-from-056&quot;&gt;Upgrade to 0.6.0-RC1 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/77d5f970267247c714a164f3dd72e51605f3ef66&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.6 (the current version is 0.13.7).&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys, as they are not needed anymore.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-RC1-enabled versions of your dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; mode.
In Scala 0.5.x, you could run in &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; mode with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In 0.6.x, the mode is regulated by the setting &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FastOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FullOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOpt mode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code class=&quot;highlighter-rouge&quot;&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting source compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code class=&quot;highlighter-rouge&quot;&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in fastOpt mode&lt;/em&gt;, by throwing an &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;).
&lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code class=&quot;highlighter-rouge&quot;&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in fastOpt mode than in fullOpt.
The idea of &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (both in fastOpt and fullOpt modes), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sensical.&lt;/p&gt;

&lt;h3 id=&quot;the-scalascalajsjs-package-has-been-simplified&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js&lt;/code&gt; package has been simplified&lt;/h3&gt;

&lt;p&gt;We have removed a lot of historical warts from the &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js&lt;/code&gt; package, mostly types and APIs with equivalents among normal Scala types and libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Number&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Undefined&lt;/code&gt; have been removed, as well as their &lt;code class=&quot;highlighter-rouge&quot;&gt;js.prim.*&lt;/code&gt; equivalent.
&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Unit&lt;/code&gt; should be used instead.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.parseInt(s)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.parseFloat(s)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;s.toInt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;s.toDouble&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.NaN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Infinity&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;Double.NaN&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Double.PositiveInfinity&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.isNaN(x)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;x.isNaN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.isFinite(x)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;!x.isNaN &amp;amp;&amp;amp; !x.isInfinite&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Methods provided by ECMAScript 5.1 on primitive strings and numbers can be enabled by importing the following implicit conversions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSStringOps._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSNumberOps._&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code class=&quot;highlighter-rouge&quot;&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC1/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-RC1/sbt-plugin-test/build.sbt#L49-L64&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC1/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-RC1/sbt-plugin-test/build.sbt#L66-L86&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC1/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;-defining-cross-compiling-projects-with-crossproject&quot;&gt;&lt;a name=&quot;cross-project&quot;&gt;&lt;/a&gt; Defining cross-compiling projects with &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When writing cross-compiling code, we need to have two separate projects in sbt for the JVM target and the JS target.
The new &lt;code class=&quot;highlighter-rouge&quot;&gt;CrossProject&lt;/code&gt; type, and its &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt; builder, helps in defining these pairs of projects in a DRY way.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://www.scala-js.org/api/sbt-scalajs/0.6.0-RC1/#org.scalajs.sbtplugin.cross.CrossProject&quot;&gt;documentation of &lt;code class=&quot;highlighter-rouge&quot;&gt;CrossProject&lt;/code&gt;&lt;/a&gt; for more information and examples.&lt;/p&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.x benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Range.foreach&lt;/code&gt;, aka the &lt;code class=&quot;highlighter-rouge&quot;&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary&lt;/code&gt;s (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; wrapped in a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implicits-to-make-writing-javascript-easier&quot;&gt;Implicits to make “writing JavaScript” easier&lt;/h3&gt;

&lt;p&gt;Sometimes, for example when porting existing JavaScript code, we want to just “write JavaScript” inside our Scala.js code.
A new object &lt;code class=&quot;highlighter-rouge&quot;&gt;js.DynamicImplicits&lt;/code&gt; (&lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.6.0-RC1/#scala.scalajs.js.DynamicImplicits$&quot;&gt;API&lt;/a&gt; provides implicit conversions that allow to write dynamically typed JavaScriptish code directly in Scala.js with a mimimal amount of boilerplate.
Needless to say, these implicits should be handled with care, but they can come in handy.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code class=&quot;highlighter-rouge&quot;&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;obfuscation-of-class-names&quot;&gt;Obfuscation of class names&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSSemantics&lt;/code&gt; option also allows to obfuscate or otherwise rename the class names in the emitted .js file, as was requested in &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1113&quot;&gt;#1113&lt;/a&gt;.
For example, this sbt setting empties out all class names in the package &lt;code class=&quot;highlighter-rouge&quot;&gt;my.company&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withRuntimeClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my.company.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This changes the value returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;x.getClass.getName&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;classOf[C].getName&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine a Maven plugin for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven user could therefore build a Maven plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,686 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1430&quot;&gt;#1430&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassTag.unapply&lt;/code&gt; method (for deconstruction) fails for raw JS classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1423&quot;&gt;#1423&lt;/a&gt; String.getBytes returns trailing zeroes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1349&quot;&gt;#1349&lt;/a&gt; Auto-completion in runMain task does not work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1402&quot;&gt;#1402&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Traversers&lt;/code&gt; does not handle the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;Debugger&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.0-M3</title>
   <link href="https://www.scala-js.org/news/2014/12/22/announcing-scalajs-0.6.0-M3/"/>
   <updated>2014-12-22T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2014/12/22/announcing-scalajs-0.6.0-M3</id>
   <content type="html">&lt;p&gt;We are excited to announce the third milestone of Scala.js 0.6.0, aka 0.6.0-M3!
This release is mostly about the (hopefully) last binary incompatible changes for the 0.6.x series.
It also substantially reworks the &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js&lt;/code&gt; package to simplify it (see below for details).&lt;/p&gt;

&lt;p&gt;Scala.js 0.6.0-M3 is not forward nor backward binary compatible with M1/M2.
We expect that all subsequent milestones and RCs for 0.6.x will stay binary compatible with M3, though.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;To upgrade from 0.6.0-M1/M2, simply change the version number.
You might need to address some compilation errors regarding the &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt; package, but it should be straightforward.
Should you encounter any trouble, do not hesitate to ask.&lt;/p&gt;

&lt;p&gt;The rest of this announcement is cumulative with the changes introduced in M1 and M2.&lt;/p&gt;

&lt;p&gt;This development release is mostly intended for testing purposes, and as a synchronization point with library authors so that they can start upgrading in preparation for the final release.&lt;/p&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using 0.6.0-M3 to be compatible.&lt;/p&gt;

&lt;p&gt;More importantly, this release is not source compatible with 0.5.x either.
We expect, however, that further milestones and 0.6.x will stay source compatible with this milestone.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries and testing frameworks have already been upgraded and published for 0.6.0-M3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: 0.7.0&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-jquery&quot;&gt;jQuery types&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;be.doeraene&quot; %%% &quot;scalajs-jquery&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: 0.2.7-M3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: 0.4.3-M3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: 0.2.4-M3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: 0.2.6-M3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: 0.2.5-M3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;: 0.6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOT DONE YET&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-06x&quot;&gt;Preparations before upgrading from 0.6.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0-M3, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-jasmine-test-framework&quot;&gt;Migrate away from the Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework, migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eecolor/little-spec&quot;&gt;Little Spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0-M3 before you can use them.
You might need to disable your testing infrastructure in the meantime, if you want to start using 0.6.0-M3 before they are ready.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-m3-from-056&quot;&gt;Upgrade to 0.6.0-M3 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/11c56d9700eff3922fb98472ebcf5e9b19f18e1e&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.6 (the current version is 0.13.7).&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys, as they are not needed anymore.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-M3-enabled versions of your dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; mode.
In Scala 0.5.x, you could run in &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; mode with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In 0.6.x, the mode is regulated by the setting &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FastOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FullOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOpt mode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code class=&quot;highlighter-rouge&quot;&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code class=&quot;highlighter-rouge&quot;&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in fastOpt mode&lt;/em&gt;, by throwing an &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;).
&lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code class=&quot;highlighter-rouge&quot;&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in fastOpt mode than in fullOpt.
The idea of &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (both in fastOpt and fullOpt modes), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sensical.&lt;/p&gt;

&lt;h3 id=&quot;the-scalascalajsjs-has-been-simplified&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js&lt;/code&gt; has been simplified&lt;/h3&gt;

&lt;p&gt;We have removed a lot of historical warts from the &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js&lt;/code&gt; package, mostly types and APIs with equivalents among normal Scala types and libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Number&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Undefined&lt;/code&gt; have been removed, as well as their &lt;code class=&quot;highlighter-rouge&quot;&gt;js.prim.*&lt;/code&gt; equivalent.
&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Unit&lt;/code&gt; should be used instead.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.parseInt(s)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.parseFloat(s)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;s.toInt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;s.toDouble&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.NaN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Infinity&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;Double.NaN&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Double.PositiveInfinity&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.isNaN(x)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;x.isNaN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.isFinite(x)&lt;/code&gt; should be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;!x.isNaN &amp;amp;&amp;amp; !x.isInfinite&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Methods provided by ECMAScript 5.1 on primitive strings and numbers can be enabled by importing the following implicit conversions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSStringOps._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSNumberOps._&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code class=&quot;highlighter-rouge&quot;&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M3/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M3/sbt-plugin-test/build.sbt#L47-L62&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M3/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M3/sbt-plugin-test/build.sbt#L64-L84&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M3/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;-defining-cross-compiling-projects-with-crossproject&quot;&gt;&lt;a name=&quot;cross-project&quot;&gt;&lt;/a&gt; Defining cross-compiling projects with &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When writing cross-compiling code, we need to have two separate projects in sbt for the JVM target and the JS target.
The new &lt;code class=&quot;highlighter-rouge&quot;&gt;CrossProject&lt;/code&gt; type, and its &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt; builder, helps in defining these pairs of projects in a DRY way.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://www.scala-js.org/api/sbt-scalajs/0.6.0-M3/#org.scalajs.sbtplugin.cross.CrossProject&quot;&gt;documentation of &lt;code class=&quot;highlighter-rouge&quot;&gt;CrossProject&lt;/code&gt;&lt;/a&gt; for more information and examples.&lt;/p&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.x benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Range.foreach&lt;/code&gt;, aka the &lt;code class=&quot;highlighter-rouge&quot;&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt;s (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; wrapped in a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implicits-to-make-writing-javascript-easier&quot;&gt;Implicits to make “writing JavaScript” easier&lt;/h3&gt;

&lt;p&gt;Sometimes, for example when porting existing JavaScript code, we want to just “write JavaScript” inside our Scala.js code.
A new object &lt;code class=&quot;highlighter-rouge&quot;&gt;js.DynamicImplicits&lt;/code&gt; (&lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.6.0-M3/#scala.scalajs.js.DynamicImplicits$&quot;&gt;API&lt;/a&gt; provides implicit conversions that allow to write dynamically typed JavaScriptish code directly in Scala.js with a mimimal amount of boilerplate.
Needless to say, these implicits should be handled with care, but they can come in handy.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code class=&quot;highlighter-rouge&quot;&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine a Maven plugin for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven user could therefore build a Maven plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,211 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1349&quot;&gt;#1349&lt;/a&gt; Auto-completion in runMain task does not work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1402&quot;&gt;#1402&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Traversers&lt;/code&gt; does not handle the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;Debugger&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.0-M2</title>
   <link href="https://www.scala-js.org/news/2014/12/05/announcing-scalajs-0.6.0-M2/"/>
   <updated>2014-12-05T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2014/12/05/announcing-scalajs-0.6.0-M2</id>
   <content type="html">&lt;p&gt;We are excited to announce the second milestone of Scala.js 0.6.0, aka 0.6.0-M2!
This release fixes the last outstanding issues from M1.
Most notably &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1331&quot;&gt;#1335&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1335&quot;&gt;#1331&lt;/a&gt;, so &lt;code class=&quot;highlighter-rouge&quot;&gt;%%%&lt;/code&gt; is fixed.
It also introduces &lt;a href=&quot;#cross-project&quot;&gt;a builder for cross-compiling projects in sbt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Scala.js 0.6.0-M2 is forward and backward binary compatible with M1, and uses the same cross-compilation suffix (i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;_sjs0.6.0-M1&lt;/code&gt;), so you can use libraries built with 0.6.0-M1 in 0.6.0-M2, and conversely.
It is also backward source compatible with M1.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The rest of this announcement is cumulative with the changes introduced in M1.&lt;/p&gt;

&lt;p&gt;This development release is mostly intended for testing purposes, and as a synchronization point with library authors so that they can start upgrading in preparation for the final release.&lt;/p&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using 0.6.0-M1 or M2 to be compatible.&lt;/p&gt;

&lt;p&gt;More importantly, this release is not source compatible with 0.5.x either.
We expect, however, that further milestones and 0.6.x will stay source compatible with this first milestone.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries and testing frameworks have already been upgraded and published for 0.6.0-M1 and M2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: 0.7.0&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: 0.2.7-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: 0.4.3-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: 0.2.4-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: 0.2.5-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: 0.2.6-M1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-06x&quot;&gt;Preparations before upgrading from 0.6.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0-M2, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-jasmine-test-framework&quot;&gt;Migrate away from the Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework, migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eecolor/little-spec&quot;&gt;Little Spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0-M1 or M2 before you can use them.
You might need to disable your testing infrastructure in the meantime, if you want to start using 0.6.0-M2 before they are ready.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-m2-from-056&quot;&gt;Upgrade to 0.6.0-M2 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/fdc2b9c2dedcbcf64086b11b74e980cfe0792847&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.6 (the current version is 0.13.7).&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys, as they are not needed anymore.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-M1/M2-enabled versions of your dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; mode.
In Scala 0.5.x, you could run in &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; mode with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In 0.6.x, the mode is regulated by the setting &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FastOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FullOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOpt mode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code class=&quot;highlighter-rouge&quot;&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code class=&quot;highlighter-rouge&quot;&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in fastOpt mode&lt;/em&gt;, by throwing an &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;).
&lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code class=&quot;highlighter-rouge&quot;&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in fastOpt mode than in fullOpt.
The idea of &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (both in fastOpt and fullOpt modes), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sensical.&lt;/p&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code class=&quot;highlighter-rouge&quot;&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M1/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M2/sbt-plugin-test/build.sbt#L47-L62&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M2/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M2/sbt-plugin-test/build.sbt#L64-L84&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M2/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;-defining-cross-compiling-projects-with-crossproject&quot;&gt;&lt;a name=&quot;cross-project&quot;&gt;&lt;/a&gt; Defining cross-compiling projects with &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When writing cross-compiling code, we need to have two separate projects in sbt for the JVM target and the JS target.
The new &lt;code class=&quot;highlighter-rouge&quot;&gt;CrossProject&lt;/code&gt; type, and its &lt;code class=&quot;highlighter-rouge&quot;&gt;crossProject&lt;/code&gt; builder, helps in defining these pairs of projects in a DRY way.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://www.scala-js.org/api/sbt-scalajs/0.6.0-M2/#org.scalajs.sbtplugin.cross.CrossProject&quot;&gt;documentation of &lt;code class=&quot;highlighter-rouge&quot;&gt;CrossProject&lt;/code&gt;&lt;/a&gt; for more information and examples.&lt;/p&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.x benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Range.foreach&lt;/code&gt;, aka the &lt;code class=&quot;highlighter-rouge&quot;&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt;s (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; wrapped in a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code class=&quot;highlighter-rouge&quot;&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine a Maven plugin for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven user could therefore build a Maven plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,211 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1349&quot;&gt;#1349&lt;/a&gt; Auto-completion in runMain task does not work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.0-M1+is%3Aclosed&quot;&gt;full list&lt;/a&gt; on GitHub.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.6.0-M1</title>
   <link href="https://www.scala-js.org/news/2014/12/01/announcing-scalajs-0.6.0-M1/"/>
   <updated>2014-12-01T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2014/12/01/announcing-scalajs-0.6.0-M1</id>
   <content type="html">&lt;p&gt;We are excited to announce the first milestone of Scala.js 0.6.0, aka 0.6.0-M1!&lt;/p&gt;

&lt;p&gt;This development release is mostly intended for testing purposes, and as a synchronization point with library authors so that they can start upgrading in preparation for the final release.&lt;/p&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using this milestone to be compatible.&lt;/p&gt;

&lt;p&gt;More importantly, this release is not source compatible with 0.5.x either.
We expect, however, that further milestones and 0.6.x will stay source compatible with this first milestone.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries and testing frameworks have already been upgraded and published for 0.6.0-M1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: 0.7.0&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: 0.2.7-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: 0.4.3-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: 0.2.4-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: 0.2.5-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: 0.2.6-M1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-06x&quot;&gt;Preparations before upgrading from 0.6.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0-M1, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-jasmine-test-framework&quot;&gt;Migrate away from the Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework, migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eecolor/little-spec&quot;&gt;Little Spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0-M1 before you can use them.
You might need to disable your testing infrastructure in the meantime, if you want to start using 0.6.0-M1 before they are ready.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-m1-from-056&quot;&gt;Upgrade to 0.6.0-M1 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/09861f30793a35ff102fdb75f449a16fa849fde2&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.6 (the current version is 0.13.7).&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys, as they are not needed anymore.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-M1-enabled versions of your dependencies.&lt;/li&gt;
  &lt;li&gt;(Temporarily) use &lt;code class=&quot;highlighter-rouge&quot;&gt;%%%!&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;%%%&lt;/code&gt; because &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1331&quot;&gt;the latter is broken&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; mode.
In Scala 0.5.x, you could run in &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; mode with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In 0.6.x, the mode is regulated by the setting &lt;code class=&quot;highlighter-rouge&quot;&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FastOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FullOptStage&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOptMode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code class=&quot;highlighter-rouge&quot;&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code class=&quot;highlighter-rouge&quot;&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in fastOpt mode&lt;/em&gt;, by throwing an &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;).
&lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code class=&quot;highlighter-rouge&quot;&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in fastOpt mode than in fullOpt.
The idea of &lt;code class=&quot;highlighter-rouge&quot;&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (both in fastOpt and fullOpt modes), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sensical.&lt;/p&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code class=&quot;highlighter-rouge&quot;&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code class=&quot;highlighter-rouge&quot;&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code class=&quot;highlighter-rouge&quot;&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M1/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M1/sbt-plugin-test/build.sbt#L47-L70&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M1/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M1/sbt-plugin-test/build.sbt#L72-L97&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M1/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.x benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Range.foreach&lt;/code&gt;, aka the &lt;code class=&quot;highlighter-rouge&quot;&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt;s (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; wrapped in a &lt;code class=&quot;highlighter-rouge&quot;&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code class=&quot;highlighter-rouge&quot;&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine a Maven plugin for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven user could therefore build a Maven plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,211 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.0-M1+is%3Aclosed&quot;&gt;full list&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;known-issues&quot;&gt;Known issues&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1331&quot;&gt;#1331&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;%%%&lt;/code&gt; seems broken with “illegal dynamic reference” (workaround available in the issue)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1335&quot;&gt;#1335&lt;/a&gt; Source maps to Scala library are broken&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.5.6</title>
   <link href="https://www.scala-js.org/news/2014/11/19/announcing-scalajs-0.5.6/"/>
   <updated>2014-11-19T00:00:00-05:00</updated>
   <id>https://www.scala-js.org/news/2014/11/19/announcing-scalajs-0.5.6</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.5.6!&lt;/p&gt;

&lt;p&gt;This is a backport release from the upcoming 0.6.x branch and contains various minor bug fixes and enhancements.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;To upgrade, change the version number in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;, as usual. Further, you will need to upgrade to sbt &amp;gt;= 0.13.6 since this release of Scala.js is published against sbt 0.13.6.&lt;/p&gt;

&lt;p&gt;Scala.js 0.5.6 is binary compatible with Scala.js 0.5.5 and hence backward binary compatible with older releases of the 0.5.x branch.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;changes-in-the-056-release&quot;&gt;Changes in the 0.5.6 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt; (see also the announcements for &lt;a href=&quot;/news/2014/06/30/announcing-scalajs-0.5.1/&quot;&gt;0.5.1&lt;/a&gt;, &lt;a href=&quot;/news/2014/07/09/announcing-scalajs-0.5.2/&quot;&gt;0.5.2&lt;/a&gt;, &lt;a href=&quot;/news/2014/07/30/announcing-scalajs-0.5.3/&quot;&gt;0.5.3&lt;/a&gt;, &lt;a href=&quot;/news/2014/08/29/announcing-scalajs-0.5.4/&quot;&gt;0.5.4&lt;/a&gt; and &lt;a href=&quot;/news/2014/09/18/announcing-scalajs-0.5.5/&quot;&gt;0.5.5&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;export-facilities&quot;&gt;Export Facilities&lt;/h3&gt;

&lt;h4 id=&quot;jsexport-transition&quot;&gt;@JSExport transition&lt;/h4&gt;

&lt;p&gt;In Scala.js 0.6.x, putting &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; on a class or an object will export it to its fully qualified name, rather than its simple name. To ease the transition to 0.6.x, Scala.js 0.5.6 will warn if an &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt; annotation without explicit name is put on a top level object or class. Otherwise, such code would silently break when migrating to 0.6.x.&lt;/p&gt;

&lt;p&gt;To silence the warning, simply specify the desired name explicilty.&lt;/p&gt;

&lt;h4 id=&quot;jsexportdescendentclasses&quot;&gt;@JSExportDescendentClasses&lt;/h4&gt;

&lt;p&gt;Analogous to &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportDescendentObjects&lt;/code&gt;, this annotation causes all constructors of extending classes to be exported under the fully qualified name of the class.&lt;/p&gt;

&lt;h3 id=&quot;java-library&quot;&gt;Java Library&lt;/h3&gt;

&lt;p&gt;The following features of the Java library have been added:&lt;/p&gt;

&lt;h4 id=&quot;charset-conversions&quot;&gt;Charset Conversions&lt;/h4&gt;

&lt;p&gt;Scala.js now supports the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/index.html?java/nio/charset/StandardCharsets.html&quot;&gt;standard charset conversions&lt;/a&gt; that every JRE supports. You can now pass instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;Charset&lt;/code&gt; to methods that convert bytes to characters and vice versa.&lt;/p&gt;

&lt;p&gt;Note that you should avoid using &lt;code class=&quot;highlighter-rouge&quot;&gt;Charset.forName&lt;/code&gt; (and methods that take charsets as strings in general), since they will make all &lt;code class=&quot;highlighter-rouge&quot;&gt;Charset&lt;/code&gt; implementations reachable and hence explode your code size. If you compile on JDK6 (which does not have &lt;code class=&quot;highlighter-rouge&quot;&gt;StandardCharsets&lt;/code&gt;), you may use &lt;a href=&quot;https://www.scala-js.org/api/scalajs-library/0.5.6/#scala.scalajs.niocharset.StandardCharsets&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.niocharset.StandardCharsets&lt;/code&gt;&lt;/a&gt; to retrieve an instance of the desired &lt;code class=&quot;highlighter-rouge&quot;&gt;Charset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This also allowed to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;String.getBytes&lt;/code&gt; (&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1087&quot;&gt;#1087&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;others&quot;&gt;Others&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.io.PrintWriter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.UUID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.5:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1140&quot;&gt;#1140&lt;/a&gt; fullOptJs and fastOptJs hang when running on JDK 8&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1148&quot;&gt;#1148&lt;/a&gt; Compiler crash with Scoverage&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1171&quot;&gt;#1171&lt;/a&gt; String.split / regex discrepancy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1191&quot;&gt;#1191&lt;/a&gt; Assign multiple variables from a case class with &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportAll&lt;/code&gt; causes compilation error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?page=1&amp;amp;q=is%3Aissue+is%3Aclosed+milestone%3Av0.5.6&quot;&gt;full list&lt;/a&gt; on GitHub.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.5.5</title>
   <link href="https://www.scala-js.org/news/2014/09/18/announcing-scalajs-0.5.5/"/>
   <updated>2014-09-18T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2014/09/18/announcing-scalajs-0.5.5</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.5.5!&lt;/p&gt;

&lt;p&gt;This release contains various minor bug fixes and enhancements. It is the last anticipated release in the 0.5.x series and prepares the upcoming 0.6.x series by deprecating various obsolete features (see below for details).
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;To upgrade, simply change the version number in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;, as usual.&lt;/p&gt;

&lt;p&gt;Scala.js 0.5.5 is backward binary compatible with older versions of the 0.5.x branch. However, it is &lt;em&gt;not&lt;/em&gt; forward binary compatible. This means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t need to re-publish libraries&lt;/li&gt;
  &lt;li&gt;You must upgrade to Scala.js 0.5.5 if any library you depend on uses Scala.js 0.5.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you choose to re-publish a library, make sure to bump its version.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;upgrading-from-053-and-below&quot;&gt;Upgrading from 0.5.3 and below&lt;/h4&gt;

&lt;p&gt;If you use &lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;, you need to upgrade it to version 0.2.3 or later.
This is due to a binary incompatible change in the sbt plugin in Scala.js 0.5.4.&lt;/p&gt;

&lt;h2 id=&quot;changes-in-the-055-release&quot;&gt;Changes in the 0.5.5 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt; (see also the announcements for &lt;a href=&quot;/news/2014/06/30/announcing-scalajs-0.5.1/&quot;&gt;0.5.1&lt;/a&gt;, &lt;a href=&quot;/news/2014/07/09/announcing-scalajs-0.5.2/&quot;&gt;0.5.2&lt;/a&gt;, &lt;a href=&quot;/news/2014/07/30/announcing-scalajs-0.5.3/&quot;&gt;0.5.3&lt;/a&gt; and &lt;a href=&quot;/news/2014/08/29/announcing-scalajs-0.5.4/&quot;&gt;0.5.4&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;deprecations--renamings&quot;&gt;Deprecations &amp;amp; Renamings&lt;/h3&gt;

&lt;h4 id=&quot;implicit-conversion-between-scalaarray-and-jsarray&quot;&gt;Implicit conversion between &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.Array&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Implicit conversion between &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.Array&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; has been deprecated in favor of &lt;code class=&quot;highlighter-rouge&quot;&gt;JSConverters&lt;/code&gt;. Instead of relying on implicit conversion, use &lt;code class=&quot;highlighter-rouge&quot;&gt;toArray&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;toJSArray&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;js.Array to scala.Array&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsArr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scArr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toArray&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;scala.Array to js.Array&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js.JSConverters._&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scArr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsArr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toJSArray&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that these conversions apply equally to other Scala collections like &lt;code class=&quot;highlighter-rouge&quot;&gt;Seq&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;. Conversion between &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary&lt;/code&gt; and Scala’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; is supported as well.&lt;/p&gt;

&lt;h4 id=&quot;packagejs&quot;&gt;packageJS&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;packageJS&lt;/code&gt; has been deprecated in favor of &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Its providing tasks (&lt;code class=&quot;highlighter-rouge&quot;&gt;packageExternalDepsJS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;packageInternalDepsJS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;packageExportedProductsJS&lt;/code&gt;) have been deprecated without replacement. If such a mechanism is required, &lt;a href=&quot;https://www.scala-js.org/api/scalajs-tools/0.5.5/#scala.scalajs.tools.packager.ScalaJSPackager&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ScalaJSPackager&lt;/code&gt;&lt;/a&gt; should be used directly.&lt;/p&gt;

&lt;h4 id=&quot;sbt-task-renamings&quot;&gt;sbt Task Renamings&lt;/h4&gt;

&lt;p&gt;Several sbt tasks have been renamed to avoid conflicts with other sbt plugins (see &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1050&quot;&gt;#1050&lt;/a&gt;). The tasks are still available under their old name in 0.5.5 in order to not break builds, but the aliases will be removed in 0.6.0. Inside the console, only the new name is available.&lt;/p&gt;

&lt;p&gt;We have taken great care to only rename keys which are very unlikely to be used by a Scala.js build. Just in case, a list of the renamings is given below. Note that the sbt plugin will undergo a major reworking in 0.6.0 to make it an &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoPlugin&lt;/code&gt;. We therefore recommend to not update your build yet if you do not need to.&lt;/p&gt;

&lt;table class=&quot;table table-bordered&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Old Name&lt;/th&gt;
      &lt;th&gt;New Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;packageLauncher&lt;/td&gt;
      &lt;td&gt;packageScalaJSLauncher&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;preLinkClasspath&lt;/td&gt;
      &lt;td&gt;scalaJSPreLinkClasspath&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;execClasspath&lt;/td&gt;
      &lt;td&gt;scalaJSExecClasspath&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;launcher&lt;/td&gt;
      &lt;td&gt;scalaJSLauncher&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jsConsole&lt;/td&gt;
      &lt;td&gt;scalaJSConsole&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ensureUnforked&lt;/td&gt;
      &lt;td&gt;scalaJSEnsureUnforked&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;requestsDOM&lt;/td&gt;
      &lt;td&gt;scalaJSRequestsDOM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;defaultPostLinkJSEnv&lt;/td&gt;
      &lt;td&gt;scalaJSDefaultPostLinkJSEnv&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;preLinkClasspath&lt;/td&gt;
      &lt;td&gt;scalaJSPreLinkClasspath&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;improvements&quot;&gt;Improvements&lt;/h3&gt;
&lt;p&gt;The following improvements have been made in 0.5.5.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Source mapping support in Rhino (enabled by default) (&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/727&quot;&gt;#727&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Full source mapping support in Node.js (not only in testing). Requires installing &lt;code class=&quot;highlighter-rouge&quot;&gt;source-map-support&lt;/code&gt; via &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The Node.js runner honors the system environment’s &lt;code class=&quot;highlighter-rouge&quot;&gt;NODE_PATH&lt;/code&gt; (&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1016&quot;&gt;#1016&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tiny JVM (only) library containing Scala.js export annotations (&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1006&quot;&gt;#1006&lt;/a&gt;). Use with:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  libraryDependencies += &quot;org.scala-lang.modules.scalajs&quot; %% &quot;scalajs-stubs&quot; % &quot;0.5.5&quot;

  resolvers += scala.scalajs.sbtplugin.ScalaJSPluginInternal.scalaJSReleasesResolver

  // or without Scala.js on the classpath
  resolvers += Resolver.url(&quot;scala-js-releases&quot;,
      url(&quot;http://dl.bintray.com/content/scala-js/scala-js-releases&quot;))(
      Resolver.ivyStylePatterns)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Improved accuracy and parallelization for incremental optimizer&lt;/li&gt;
  &lt;li&gt;Allow to export protected members (&lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExportAll&lt;/code&gt; still only exports public members).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h4&gt;

&lt;p&gt;The following bugs have been fixed since 0.5.4:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/985&quot;&gt;#985&lt;/a&gt; JSExport doesn’t overload js.Any and Any correctly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/987&quot;&gt;#987&lt;/a&gt; Splitting an empty string should return an array with 1 element, not an empty array&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/997&quot;&gt;#997&lt;/a&gt; Honor in-regex flags in java.util.regex&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1011&quot;&gt;#1011&lt;/a&gt; IR printer doesn’t print -0.0 correctly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1020&quot;&gt;#1020&lt;/a&gt; Correct stack frame resolution of anonymous functions in Chrome/v8&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.5.4</title>
   <link href="https://www.scala-js.org/news/2014/08/29/announcing-scalajs-0.5.4/"/>
   <updated>2014-08-29T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2014/08/29/announcing-scalajs-0.5.4</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.5.4!&lt;/p&gt;

&lt;p&gt;This release contains various bug fixes and enhancements to both the compiler and the sbt plugin.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Scala.js 0.5.4 is backward binary compatible with older versions of the 0.5.x branch. However, it is &lt;em&gt;not&lt;/em&gt; forward binary compatible. This means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t need to re-publish libraries&lt;/li&gt;
  &lt;li&gt;You must upgrade to Scala.js 0.5.4 if any library you depend on uses Scala.js 0.5.4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you choose to re-publish a library, make sure to bump its version.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;upgrading-from-053-an-below&quot;&gt;Upgrading from 0.5.3 an below&lt;/h2&gt;

&lt;p&gt;Simply change the version number in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;, as usual.&lt;/p&gt;

&lt;p&gt;If you use &lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;, you need to upgrade it to version 0.2.3 or later.
This is due to a binary incompatible change in the sbt plugin.&lt;/p&gt;

&lt;h2 id=&quot;improvements-in-the-054-release&quot;&gt;Improvements in the 0.5.4 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt; (see also the announcements for &lt;a href=&quot;/news/2014/06/30/announcing-scalajs-0.5.1/&quot;&gt;0.5.1&lt;/a&gt;, &lt;a href=&quot;/news/2014/07/09/announcing-scalajs-0.5.2/&quot;&gt;0.5.2&lt;/a&gt; and &lt;a href=&quot;/news/2014/07/30/announcing-scalajs-0.5.3/&quot;&gt;0.5.3&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;javascript-export-facilities&quot;&gt;JavaScript Export Facilities&lt;/h3&gt;

&lt;p&gt;A few improvements have been made to &lt;code class=&quot;highlighter-rouge&quot;&gt;@JSExport&lt;/code&gt;-related features, to export Scala.js APIs to JavaScript:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/doc/interoperability/export-to-javascript.html#JSExportNamed&quot;&gt;Export methods with named arguments&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/doc/interoperability/export-to-javascript.html#JSExportAll&quot;&gt;Automatically export all public members of a class/object&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/doc/interoperability/export-to-javascript.html#constructor-params&quot;&gt;Export fields declared as constructor parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;phantomjs&quot;&gt;PhantomJS&lt;/h3&gt;

&lt;p&gt;The interface to the PhantomJS interpreter has been enhanced with two features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/doc/project/js-environments.html#phantomjs-arguments&quot;&gt;Passing command-line arguments to PhantomJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/doc/project/js-environments.html#phantomjs-no-auto-terminate&quot;&gt;Configuring PhantomJS not to terminate automatically when the &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; method returns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.System.exit(exitCode)&lt;/code&gt; to explicitly terminate the PhantomJS environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conversions&quot;&gt;Conversions&lt;/h3&gt;

&lt;p&gt;The new object &lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.5.4/#scala.scalajs.js.JSConverters$&quot;&gt;JSConverters&lt;/a&gt; provides extension methods to convert between JavaScript collections and Scala collections (maps, sequences and option).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/doc/interoperability/types.html&quot;&gt;More information in the documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;source-maps-for-fulloptjs&quot;&gt;Source maps for fullOptJS&lt;/h3&gt;

&lt;p&gt;Source maps are now generated for &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptJS&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;To support this, we have changed the way we integrate the Google Closure Compiler.
Should you experience any regression, please file an issue, and use the following fallback to revert to the old mechanism (which will not generate source maps):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;ScalaJSKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directFullOptJS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;-cross-versioning&quot;&gt;%%% Cross versioning&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;%%%&lt;/code&gt; operator used to build library dependencies for Scala.js has been enhanced.
It is now able to determine whether it is used inside a Scala.js project or a Scala/JVM project.
In the latter, it will be equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;%%&lt;/code&gt;.
This allows to use &lt;code class=&quot;highlighter-rouge&quot;&gt;%%%&lt;/code&gt; consistently for cross-compiling projects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/doc/project/dependencies.html&quot;&gt;More information in the documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;auto-detect-whether-the-dom-is-required&quot;&gt;Auto-detect whether the DOM is required&lt;/h3&gt;

&lt;p&gt;The setting &lt;code class=&quot;highlighter-rouge&quot;&gt;requiresDOM&lt;/code&gt; will now default to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; if the special &lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeDOM&lt;/code&gt; dependency is listed in the (transitive) &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; of your project.
To specify that your library or program depends on the DOM, use the following setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;ScalaJSKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sbtplugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RuntimeDOM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is still possible to override this behavior by explicitly setting &lt;code class=&quot;highlighter-rouge&quot;&gt;requiresDOM&lt;/code&gt;, as before.&lt;/p&gt;

&lt;h3 id=&quot;toolsjs&quot;&gt;Tools.js&lt;/h3&gt;

&lt;p&gt;Our tools API now cross-compiles for Scala/JVM and Scala.js.
It can therefore be used in Scala.js, for example to link and optimize Scala.js IR on the client.&lt;/p&gt;

&lt;h4 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h4&gt;

&lt;p&gt;The following bugs have been fixed since 0.5.3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/897&quot;&gt;#897&lt;/a&gt; fastOptJS crash: Invalid lhs for Assign: This()&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/898&quot;&gt;#898&lt;/a&gt; PhantomJS polyfill doesn’t work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/899&quot;&gt;#899&lt;/a&gt; Compiler should always unbox arguments to reflective calls&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/904&quot;&gt;#904&lt;/a&gt; Stack overflow in fast optimizer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/906&quot;&gt;#906&lt;/a&gt; Assignment to exported var gives “Unhandled type class” warning&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/907&quot;&gt;#907&lt;/a&gt; fastOptJS crash: statements before Dictionary.delete() in exported functions&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/908&quot;&gt;#908&lt;/a&gt; Calling Dictionary.delete() with js.Object property throws RuntimeException&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/919&quot;&gt;#919&lt;/a&gt; sbt: Inspecting does not work with scalaJSSettings&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/920&quot;&gt;#920&lt;/a&gt; Return type lifting for JSExports fails on RefinedTypes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/940&quot;&gt;#940&lt;/a&gt; Compiler crash on strange pattern match&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.5.3</title>
   <link href="https://www.scala-js.org/news/2014/07/30/announcing-scalajs-0.5.3/"/>
   <updated>2014-07-30T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2014/07/30/announcing-scalajs-0.5.3</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.5.3!&lt;/p&gt;

&lt;p&gt;This release was focused mostly on &lt;em&gt;performance&lt;/em&gt;, bringing speedups from 1.3x to 3.3x to your applications.
In some cases, Scala.js becomes slightly &lt;em&gt;faster than JavaScript&lt;/em&gt;!
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Scala.js 0.5.3 is backward binary compatible with older versions of the 0.5.x branch. However, it is &lt;em&gt;not&lt;/em&gt; forward binary compatible. This means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t need to re-publish libraries&lt;/li&gt;
  &lt;li&gt;You must upgrade to Scala.js 0.5.3 if any library you depend on uses Scala.js 0.5.3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you choose to re-publish a library, make sure to bump its version.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvements-in-the-053-release&quot;&gt;Improvements in the 0.5.3 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt; (see also the announcements for &lt;a href=&quot;/news/2014/06/30/announcing-scalajs-0.5.1/&quot;&gt;0.5.1&lt;/a&gt; and &lt;a href=&quot;/news/2014/07/09/announcing-scalajs-0.5.2/&quot;&gt;0.5.2&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;performance-improvements&quot;&gt;Performance improvements&lt;/h4&gt;

&lt;p&gt;Scala.js 0.5.3 is the first release to include an actual &lt;em&gt;optimizer&lt;/em&gt; specific to Scala.js.
This optimizer runs as part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; task, and consistently brings speedups to all applications from 1.3x to 3.3x (&lt;a href=&quot;https://docs.google.com/document/d/17b18-oLJEIADixkSPR2mYof13ny1nGTtEVfsdiM7AGE/edit&quot;&gt;Rough benchmarks&lt;/a&gt;), along with code size reduction (15 % for the fastOpt version and 6 % for the fullOpt on our demo application) and less memory usage.
Because it runs at link time, the optimizer also applies to libraries you depend on that have been compiled with Scala.js 0.5.0 to 0.5.2 (although a few optimizations won’t be as effective).&lt;/p&gt;

&lt;p&gt;The optimizer is &lt;em&gt;incremental&lt;/em&gt; in the same sense as the incremental compilation of sbt: on each run, it will reoptimize only the parts of your application that need reoptimizing.
This means that it will run much faster starting from the second run within an sbt session (within 200 ms in typical scenarios).&lt;/p&gt;

&lt;p&gt;Should you experience any issue (e.g., your code broke), please report them &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.
You can also disable the optimizer with the sbt setting&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;ScalaJSKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inliningMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sbtplugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InliningMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Off&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, you can force it to run in batch mode (non incremental) on every run with the following setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;ScalaJSKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inliningMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sbtplugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InliningMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Batch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;new-parts-of-the-java-standard-library&quot;&gt;New parts of the Java standard library&lt;/h4&gt;

&lt;p&gt;The following classes from the Java standard library are now available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.net.URI&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InputStream&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FilterInputStream&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DataInput&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ByteArrayInputStream&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js.typearray.ArrayBufferInputStream&lt;/code&gt;, an implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;InputStream&lt;/code&gt; reading a JavaScript &lt;code class=&quot;highlighter-rouge&quot;&gt;TypedArray&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These classes are automatically available in all your Scala.js projects.&lt;/p&gt;

&lt;p&gt;Other, additional Java classes are also available in the &lt;code class=&quot;highlighter-rouge&quot;&gt;javalib-ex&lt;/code&gt; package.
These classes require some features of ECMAScript 6 to be implemented by the JavaScript engine, and must therefore be enabled explicitly with this dependency:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.scala-lang.modules.scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scalajs-javalib-ex&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Currently, the only additional class is &lt;code class=&quot;highlighter-rouge&quot;&gt;java.io.DataInputStream&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;javascript-libraries-in-nodejs&quot;&gt;JavaScript libraries in Node.js&lt;/h4&gt;

&lt;p&gt;Until 0.5.2, the Node.js runner had trouble running JavaScript libraries that were “too” smart about being run as a Node.js module (bug &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/706&quot;&gt;#706&lt;/a&gt;).
To fix this issue, the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; mechanism has been augmented with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;commonJSName&lt;/code&gt; directive, to be used as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;jsDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.webjars&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mustachejs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.8.2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mustache.js&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commonJSName&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mustache&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;commonJSName&lt;/code&gt; directive should be set to the name used by the library to export itself when run in a CommonJS environment (such as Node.js).
You can typically figure that out from the library’s documentation.&lt;/p&gt;

&lt;h4 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h4&gt;

&lt;p&gt;The following bugs have been fixed in 0.5.3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/820&quot;&gt;#820&lt;/a&gt; Generated html for phantomjs on windows fails to load scripts&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/843&quot;&gt;#843&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array.toList&lt;/code&gt; (and others) fails with a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/865&quot;&gt;#865&lt;/a&gt; PhantomJS doesn’t use existing shell environment&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/872&quot;&gt;#872&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;string.split('\n')&lt;/code&gt; does not work&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;changes-to-the-ir&quot;&gt;Changes to the IR&lt;/h4&gt;

&lt;p&gt;Some (more) minor changes have been made to the IR to better accommodate the optimizer.
This is the reason for the lack of forward binary compatibility in this release.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.5.2</title>
   <link href="https://www.scala-js.org/news/2014/07/09/announcing-scalajs-0.5.2/"/>
   <updated>2014-07-09T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2014/07/09/announcing-scalajs-0.5.2</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.5.2!
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Scala.js 0.5.2 is backward binary compatible with older versions of the 0.5.x branch. However, it is &lt;em&gt;not&lt;/em&gt; forward binary compatible. This means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t need to re-publish libraries&lt;/li&gt;
  &lt;li&gt;You must upgrade to Scala.js 0.5.2 if any library you depend on uses Scala.js 0.5.2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you choose to re-publish a library, make sure to bump its version.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvements-in-the-052-release&quot;&gt;Improvements in the 0.5.2 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt; (and maybe the &lt;a href=&quot;/news/2014/06/30/announcing-scalajs-0.5.1/&quot;&gt;0.5.1 announcement&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;typedarrays&quot;&gt;TypedArrays&lt;/h4&gt;

&lt;p&gt;The new package &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.scalajs.js.typedarray&lt;/code&gt; contains facade types
for JavaScript TypedArrays. It introduces compiler support to convert
&lt;code class=&quot;highlighter-rouge&quot;&gt;scala.Array&lt;/code&gt;s to their TypedArray equivalent and vice versa.&lt;/p&gt;

&lt;p&gt;Note that TypedArrays are &lt;strong&gt;not&lt;/strong&gt; part of the ECMAScript 5
specification. You need to make sure your target platform supports
TypedArrays in addition to ECMAScript 5, if you decide to use them. Scala.js’
&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.5.2/test-suite/src/test/scala/scala/scalajs/test/typedarray&quot;&gt;TypedArray test suite&lt;/a&gt;
covers the full typed API and should be sufficient to verify whether a
given JavaScript runtime supports TypedArrays.&lt;/p&gt;

&lt;h4 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h4&gt;

&lt;p&gt;The following bugs have been fixed in 0.5.2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/789&quot;&gt;#789&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptStage::run&lt;/code&gt; fails with Node.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/791&quot;&gt;#791&lt;/a&gt; Default arguments in the constructor of facade classes fail if the companion object doesn’t extend &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Any&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/796&quot;&gt;#796&lt;/a&gt; Extending &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Any&lt;/code&gt; directly gives strange error messages&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;changes-to-the-ir&quot;&gt;Changes to the IR&lt;/h4&gt;

&lt;p&gt;Some minor changes have been made to the IR to better accommodate the incremental optimizer in the pipeline for 0.5.3. This is the reason for the lack of forward binary compatibility.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.5.1</title>
   <link href="https://www.scala-js.org/news/2014/06/30/announcing-scalajs-0.5.1/"/>
   <updated>2014-06-30T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2014/06/30/announcing-scalajs-0.5.1</id>
   <content type="html">&lt;p&gt;We are excited to announce the release of Scala.js 0.5.1!&lt;/p&gt;

&lt;p&gt;This version features bug fixes and improvements while remaining binary compatible with Scala.js 0.5.0. Therefore,
Scala.js libraries may, but need not be republished with Scala.js 0.5.1.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvements-in-the-051-release&quot;&gt;Improvements in the 0.5.1 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;additions-to-the-java-library&quot;&gt;Additions to the Java library&lt;/h4&gt;

&lt;p&gt;The following two are now implemented according to spec:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Date&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Random&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;wrappers-for-javascript-arrays-and-dictionaries&quot;&gt;Wrappers for JavaScript Arrays and Dictionaries&lt;/h4&gt;

&lt;p&gt;Thanks to &lt;code class=&quot;highlighter-rouge&quot;&gt;js.WrappedArray&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.WrappedDictionary&lt;/code&gt; (and some implicit conversions), &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Array&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary&lt;/code&gt; can now be passed to Scala code that expects &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Seq&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable.Map&lt;/code&gt; respectively:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setHead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;mutable.Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setHead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, this allows to call methods defined on &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Dictionary&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, etc.)&lt;/p&gt;

&lt;h4 id=&quot;filter-jsdependencies-when-executing-javascript-code&quot;&gt;Filter &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencies&lt;/code&gt; when executing JavaScript code&lt;/h4&gt;

&lt;p&gt;The new sbt setting &lt;code class=&quot;highlighter-rouge&quot;&gt;jsDependencyFilter&lt;/code&gt; can be used to modify the dependencies used when running/testing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jsDependencyFilter := (_.filter(_.resourceName != &quot;jquery.js&quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above would prevent “jquery.js” from being included by the sbt runners. See &lt;a href=&quot;https://www.scala-js.org/api/scalajs-tools/0.5.1/#scala.scalajs.tools.jsdep.FlatJSDependency&quot;&gt;FlatJSDependency&lt;/a&gt; for fields that you can use.&lt;/p&gt;

&lt;h4 id=&quot;ordered-testing-output&quot;&gt;Ordered testing output&lt;/h4&gt;

&lt;p&gt;When testing in the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptStage&lt;/code&gt; or the &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptStage&lt;/code&gt;, test output sometimes appeared interleaved. This has been fixed this release.&lt;/p&gt;

&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;/h2&gt;

&lt;p&gt;Thanks to all the code contributors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sjrd/&quot;&gt;Sébastien Doeraene&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gzm0/&quot;&gt;Tobias Schlatter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexander-myltsev&quot;&gt;Alexander Myltsev&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mseddon&quot;&gt;Matt Seddon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing Scala.js 0.5.0</title>
   <link href="https://www.scala-js.org/news/2014/06/13/announcing-scalajs-0.5.0/"/>
   <updated>2014-06-13T00:00:00-04:00</updated>
   <id>https://www.scala-js.org/news/2014/06/13/announcing-scalajs-0.5.0</id>
   <content type="html">&lt;p&gt;We are very excited to announce the final release of Scala.js 0.5.0!
This version is a major milestone towards the maturity of Scala.js, probably
the most important release since its very first prototype.&lt;/p&gt;

&lt;p&gt;Scala.js is a compiler from Scala to JavaScript. It allows you to write your
entire web application in Scala and simply compile to JavaScript!
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/tutorial/&quot;&gt;Tutorial&lt;/a&gt;,
for newcomers to Scala.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./#upgrading&quot;&gt;Upgrading from Scala.js 0.4.x&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Try Scala.js right in your browser with
&lt;a href=&quot;http://www.scala-js-fiddle.com/&quot;&gt;Scala.jsFiddle&lt;/a&gt;
(currently using Scala.js 0.4.4)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-features-in-the-05x-series&quot;&gt;New features in the 0.5.x series&lt;/h2&gt;

&lt;p&gt;Scala.js 0.5.0 introduces new features, improvements and bug fixes in many
areas, ranging from compiler correctness to usability to emitted code size and
speed.&lt;/p&gt;

&lt;h3 id=&quot;language-changes&quot;&gt;Language changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Scala semantics for integer and character types (i.e., wrapping semantics)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Byte&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Short&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Char&lt;/code&gt; now behave the same way as on the
JVM with respect to wrapping around their range, e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt; is truly
a signed 32-bit integer.&lt;/li&gt;
      &lt;li&gt;Exception: division by 0 is still unspecified.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Long&lt;/code&gt; continues to behave as a proper signed 64-bit integer, as it
did for a long time&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; still behaves just like &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;, as it always did.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/doc/semantics.html&quot;&gt;Full details&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Improved interoperability with JavaScript
    &lt;ul&gt;
      &lt;li&gt;Normal Scala primitive types can be used instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Number&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;js.Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js.String&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.Undefined&lt;/code&gt; for interoperability with
JavaScript, because they are guaranteed to always be represented as
primitive JavaScript values (&lt;code class=&quot;highlighter-rouge&quot;&gt;Char&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Long&lt;/code&gt; are still opaque to
JavaScript, because they do not have a corresponding type in JavaScript).
See &lt;a href=&quot;/doc/interoperability/types.html#type-correspondence&quot;&gt;the documentation on type correspondance&lt;/a&gt;
for more details.&lt;/li&gt;
      &lt;li&gt;Introduced the type &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr[+A]&lt;/code&gt;
(&lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.5.0/#scala.scalajs.js.UndefOr&quot;&gt;API&lt;/a&gt;),
which represents a value of type &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, and offers an
&lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt;-like interface where &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; takes the role of &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;improvements-to-the-generated-code&quot;&gt;Improvements to the generated code&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Smaller. For a non-trivial application, we have
    &lt;ul&gt;
      &lt;li&gt;~1.3 MB for fast-optimized code (for iterative development)&lt;/li&gt;
      &lt;li&gt;~180 KB for full-optimized code (for production)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Faster.
    &lt;ul&gt;
      &lt;li&gt;Values of primitive types, excluding &lt;code class=&quot;highlighter-rouge&quot;&gt;Char&lt;/code&gt;, are not boxed anymore when
assigned to &lt;code class=&quot;highlighter-rouge&quot;&gt;Any&lt;/code&gt; or generic types&lt;/li&gt;
      &lt;li&gt;We don’t have precise benchmarks, but we received reports of noticeable
improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sbt-plugin-changes&quot;&gt;sbt plugin changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;preoptimizeJS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;optimizeJS&lt;/code&gt; have been renamed &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptJS&lt;/code&gt;, respectively, to better represent their intent.
&lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; is &lt;em&gt;really&lt;/em&gt; fast (less than 1/2 second in addition to the
normal &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt; of scalac), and is now the recommended default for
iterative development.&lt;/li&gt;
  &lt;li&gt;Running and testing with &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; and
&lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptStage::run&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptStage::test&lt;/code&gt;, run your code using
a native-speed interpreter on the result of fast-optimization.&lt;/li&gt;
      &lt;li&gt;By default, Node.js is used, unless the setting &lt;code class=&quot;highlighter-rouge&quot;&gt;requiresDOM := true&lt;/code&gt;
is set, in which case PhantomJS is used&lt;/li&gt;
      &lt;li&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptStage&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptStage&lt;/code&gt; to execute the full-optimized
version of your code.&lt;/li&gt;
      &lt;li&gt;Node.js and/or PhantomJS must be installed separately for this to work.
The basic &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; still use Rhino and work out-of-the-box.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Auto-discovery of objects extending the &lt;code class=&quot;highlighter-rouge&quot;&gt;js.JSApp&lt;/code&gt; trait
(&lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.5.0/#scala.scalajs.js.JSApp&quot;&gt;API&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Can be run directly with the &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; task&lt;/li&gt;
      &lt;li&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;persistLauncher := true&lt;/code&gt;, sbt will emit a tiny JavaScript entry
point that calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; method.&lt;/li&gt;
      &lt;li&gt;To support this the best we could, we have dropped auto-discovery of
objects defining a &lt;code class=&quot;highlighter-rouge&quot;&gt;def main(args: Array[String])&lt;/code&gt; method.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/tutorial/basic/#optimizing&quot;&gt;More information in the tutorial&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;binary-compatibility-and-dependency-management&quot;&gt;Binary compatibility and dependency management&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Backward binary compatibility across minor releases
    &lt;ul&gt;
      &lt;li&gt;Similarly to Scala, except it is only &lt;em&gt;backward&lt;/em&gt;.&lt;/li&gt;
      &lt;li&gt;For example, libraries compiled with Scala.js 0.5.0 will be usable with
Scala.js 0.5.1, but not (necessarily) the other way around.&lt;/li&gt;
      &lt;li&gt;The sbt plugin encodes the Scala.js binary version in artifact names
in addition to the Scala binary version.
For example, the artifacts for a library “foo” compiled with
Scala 2.11.1 and Scala.js 0.5.0 will be named &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_sjs0.5_2.11&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;To depend on the doubly-cross compiled version of a Scala.js library,
use &lt;code class=&quot;highlighter-rouge&quot;&gt;%%%&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;%%&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;libraryDependencies&lt;/code&gt;. For example,
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;org.scala-lang.modules.scalajs&quot; %%% &quot;scalajs-dom&quot; % &quot;0.6&quot;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Managing your dependencies on JavaScript libraries
    &lt;ul&gt;
      &lt;li&gt;In addition to depending on other Scala.js libraries, Scala.js now
supports depending on JavaScript libraries through
&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;, that will be resolved automatically.&lt;/li&gt;
      &lt;li&gt;You can ask the sbt plugin to package all your JavaScript dependencies
in a single &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; file if you so wish, but this is not mandatory.&lt;/li&gt;
      &lt;li&gt;See the &lt;a href=&quot;/tutorial/#using-jquery&quot;&gt;tutorial&lt;/a&gt; for more information.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;command-line-interface-cli&quot;&gt;Command line interface (CLI)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Following a request by some of our users, we added a
&lt;a href=&quot;/doc/internals/downloads.html&quot;&gt;stand-alone distribution&lt;/a&gt; that allows to
use Scala.js without sbt (but with Scala).
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajsc&lt;/code&gt; is a front-end to &lt;code class=&quot;highlighter-rouge&quot;&gt;scalac&lt;/code&gt; setting up correctly the Scala.js
compiler plugin and library on the classpath&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajsld&lt;/code&gt; performs linking and optimizations (the equivalent of
&lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptJS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fullOptJS&lt;/code&gt; in sbt)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scalajsp&lt;/code&gt; prints the content of &lt;code class=&quot;highlighter-rouge&quot;&gt;.sjsir&lt;/code&gt; files (the intermediate files
produced by &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajsc&lt;/code&gt; and consumed by &lt;code class=&quot;highlighter-rouge&quot;&gt;scalajsld&lt;/code&gt;) in a human-readable
form.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-upgrading-from-scalajs-04x&quot;&gt;&lt;a name=&quot;upgrading&quot;&gt;&lt;/a&gt; Upgrading from Scala.js 0.4.x&lt;/h2&gt;

&lt;p&gt;Source code written for Scala.js 0.4.x should mostly compile without change
for Scala.js 0.5.0. Due to the ability to type JavaScript APIs more precisely,
in particular using &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.Int&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;js.UndefOr&lt;/code&gt;, it is possible that code
interacting with, for example, the statically typed DOM API will need some
minor changes.&lt;/p&gt;

&lt;p&gt;However, build files and HTML files surrounding Scala.js source code will need
important adaptations. The easiest is to reproduce the changes of
&lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/45de74a6a029eb9d11579f667a622a8393a7b143&quot;&gt;this commit&lt;/a&gt;
of the bootstrapping skeleton.&lt;/p&gt;

&lt;p&gt;You may also wish to take advantage of the new &lt;code class=&quot;highlighter-rouge&quot;&gt;persistLauncher&lt;/code&gt; setting to
automatically generate a launcher script based on the discovered &lt;code class=&quot;highlighter-rouge&quot;&gt;JSApp&lt;/code&gt;, in
which case you can also apply the changes of
&lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/b4cf28f7e6d5447fde248369a6f62d718c3f8aca&quot;&gt;this other commit&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;known-issues&quot;&gt;Known issues&lt;/h2&gt;

&lt;p&gt;This release suffers from a few known issues, which we decided to postpone to
a later (binary-compatible) release. The most important ones are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/727&quot;&gt;#727&lt;/a&gt; -
Source mapping does not work with our Rhino interpreter (with &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;Prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptStage::run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptStage::test&lt;/code&gt; to run with Node.js:
it is faster and you will get stack traces from your &lt;code class=&quot;highlighter-rouge&quot;&gt;.scala&lt;/code&gt; source
files.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/608&quot;&gt;#608&lt;/a&gt; -
Ordering issues with the test reporter, which can mix results of tests
ran in parallel.
    &lt;ul&gt;
      &lt;li&gt;When a test fails, consider using &lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptStage::testQuick&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;fastOptStage::testOnly&lt;/code&gt; to rerun only the failing test, which will
mitigate this issue.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/706&quot;&gt;#706&lt;/a&gt; -
JS libraries that act “too” smartly in Node.js.
    &lt;ul&gt;
      &lt;li&gt;Work around: force usage of PhantomJS instead of Node.js, on which this
issue does not seem to manifest.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the complete list of known issues (and report new issues)
&lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>